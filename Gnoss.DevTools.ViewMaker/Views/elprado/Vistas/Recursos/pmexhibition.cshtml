@*[security|||pmexhibition|||elprado]*@
@model ResourceViewModel
@using System.Data;
@using System.Reflection;
@using System.Drawing;
@{
    ResourceModel fichaRecurso = Model.Resource;
    ResourceModel.ActionsModel acciones = fichaRecurso.Actions;
    ResourceModel FichaDocumento = Model.Resource;
    SemanticResourceModel semCmsModel = Model.SemanticFrom;

    string IdGnoss = semCmsModel.RootEntities[0].Entity.Uri;

    string urlPersonalizacion = ViewBag.BaseURLContent + "/imagenes/proyectos/personalizacion/" + ViewBag.Comunidad.Key.ToString();

    ViewBag.ListaJS.Add("defer/" + urlPersonalizacion + "/ElPrado/js/freewall.js");

    // Idioma de navegaci√≥n del usuario
    string idiomaNav = ViewBag.UtilIdiomas.LanguageCode;

    string palSobreEsp = "sobre";
    string palSobreEng = "on";
    string sobreIdiomaNav = null;
    switch (idiomaNav)
    {
        case "es":
            sobreIdiomaNav = palSobreEsp;
            break;
        case "en":
            sobreIdiomaNav = palSobreEng;
            break;
        default:
            sobreIdiomaNav = palSobreEsp;
            break;
    }

    string titulo = semCmsModel.GetFirstValuePropertyByPath("http://www.cidoc-crm.org/cidoc-crm#p3_has_note");
    string antetitulo = semCmsModel.GetFirstValuePropertyByPath("http://museodelprado.es/ontologia/pradomuseum.owl#preTitle");
    string tipoExposicion = semCmsModel.GetFirstValuePropertyByPath("http://www.cidoc-crm.org/cidoc-crm#p2_has_type");
    string descripcion = semCmsModel.GetFirstValuePropertyByPath("http://museodelprado.es/ontologia/ecidoc.owl#p3_has_note");
    string sede = semCmsModel.GetFirstValuePropertyByPath("http://www.cidoc-crm.org/cidoc-crm#p7_took_place_at");
    string esEnElMuseo = semCmsModel.GetFirstValuePropertyByPath("http://museodelprado.es/ontologia/ecidoc.owl#p7_took_place_at_museum");
    string ciudad = semCmsModel.GetFirstValuePropertyByPath("http://museodelprado.es/ontologia/ecidoc.owl#p7_took_place_at_city");

    bool ocultarPaginas = semCmsModel.GetFirstValuePropertyByPath("http://museodelprado.es/ontologia/pradomuseum.owl#showPages") == Html.GetText("COMMON", "NO");
    bool ocultarObras = semCmsModel.GetFirstValuePropertyByPath("http://museodelprado.es/ontologia/pradomuseum.owl#showArtworks") == Html.GetText("COMMON", "NO");


    // FECHAS

    string fechas = string.Empty;

    string fechaInicio = semCmsModel.GetFirstValuePropertyByPath("http://museodelprado.es/ontologia/ecidoc.owl#p4_p79_has_time-span_beginning");
    string fechaFin = semCmsModel.GetFirstValuePropertyByPath("http://museodelprado.es/ontologia/ecidoc.owl#p4_p80_has_time-span_end");



    if (!string.IsNullOrEmpty(fechaInicio) && !string.IsNullOrEmpty(fechaFin))
    {
        DateTime? fechaInicioDateTime = Html.GetDate(fechaInicio);
        DateTime? fechaFinDateTime = Html.GetDate(fechaFin);

        if (fechaInicioDateTime.HasValue && fechaFinDateTime.HasValue)
        {
            string htmlFechaInicio = "<span " + semCmsModel.GetRDFAPropertyByPath("http://museodelprado.es/ontologia/ecidoc.owl#p4_p79_has_time-span_beginning") + ">" + fechaInicioDateTime.Value.ToString("d") + "</span>";

            string htmlFechaFin = "";
            if (fechaFin.Equals(@Html.Translate("FECHAEXPOSICIONINDEFINIDA")))
            {
                htmlFechaFin = "<span " + semCmsModel.GetRDFAPropertyByPath("http://museodelprado.es/ontologia/ecidoc.owl#p4_p80_has_time-span_end") + ">" + Html.Translate("VALOREXPOSICIONINDEFINIDA") + "</span>";
            }
            else
            {
                htmlFechaFin = "<span " + semCmsModel.GetRDFAPropertyByPath("http://museodelprado.es/ontologia/ecidoc.owl#p4_p80_has_time-span_end") + ">" + fechaFinDateTime.Value.ToString("d") + "</span>";
            }


            fechas = string.Concat(htmlFechaInicio, " - ", htmlFechaFin);
        }
    }

    // VENTA DESACTIVADA
    List<string> listaGuid = Html.Translate("GUID_EXPOSICIONES_VENTADESACTIVADA").Split('|').ToList<string>();

    bool ventaDesactivada = false;
    foreach (string guid in listaGuid)
    {
        ventaDesactivada = ventaDesactivada || IdGnoss.Contains(guid);
    }
    if (!string.IsNullOrEmpty(fechaFin))
    {
        DateTime? fechaFinDateTime = Html.GetDate(fechaFin);
        if (fechaFinDateTime.HasValue)
        {
            int result = DateTime.Compare(DateTime.UtcNow, fechaFinDateTime.Value);
            if (result > 0)
            {
                ventaDesactivada = true;
            }

        }

    }
    // COMISARIO
    SemanticPropertyModel propTipoComisario = semCmsModel.GetPropertyByPath("http://museodelprado.es/ontologia/ecidoc.owl#p14_carried_out_by_curator");

    SemanticPropertyModel propComisario = semCmsModel.GetPropertyByPath("http://museodelprado.es/ontologia/ecidoc.owl#p14_carried_out_by_curator");


    string comisario = string.Empty;
    string titularComisario = string.Empty;

    if (propComisario != null && propComisario.FirstPropertyValue != null)
    {
        titularComisario = propComisario.OntologyPropInfo.LabelTitle;
        string tipoComisario = semCmsModel.GetFirstValuePropertyByPath("http://museodelprado.es/ontologia/pradomuseum.owl#p14_carried_out_by_curator_type@@@http://museodelprado.es/ontologia/multilang-property.owl#textValue");
        if (!string.IsNullOrEmpty(tipoComisario))
        {
            titularComisario = tipoComisario;
        }
        comisario = propComisario.FirstPropertyValue.Value;
    }

    SemanticPropertyModel propHorario = semCmsModel.GetPropertyByPath("http://museodelprado.es/ontologia/ecidoc.owl#p4_has_time-span_opening_time");

    string horario = string.Empty;
    string titularHorario = string.Empty;

    if (propHorario != null && propHorario.PropertyValues != null && propHorario.PropertyValues.Count > 0)
    {
        horario = propHorario.FirstPropertyValue.Value;
        titularHorario = propHorario.OntologyPropInfo.LabelTitle;
    }

    string audioguiaUrl = string.Empty;

    SemanticPropertyModel propAudioguia = semCmsModel.GetPropertyByPath("http://museodelprado.es/ontologia/efrbrer.owl#has_audioguide");

    if (propAudioguia != null && propAudioguia.PropertyValues != null && propAudioguia.PropertyValues.Count() > 0)
    {
        SemanticPropertyModel propFileAudioguide = propAudioguia.FirstPropertyValue.RelatedEntity.GetPropertyByPath("http://museodelprado.es/ontologia/pradomuseum.owl#audioFile");

        if (propFileAudioguide != null && propFileAudioguide.FirstPropertyValue != null)
        {
            audioguiaUrl = propFileAudioguide.FirstPropertyValue.DownloadUrl;
        }
    }

    string htmlModule = semCmsModel.GetFirstValuePropertyByPath("http://museodelprado.es/ontologia/pradomuseum.owl#htmlModule@@@http://museodelprado.es/ontologia/pradomuseum.owl#html");
    string salaExposicion = semCmsModel.GetFirstValuePropertyByPath("http://museodelprado.es/ontologia/ecidoc.owl#p7_took_place_at_room");
    string edificioExposicion = semCmsModel.GetFirstValuePropertyByPath("http://museodelprado.es/ontologia/ecidoc.owl#p7_took_place_at_headquarters");

    SemanticPropertyModel videos = semCmsModel.GetPropertyByPath("http://museodelprado.es/ontologia/efrbrer.owl#has_video");
    SemanticPropertyModel interactivos = semCmsModel.GetPropertyByPath("http://museodelprado.es/ontologia/pradomuseum.owl#interactiveItem");
    SemanticPropertyModel virtualVisit = semCmsModel.GetPropertyByPath("http://museodelprado.es/ontologia/pradomuseum.owl#relatedVirtualVisit");

    bool mostrarInteractivosCarrusel = false;
    if (interactivos != null && interactivos.PropertyValues != null && interactivos.PropertyValues.Count > 0)
    {
        foreach (SemanticPropertyModel.PropertyValue interactivoItem in interactivos.PropertyValues)
        {
            SemanticPropertyModel interactivo = interactivoItem.RelatedEntity.GetPropertyByPath("http://museodelprado.es/ontologia/pradomuseum.owl#interactive");
            if (interactivo != null && interactivo.PropertyValues != null && interactivo.PropertyValues.Count > 0)
            {
                mostrarInteractivosCarrusel = true;
            }
        }
    }





    SemanticPropertyModel exposiciones = semCmsModel.GetPropertyByPath("http://museodelprado.es/ontologia/pradomuseum.owl#exhibitionPage");
    SemanticPropertyModel exposicionObras = semCmsModel.GetPropertyByPath("http://museodelprado.es/ontologia/pradomuseum.owl#activityArtWork");
    SemanticPropertyModel propCatalogo = semCmsModel.GetPropertyByPath("http://museodelprado.es/ontologia/ecidoc.owl#p70i_E31_is_documented_in_catalogue");
    //SemanticPropertyModel actividades = semCmsModel.GetPropertyByPath("http://museodelprado.es/ontologia/pradomuseum.owl#activity");
    List<RelatedActivity> actividades = Activity.GetActivities(semCmsModel, fichaRecurso, idiomaNav, Html);
    List<Resource> resources = Activity.GetResources(semCmsModel, fichaRecurso, idiomaNav, Html);
    List<object> exposicionObrasJsonLD = new List<object>();


    if (semCmsModel.AdminGenerationError != null)
    {
        <p>@semCmsModel.AdminGenerationError</p>
    }

    SemanticPropertyModel propProductosTienda = semCmsModel.GetPropertyByPath("http://museodelprado.es/ontologia/pradomuseum.owl#i_exhibition_product");


    // Funciones para la plantilla
    @functions
    {
        private static int[] ObtenerFechaNormalizada(string pFecha)
        {
            int[] fechaNormalizada = null;

            try
            {
                if (!string.IsNullOrEmpty(pFecha) && pFecha.Length >= 8)
                {
                    if (pFecha.Contains("/"))
                    {
                        fechaNormalizada = new int[3];
                        //dia
                        fechaNormalizada[0] = Int32.Parse(pFecha.Substring(0, 2));
                        //mes
                        fechaNormalizada[1] = Int32.Parse(pFecha.Substring(3, 2));
                        //anio
                        fechaNormalizada[2] = Int32.Parse(pFecha.Substring(6, 4));
                    }
                    else if (pFecha.Length == 14)
                    {
                        fechaNormalizada = new int[5];
                        //dia
                        fechaNormalizada[0] = Int32.Parse(pFecha.Substring(6, 2));
                        //mes
                        fechaNormalizada[1] = Int32.Parse(pFecha.Substring(4, 2));
                        //anio
                        fechaNormalizada[2] = Int32.Parse(pFecha.Substring(0, 4));
                        //hora
                        fechaNormalizada[3] = Int32.Parse(pFecha.Substring(8, 2));
                        //minutos
                        fechaNormalizada[4] = Int32.Parse(pFecha.Substring(10, 2));
                    }
                }
            }
            catch (FormatException e)
            {
                fechaNormalizada = null;
            }

            return (fechaNormalizada);
        }

        private static string ObtenerFechaFormateada(string pFecha, string pFormato, string pIdioma = null)
        {
            string fechaFormateada = string.Empty;
            int[] fechaNormalizada = ObtenerFechaNormalizada(pFecha);

            if (fechaNormalizada != null && fechaNormalizada.Count() == 3)
            {
                int dia = fechaNormalizada[0];
                int mes = fechaNormalizada[1];
                int anio = fechaNormalizada[2];

                if (anio != null && mes != null && dia != null)
                {
                    DateTime fecha = new DateTime(anio, mes, dia);

                    if (!string.IsNullOrEmpty(pIdioma))
                    {
                        System.Globalization.CultureInfo cu = new System.Globalization.CultureInfo(pIdioma);
                        fechaFormateada = fecha.ToString(pFormato, cu);
                    }
                    else
                    {
                        fechaFormateada = fecha.ToString(pFormato);
                    }
                }
            }
            else if (fechaNormalizada != null && fechaNormalizada.Count() == 5)
            {
                int dia = fechaNormalizada[0];
                int mes = fechaNormalizada[1];
                int anio = fechaNormalizada[2];
                int hora = fechaNormalizada[3];
                int minuto = fechaNormalizada[4];

                if (anio != null && mes != null && dia != null && hora != null && minuto != null)
                {
                    DateTime fecha = new DateTime(anio, mes, dia, hora, minuto, 0);

                    if (!string.IsNullOrEmpty(pIdioma))
                    {
                        System.Globalization.CultureInfo cu = new System.Globalization.CultureInfo(pIdioma);
                        fechaFormateada = fecha.ToString(pFormato, cu);
                    }
                    else
                    {
                        fechaFormateada = fecha.ToString(pFormato);
                    }
                }
            }

            if (string.IsNullOrEmpty(fechaFormateada))
            {
                fechaFormateada = pFecha;
            }

            return (fechaFormateada);
        }


        private static string ObtenerFechaCompletaFormateada(string pFecha)
        {
            string fechaFormateada = string.Empty;

            int[] fechaNormalizada = ObtenerFechaNormalizada(pFecha);

            if (fechaNormalizada != null && fechaNormalizada.Count() == 3)
            {
                int dia = fechaNormalizada[0];
                int mes = fechaNormalizada[1];
                int anio = fechaNormalizada[2];

                if (anio != null && mes != null && dia != null)
                {
                    System.Globalization.CultureInfo es = new System.Globalization.CultureInfo("es-ES");
                    DateTime fecha = new DateTime(anio, mes, dia);

                    string diaSemana = fecha.ToString("dddd", es);
                    string diaSemanaMayus = diaSemana.Substring(0, 1).ToUpper() + diaSemana.Substring(1).ToLower() + " ";

                    fechaFormateada = diaSemanaMayus + ", " + fecha.ToString("dd", es) + " " + fecha.ToString("MMMM", es);
                }
            }
            else if (fechaNormalizada != null && fechaNormalizada.Count() == 5)
            {
                int dia = fechaNormalizada[0];
                int mes = fechaNormalizada[1];
                int anio = fechaNormalizada[2];
                int hora = fechaNormalizada[3];
                int minuto = fechaNormalizada[4];

                if (anio != null && mes != null && dia != null && hora != null && minuto != null)
                {
                    System.Globalization.CultureInfo es = new System.Globalization.CultureInfo("es-ES");
                    DateTime fecha = new DateTime(anio, mes, dia, hora, minuto, 0);

                    string diaSemana = fecha.ToString("dddd", es);
                    string diaSemanaMayus = diaSemana.Substring(0, 1).ToUpper() + diaSemana.Substring(1).ToLower() + " ";

                    fechaFormateada = diaSemanaMayus + ", " + fecha.ToString("dd", es) + " " + fecha.ToString("MMMM", es);
                }
            }
            else
            {
                fechaFormateada = pFecha;
            }

            return (fechaFormateada);
        }


        private Dictionary<SemanticPropertyModel.PropertyValue, int> ObtenerDiccionarioPaginasOrden(SemanticPropertyModel propExposiciones)
        {
            Dictionary<SemanticPropertyModel.PropertyValue, int> dicPaginasOrden = new Dictionary<SemanticPropertyModel.PropertyValue, int>();

            foreach (SemanticPropertyModel.PropertyValue pagina in propExposiciones.PropertyValues)
            {
                int numOrdenPagina = 0;

                try
                {
                    string ordenPagina = pagina.RelatedEntity.GetFirstValuePropertyByPath("http://museodelprado.es/ontologia/pradomuseum.owl#pageOrder");

                    numOrdenPagina = Int32.Parse(ordenPagina);
                }
                catch (Exception e)
                {
                    numOrdenPagina = 0;
                }

                dicPaginasOrden.Add(pagina, numOrdenPagina);
            }

            return dicPaginasOrden;
        }



    }


    //CAT√ÅLOGO

    string tituloCatalogo = string.Empty;
    string titularTituloCatalogo = string.Empty;
    string descripcionCatalogo = string.Empty;
    string ilustracionCatalogo = string.Empty;
    string pieImagenCatalogo = string.Empty;
    string anioCatalogo = string.Empty;
    string titularAnioCatalogo = string.Empty;
    string autorCatalogo = string.Empty;
    string titularAutorCatalogo = string.Empty;
    string coordinacionCatalogo = string.Empty;
    string titularCoordinacionCatalogo = string.Empty;
    string cubiertaCatalogo = string.Empty;
    string titularCubiertaCatalogo = string.Empty;
    string depositoLegalCatalogo = string.Empty;
    string titularDepositoLegalCatalogo = string.Empty;
    string dimensionesCatalogo = string.Empty;
    string disenioCatalogo = string.Empty;
    string titularDisenioCatalogo = string.Empty;
    string editorCatalogo = string.Empty;
    string titularEditorCatalogo = string.Empty;
    string edicionCatalogo = string.Empty;
    string titularEdicionCatalogo = string.Empty;
    string encuadernacionCatalogo = string.Empty;
    string titularEncuadernacionCatalogo = string.Empty;
    string fechaCatalogo = string.Empty;
    string titularFechaCatalogo = string.Empty;
    string fotomecanicaCatalogo = string.Empty;
    string titularFotomecanicaCatalogo = string.Empty;
    string idiomaCatalogo = string.Empty;
    string titularIdiomaCatalogo = string.Empty;
    string impresionCatalogo = string.Empty;
    string titularImpresionCatalogo = string.Empty;
    string indiceCatalogo = string.Empty;
    string titularIndiceCatalogo = string.Empty;
    SemanticPropertyModel propIsbnCatalogo = null;
    string titularIsbnCatalogo = string.Empty;
    string nipoCatalogo = string.Empty;
    string titularNipoCatalogo = string.Empty;
    string paginasCatalogo = string.Empty;
    string pesoCatalogo = string.Empty;
    string titularPesoCatalogo = string.Empty;
    string produccionCatalogo = string.Empty;
    string titularProduccionCatalogo = string.Empty;
    string recopilatorioCatalogo = string.Empty;
    string titularRecopilatorioCatalogo = string.Empty;
    string traduccionCatalogo = string.Empty;
    string titularTraduccionCatalogo = string.Empty;
    string comprarCatalogo = string.Empty;
    string precioCatalogo = string.Empty;
    string descargarCatalogo = string.Empty;
    string titularDescargarCatalogo = string.Empty;



    // Obtenci√≥n de propiedades del CAT√ÅLOGO

    SemanticPropertyModel propIlustraciones = null;

    if (propCatalogo != null && propCatalogo.PropertyValues != null && propCatalogo.PropertyValues.Count > 0)
    {

        // T√≠tulo Cat√°logo
        tituloCatalogo = propCatalogo.FirstPropertyValue.RelatedEntity.GetFirstValuePropertyByPath("http://purl.org/vocab/frbr/core#P3020_has_title_of_the_manifestation");

        if (!string.IsNullOrEmpty(tituloCatalogo))
        {
            SemanticPropertyModel propTituloCatalogo = propCatalogo.FirstPropertyValue.RelatedEntity.GetPropertyByPath("http://purl.org/vocab/frbr/core#P3020_has_title_of_the_manifestation");

            if (propTituloCatalogo != null && propTituloCatalogo.PropertyValues.Count > 0)
            {
                titularTituloCatalogo = propTituloCatalogo.OntologyPropInfo.LabelTitle;
            }
        }

        // Descripci√≥n Cat√°logo
        descripcionCatalogo = propCatalogo.FirstPropertyValue.RelatedEntity.GetFirstValuePropertyByPath("http://museodelprado.es/ontologia/efrbrer.owl#has_description");


        // Ilustraciones Cat√°logo
        propIlustraciones = propCatalogo.FirstPropertyValue.RelatedEntity.GetPropertyByPath("http://museodelprado.es/ontologia/efrbrer.owl#has_image");
        ilustracionCatalogo = string.Empty;

        if (propIlustraciones != null && propIlustraciones.FirstPropertyValue != null)
        {
            ilustracionCatalogo = ViewBag.BaseURLContent + "/" + propIlustraciones.FirstPropertyValue.Value;
        }


        comprarCatalogo = propCatalogo.FirstPropertyValue.RelatedEntity.GetFirstValuePropertyByPath("http://museodelprado.es/ontologia/efrbrer.owl#has_buy_link");
        //precioCatalogo = propCatalogo.FirstPropertyValue.RelatedEntity.GetFirstValuePropertyByPath("http://purl.org/goodrelations/v1#hasPriceSpecification");
        paginasCatalogo = propCatalogo.FirstPropertyValue.RelatedEntity.GetFirstValuePropertyByPath("http://purl.org/vocab/frbr/core#P3024_has_extent_of_the_carrier");


        /* T√≠tulo Dimensiones
        SemanticPropertyModel propDimensiones = propCatalogo.FirstPropertyValue.RelatedEntity.GetPropertyByPath("http://purl.org/vocab/frbr/core#P3027_has_dimensions_of_the_carrier");
        dimensionesCatalogo = string.Empty;

        if (propDimensiones != null && propDimensiones.FirstPropertyValue != null)
        {
            dimensionesCatalogo = propDimensiones.FirstPropertyValue.Value;
        }*/

        // Dimensiones
        dimensionesCatalogo = propCatalogo.FirstPropertyValue.RelatedEntity.GetFirstValuePropertyByPath("http://purl.org/vocab/frbr/core#P3027_has_dimensions_of_the_carrier");


        // Encuadernaci√≥n Cat√°logo
        encuadernacionCatalogo = propCatalogo.FirstPropertyValue.RelatedEntity.GetFirstValuePropertyByPath("http://museodelprado.es/ontologia/efrbrer.owl#has_binding");

        if (!string.IsNullOrEmpty(encuadernacionCatalogo))
        {
            SemanticPropertyModel propEncuadernacionCatalogo = propCatalogo.FirstPropertyValue.RelatedEntity.GetPropertyByPath("http://museodelprado.es/ontologia/efrbrer.owl#has_binding");

            if (propEncuadernacionCatalogo != null && propEncuadernacionCatalogo.FirstPropertyValue != null)
            {
                titularEncuadernacionCatalogo = propEncuadernacionCatalogo.OntologyPropInfo.LabelTitle;
            }

        }

        // Idioma Cat√°logo
        idiomaCatalogo = propCatalogo.FirstPropertyValue.RelatedEntity.GetFirstValuePropertyByPath("http://purl.org/vocab/frbr/core#P3011_has_language_of_expression");

        if (!string.IsNullOrEmpty(idiomaCatalogo))
        {
            SemanticPropertyModel propIdiomaCatalogo = propCatalogo.FirstPropertyValue.RelatedEntity.GetPropertyByPath("http://purl.org/vocab/frbr/core#P3011_has_language_of_expression");


            if (propIdiomaCatalogo != null && propIdiomaCatalogo.PropertyValues != null && propIdiomaCatalogo.PropertyValues.Count > 0)
            {
                titularIdiomaCatalogo = propIdiomaCatalogo.OntologyPropInfo.LabelTitle;
            }

        }

        // ISBN Cat√°logo

        propIsbnCatalogo = propCatalogo.FirstPropertyValue.RelatedEntity.GetPropertyByPath("http://purl.org/vocab/frbr/core#P3028_has_manifestation_identifier");

        if (propIsbnCatalogo != null && propIsbnCatalogo.PropertyValues != null && propIsbnCatalogo.PropertyValues.Count > 0)
        {
            titularIsbnCatalogo = propIsbnCatalogo.OntologyPropInfo.LabelTitle;
        }


        // Anio Cat√°logo
        anioCatalogo = propCatalogo.FirstPropertyValue.RelatedEntity.GetFirstValuePropertyByPath("http://museodelprado.es/ontologia/efrbrer.owl#P3055_has_date_of_publication_or_distribution_year");

        if (!string.IsNullOrEmpty(anioCatalogo))
        {
            SemanticPropertyModel propAnioCatalogo = propCatalogo.FirstPropertyValue.RelatedEntity.GetPropertyByPath("http://museodelprado.es/ontologia/efrbrer.owl#P3055_has_date_of_publication_or_distribution_year");

            if (propAnioCatalogo != null && propAnioCatalogo.FirstPropertyValue != null)
            {
                titularAnioCatalogo = propAnioCatalogo.OntologyPropInfo.LabelTitle;
            }
        }


        // Autor Cat√°logo
        autorCatalogo = propCatalogo.FirstPropertyValue.RelatedEntity.GetFirstValuePropertyByPath("http://purl.org/vocab/frbr/core#P2007_is_created_by");

        if (!string.IsNullOrEmpty(autorCatalogo))
        {
            SemanticPropertyModel propAutorCatalogo = propCatalogo.FirstPropertyValue.RelatedEntity.GetPropertyByPath("http://purl.org/vocab/frbr/core#P2007_is_created_by");

            if (propAutorCatalogo != null && propAutorCatalogo.FirstPropertyValue != null)
            {
                titularAutorCatalogo = propAutorCatalogo.OntologyPropInfo.LabelTitle;
            }
        }


        // Coordinaci√≥n Cat√°logo
        coordinacionCatalogo = propCatalogo.FirstPropertyValue.RelatedEntity.GetFirstValuePropertyByPath("http://museodelprado.es/ontologia/efrbrer.owl#has_coordinator");

        if (!string.IsNullOrEmpty(coordinacionCatalogo))
        {
            SemanticPropertyModel propCoordinacionCatalogo = propCatalogo.FirstPropertyValue.RelatedEntity.GetPropertyByPath("http://museodelprado.es/ontologia/efrbrer.owl#has_coordinator");
            if (propCoordinacionCatalogo != null && propCoordinacionCatalogo.FirstPropertyValue != null)
            {
                titularCoordinacionCatalogo = propCoordinacionCatalogo.OntologyPropInfo.LabelTitle;
            }
        }


        // Cubierta Cat√°logo
        cubiertaCatalogo = propCatalogo.FirstPropertyValue.RelatedEntity.GetFirstValuePropertyByPath("http://museodelprado.es/ontologia/efrbrer.owl#has_cover");

        if (!string.IsNullOrEmpty(cubiertaCatalogo))
        {
            SemanticPropertyModel propCubiertaCatalogo = propCatalogo.FirstPropertyValue.RelatedEntity.GetPropertyByPath("http://museodelprado.es/ontologia/efrbrer.owl#has_cover");

            if (propCubiertaCatalogo != null && propCubiertaCatalogo.FirstPropertyValue != null)
            {
                titularCubiertaCatalogo = propCubiertaCatalogo.OntologyPropInfo.LabelTitle;
            }
        }



        // Deposito Legal Cat√°logo
        depositoLegalCatalogo = propCatalogo.FirstPropertyValue.RelatedEntity.GetFirstValuePropertyByPath("http://museodelprado.es/ontologia/efrbrer.owl#P3028_has_manifestation_identifier_legal_deposit");

        if (!string.IsNullOrEmpty(depositoLegalCatalogo))
        {
            SemanticPropertyModel propDepositoLegalCatalogo = propCatalogo.FirstPropertyValue.RelatedEntity.GetPropertyByPath("http://museodelprado.es/ontologia/efrbrer.owl#P3028_has_manifestation_identifier_legal_deposit");

            if (propDepositoLegalCatalogo != null && propDepositoLegalCatalogo.FirstPropertyValue != null)
            {
                titularDepositoLegalCatalogo = propDepositoLegalCatalogo.OntologyPropInfo.LabelTitle;
            }
        }


        // Descargar Cat√°logo
        descargarCatalogo = propCatalogo.FirstPropertyValue.RelatedEntity.GetFirstValuePropertyByPath("http://museodelprado.es/ontologia/efrbrer.owl#has_download_link");

        if (!string.IsNullOrEmpty(descargarCatalogo))
        {
            SemanticPropertyModel propDescargarCatalogo = propCatalogo.FirstPropertyValue.RelatedEntity.GetPropertyByPath("http://museodelprado.es/ontologia/efrbrer.owl#has_download_link");

            if (propDescargarCatalogo != null && propDescargarCatalogo.FirstPropertyValue != null)
            {
                titularDescargarCatalogo = propDescargarCatalogo.OntologyPropInfo.LabelTitle;
            }
        }


        // Disenio Cat√°logo
        disenioCatalogo = propCatalogo.FirstPropertyValue.RelatedEntity.GetFirstValuePropertyByPath("http://museodelprado.es/ontologia/efrbrer.owl#has_design");

        if (!string.IsNullOrEmpty(disenioCatalogo))
        {
            SemanticPropertyModel propDisenioCatalogo = propCatalogo.FirstPropertyValue.RelatedEntity.GetPropertyByPath("http://museodelprado.es/ontologia/efrbrer.owl#has_design");

            if (propDisenioCatalogo != null && propDisenioCatalogo.FirstPropertyValue != null)
            {
                titularDisenioCatalogo = propDisenioCatalogo.OntologyPropInfo.LabelTitle;
            }
        }


        // Editor Cat√°logo
        editorCatalogo = propCatalogo.FirstPropertyValue.RelatedEntity.GetFirstValuePropertyByPath("http://purl.org/vocab/frbr/core#P2015_is_produced_by_corporate_body");

        if (!string.IsNullOrEmpty(editorCatalogo))
        {
            SemanticPropertyModel propEditorCatalogo = propCatalogo.FirstPropertyValue.RelatedEntity.GetPropertyByPath("http://purl.org/vocab/frbr/core#P2015_is_produced_by_corporate_body");

            if (propEditorCatalogo != null && propEditorCatalogo.FirstPropertyValue != null)
            {
                titularEditorCatalogo = propEditorCatalogo.OntologyPropInfo.LabelTitle;
            }
        }


        // Edici√≥n Cat√°logo
        edicionCatalogo = propCatalogo.FirstPropertyValue.RelatedEntity.GetFirstValuePropertyByPath("http://museodelprado.es/ontologia/efrbrer.owl#has_edition");

        if (!string.IsNullOrEmpty(edicionCatalogo))
        {
            SemanticPropertyModel propEdicionCatalogo = propCatalogo.FirstPropertyValue.RelatedEntity.GetPropertyByPath("http://museodelprado.es/ontologia/efrbrer.owl#has_edition");

            if (propEdicionCatalogo != null && propEdicionCatalogo.FirstPropertyValue != null)
            {
                titularEdicionCatalogo = propEdicionCatalogo.OntologyPropInfo.LabelTitle;
            }
        }


        // Fecha Cat√°logo
        fechaCatalogo = propCatalogo.FirstPropertyValue.RelatedEntity.GetFirstValuePropertyByPath("http://purl.org/vocab/frbr/core#P3055_has_date_of_publication_or_distribution");

        if (!string.IsNullOrEmpty(fechaCatalogo))
        {
            SemanticPropertyModel propFechaCatalogo = propCatalogo.FirstPropertyValue.RelatedEntity.GetPropertyByPath("http://purl.org/vocab/frbr/core#P3055_has_date_of_publication_or_distribution");

            if (propFechaCatalogo != null && propFechaCatalogo.FirstPropertyValue != null)
            {
                titularFechaCatalogo = propFechaCatalogo.OntologyPropInfo.LabelTitle;
            }
        }



        // Fotomecanica Cat√°logo
        fotomecanicaCatalogo = propCatalogo.FirstPropertyValue.RelatedEntity.GetFirstValuePropertyByPath("http://museodelprado.es/ontologia/pradomuseum.owl#photomechanical");

        if (!string.IsNullOrEmpty(fotomecanicaCatalogo))
        {
            SemanticPropertyModel propFotomecanicaCatalogo = propCatalogo.FirstPropertyValue.RelatedEntity.GetPropertyByPath("http://museodelprado.es/ontologia/pradomuseum.owl#photomechanical");

            if (propFotomecanicaCatalogo != null && propFotomecanicaCatalogo.FirstPropertyValue != null)
            {
                titularFotomecanicaCatalogo = propFotomecanicaCatalogo.OntologyPropInfo.LabelTitle;
            }
        }



        // Impresi√≥n Cat√°logo
        impresionCatalogo = propCatalogo.FirstPropertyValue.RelatedEntity.GetFirstValuePropertyByPath("http://museodelprado.es/ontologia/efrbrer.owl#has_print");

        if (!string.IsNullOrEmpty(impresionCatalogo))
        {
            SemanticPropertyModel propImpresionCatalogo = propCatalogo.FirstPropertyValue.RelatedEntity.GetPropertyByPath("http://museodelprado.es/ontologia/efrbrer.owl#has_print");

            if (propImpresionCatalogo != null && propImpresionCatalogo.FirstPropertyValue != null)
            {
                titularImpresionCatalogo = propImpresionCatalogo.OntologyPropInfo.LabelTitle;
            }
        }



        // √çndice Cat√°logo
        indiceCatalogo = propCatalogo.FirstPropertyValue.RelatedEntity.GetFirstValuePropertyByPath("http://museodelprado.es/ontologia/efrbrer.owl#has_index");

        if (!string.IsNullOrEmpty(indiceCatalogo))
        {
            SemanticPropertyModel propIndiceCatalogo = propCatalogo.FirstPropertyValue.RelatedEntity.GetPropertyByPath("http://museodelprado.es/ontologia/efrbrer.owl#has_index");

            if (propIndiceCatalogo != null && propIndiceCatalogo.FirstPropertyValue != null)
            {
                titularIndiceCatalogo = propIndiceCatalogo.OntologyPropInfo.LabelTitle;
            }
        }



        // NIPO Cat√°logo
        nipoCatalogo = propCatalogo.FirstPropertyValue.RelatedEntity.GetFirstValuePropertyByPath("http://museodelprado.es/ontologia/efrbrer.owl#P3028_has_manifestation_identifier_nipo");

        if (!string.IsNullOrEmpty(nipoCatalogo))
        {
            SemanticPropertyModel propNipoCatalogo = propCatalogo.FirstPropertyValue.RelatedEntity.GetPropertyByPath("http://museodelprado.es/ontologia/efrbrer.owl#P3028_has_manifestation_identifier_nipo");

            if (propNipoCatalogo != null && propNipoCatalogo.FirstPropertyValue != null)
            {
                titularNipoCatalogo = propNipoCatalogo.OntologyPropInfo.LabelTitle;
            }
        }



        // Peso Cat√°logo
        pesoCatalogo = propCatalogo.FirstPropertyValue.RelatedEntity.GetFirstValuePropertyByPath("http://museodelprado.es/ontologia/efrbrer.owl#P3024_has_extent_of_the_carrier_weight");

        if (!string.IsNullOrEmpty(pesoCatalogo))
        {
            SemanticPropertyModel propPesoCatalogo = propCatalogo.FirstPropertyValue.RelatedEntity.GetPropertyByPath("http://museodelprado.es/ontologia/efrbrer.owl#P3024_has_extent_of_the_carrier_weight");

            if (propPesoCatalogo != null && propPesoCatalogo.FirstPropertyValue != null)
            {
                titularPesoCatalogo = propPesoCatalogo.OntologyPropInfo.LabelTitle;
            }
        }


        // Producci√≥n Cat√°logo
        produccionCatalogo = propCatalogo.FirstPropertyValue.RelatedEntity.GetFirstValuePropertyByPath("http://purl.org/vocab/frbr/core#P3054_has_fabricator_or_manufacturer");

        if (!string.IsNullOrEmpty(produccionCatalogo))
        {
            SemanticPropertyModel propProduccionCatalogo = propCatalogo.FirstPropertyValue.RelatedEntity.GetPropertyByPath("http://purl.org/vocab/frbr/core#P3054_has_fabricator_or_manufacturer");

            if (propProduccionCatalogo != null && propProduccionCatalogo.FirstPropertyValue != null)
            {
                titularProduccionCatalogo = propProduccionCatalogo.OntologyPropInfo.LabelTitle;
            }
        }


        // Recopilatorio Cat√°logo
        recopilatorioCatalogo = propCatalogo.FirstPropertyValue.RelatedEntity.GetFirstValuePropertyByPath("http://museodelprado.es/ontologia/efrbrer.owl#has_compilation");

        if (!string.IsNullOrEmpty(recopilatorioCatalogo))
        {
            SemanticPropertyModel propRecopilatorioCatalogo = propCatalogo.FirstPropertyValue.RelatedEntity.GetPropertyByPath("http://museodelprado.es/ontologia/efrbrer.owl#has_compilation");

            if (propRecopilatorioCatalogo != null && propRecopilatorioCatalogo.FirstPropertyValue != null)
            {
                titularRecopilatorioCatalogo = propRecopilatorioCatalogo.OntologyPropInfo.LabelTitle;
            }
        }


        // Traducci√≥n Cat√°logo
        traduccionCatalogo = propCatalogo.FirstPropertyValue.RelatedEntity.GetFirstValuePropertyByPath("http://museodelprado.es/ontologia/efrbrer.owl#has_translator");

        if (!string.IsNullOrEmpty(traduccionCatalogo))
        {
            SemanticPropertyModel propTraduccionCatalogo = propCatalogo.FirstPropertyValue.RelatedEntity.GetPropertyByPath("http://museodelprado.es/ontologia/efrbrer.owl#has_translator");

            if (propTraduccionCatalogo != null && propTraduccionCatalogo.FirstPropertyValue != null)
            {
                titularTraduccionCatalogo = propTraduccionCatalogo.OntologyPropInfo.LabelTitle;
            }
        }
    }


}

<section @Html.Raw(semCmsModel.GetRDFANamespaces()) @Html.Raw(semCmsModel.GetRDFAEntity(semCmsModel.RootEntities[0]))>
    @{

        List<E38_Image> listaimagenes = new List<E38_Image>();
        SemanticPropertyModel propPradoMuseum_top_images = semCmsModel.GetPropertyByPath("http://museodelprado.es/ontologia/pradomuseum.owl#top_images");
        if (propPradoMuseum_top_images != null && propPradoMuseum_top_images.PropertyValues.Count > 0)
        {
            foreach (SemanticPropertyModel.PropertyValue propValue in propPradoMuseum_top_images.PropertyValues)
            {
                E38_Image pradoMuseum_top_images = new E38_Image(propValue.RelatedEntity, idiomaNav);
                listaimagenes.Add(pradoMuseum_top_images);
            }
        }
        listaimagenes = listaimagenes.OrderBy(x => x.Pm_order).ToList();

        bool bicentenario = semCmsModel.GetFirstValuePropertyByPath("http://museodelprado.es/ontologia/pradomuseum.owl#bicentenario") == Html.GetText("COMMON", "SI");

        if (listaimagenes != null && listaimagenes.Count() > 0)
        {
            <section class="ficha-expo-carrusel" id="ficha-expo-carrusel">
                <div class="loop carousel full-width inactive">
                    @foreach (E38_Image imagen in listaimagenes)
                    {
                        if (!string.IsNullOrEmpty(imagen.Ecidoc_p65_E36_shows_visual_item))
                        {
                            <div class="slide">
                                <figure>
                                    @if (!string.IsNullOrEmpty(imagen.Pm_caption))
                                    {
                                        <div class="imageDesc">@Html.Raw(imagen.Pm_caption)</div>
                                    }
                                    @if (bicentenario)
                                    {
                                        <img src="@ViewBag.BaseURLContent/imagenes/proyectos/personalizacion/7317a29a-d846-4c54-9034-6a114c3658fe/ElPrado/img/svg/bicentenario_logo_cuadrado.svg" width="150" height="150" alt="Museo del Prado 200 a√±os" class="logo-200" onclick="location.href='@Html.Translate("URL_BICENTENARIO")'; return false;">
                                    }
                                    <img alt="@titulo" src="@ViewBag.BaseURLContent/@imagen.Ecidoc_p65_E36_shows_visual_item">
                                </figure>
                            </div>
                        }
                    }
                </div>
            </section>
        }

    }
    <section class="menu-nav">
        <nav>
            <div>
                <ul class="menu-normal">
                    <li class="menu-ficha-expo"><a>@Html.Translate("INICIO")</a></li>
                    @if ((videos != null && videos.PropertyValues != null && videos.PropertyValues.Count > 0) || mostrarInteractivosCarrusel)
                    {
                        <li class="menu-videos"><a>@Html.Translate("MULTIMEDIA")</a></li>
                    }
                    @if (exposiciones != null && exposiciones.PropertyValues.Count > 0 && !ocultarPaginas)
                    {
                        <li class="menu-exposicion"><a>@(!string.IsNullOrEmpty(esEnElMuseo) && esEnElMuseo.Equals("http://museodelprado.es/items/place_at_museum_itinerary") || esEnElMuseo.Equals("activitytype_44") ? @Html.Translate("ITINERARIO_EXPOSITIVO") : @Html.Translate("EXPOSICION"))</a></li>
                    }
                    @if (exposicionObras != null && exposicionObras.PropertyValues.Count() > 0 && !ocultarObras)
                    {
                        <li class="menu-obras-ficha-expo"><a>@Html.Translate("OBRAS")</a></li>
                    }
                    @if (propCatalogo != null && propCatalogo.PropertyValues.Count > 0)
                    {
                        <li class="menu-catalogo"><a>@Html.Translate("CATALOGO")</a></li>
                    }
                    @if (actividades != null && actividades.Count > 0)
                    {
                        <li class="menu-actividades"><a>@Html.Translate("ACTIVIDADES")</a></li>
                    }
                    @if (resources != null && resources.Count > 0)
                    {
                        <li class="menu-recursos"><a>@Html.Translate("RECURSOSPARALAVISITA")</a></li>
                    }
                    @if (propProductosTienda != null && propProductosTienda.PropertyValues != null && propProductosTienda.PropertyValues.Count > 0)
                    {
                        <li class="menu-tienda-prado"><a>@Html.Translate("TIENDAPRADO")</a></li>
                    }
                </ul>
                <div class="menu-small form-group">
                    <select class="select-custom form-control" title="Menu de Inicio">
                        <option value="menu-ficha-expo-carrusel">@Html.Translate("INICIO")</option>
                        @if ((videos != null && videos.PropertyValues != null && videos.PropertyValues.Count > 0) || mostrarInteractivosCarrusel)
                        {
                            <option value="menu-videos">@Html.Translate("MULTIMEDIA")</option>
                        }
                        @if (exposiciones != null && exposiciones.PropertyValues != null && exposiciones.PropertyValues.Count > 0 && !ocultarPaginas)
                        {
                            <option value="menu-exposicion">@(!string.IsNullOrEmpty(esEnElMuseo) && esEnElMuseo.Equals("http://museodelprado.es/items/place_at_museum_itinerary") || esEnElMuseo.Equals("activitytype_44") ? @Html.Translate("ITINERARIO_EXPOSITIVO") : @Html.Translate("EXPOSICION"))</option>
                        }
                        @if (exposicionObras != null && exposicionObras.PropertyValues.Count() > 0 && !ocultarObras)
                        {
                            <option value="menu-obras-ficha-expo">@Html.Translate("OBRAS")</option>
                        }
                        @if (propCatalogo != null && propCatalogo.PropertyValues != null && propCatalogo.PropertyValues.Count > 0)
                        {
                            <option value="menu-catalogo">@Html.Translate("CATALOGO")</option>
                        }
                        @if (actividades != null && actividades.Count > 0)
                        {
                            <option value="menu-actividades">@Html.Translate("ACTIVIDADES")</option>
                        }
                        @if (resources != null && resources.Count > 0)
                        {
                            <option value="menu-recursos">@Html.Translate("RECURSOSPARALAVISITA")</option>
                        }
                        @if (propProductosTienda != null && propProductosTienda.PropertyValues != null && propProductosTienda.PropertyValues.Count > 0)
                        {
                            <option value="menu-tienda-prado">@Html.Translate("TIENDAPRADO")</option>
                        }
                    </select>
                </div>
            </div>
        </nav>
    </section>
    @*<section @Html.Raw(semCmsModel.GetRDFANamespaces()) @Html.Raw(semCmsModel.GetRDFAEntity(semCmsModel.RootEntities[0]))>*@
    <section class="ficha-expo" id="ficha-expo">
        <div class="venta">
            @if (ventaDesactivada)
            {
                <div class="venta-entradas" style="cursor: default; pointer-events: none; background-color: #d38e8a; box-shadow: 2px 2px 5px 0px #1c1c1c2b;">
                    <a href="#">@Html.Translate("VENTADEENTRADAS")</a>
                </div>
            }
            else if (!string.IsNullOrEmpty(tipoExposicion) && tipoExposicion.ToLowerInvariant() == "temporal")
            {
                <div class="venta-entradas">
                    <a href="@Html.Translate("URL_COMPRAENTRADAS_TEMPORALES")" target="_blank">@Html.Translate("VENTADEENTRADAS")</a>
                </div>
            }
            else if (esEnElMuseo == "http://museodelprado.es/items/place_at_museum_in" || esEnElMuseo == "http://museodelprado.es/items/place_at_museum_itinerary")
            {
                <div class="venta-entradas">
                    <a href="@Html.Translate("URL_COMPRAENTRADAS")" target="_blank">@Html.Translate("VENTADEENTRADAS")</a>
                </div>
            }
            else
            {
                <div class="venta-entradas" style="cursor: default; pointer-events: none; background-color: #d38e8a; box-shadow: 2px 2px 5px 0px #1c1c1c2b;">
                    <a href="#">@Html.Translate("VENTADEENTRADAS")</a>
                </div>
            }
            @if (virtualVisit != null && virtualVisit.PropertyValues != null && virtualVisit.PropertyValues.Count > 0)
            {
                foreach (SemanticPropertyModel.PropertyValue virtualVisitItem in virtualVisit.PropertyValues)
                {
                    string imageMini = virtualVisitItem.RelatedEntity.GetFirstValuePropertyByPath("http://museodelprado.es/ontologia/pradomuseum.owl#imageMiniExhibition");
                    string urlVisitaVirtual = string.Empty;
                    SemanticPropertyModel propTituloInteractivo = virtualVisitItem.RelatedEntity.GetPropertyByPath("http://purl.org/vocab/frbr/core#p3020_has_title_of_the_manifestation");
                    if (propTituloInteractivo != null && propTituloInteractivo.PropertyValues.Count > 0)
                    {
                        urlVisitaVirtual = propTituloInteractivo.FirstPropertyValue.DownloadUrl;
                    }
                    <a href="@urlVisitaVirtual" class="vr" style="background:url('@ViewBag.BaseURLContent/@imageMini'); width: 100%;
				    display: block;
				    text-align: center;
				    color: #fff;
				    padding: 65px 0;
				    background-size: cover;
				    margin-bottom: 20px;
				    font-family: 'Gotham SSm A', 'Gotham SSm B';
						font-size: 14px;
						font-weight: 500;">
                        <span>@Html.Translate("VISITAVIRTUAL").ToUpperInvariant()</span>
                    </a>
                }
            }

            @if (!string.IsNullOrEmpty(ilustracionCatalogo) || !string.IsNullOrEmpty(tituloCatalogo)) //|| !string.IsNullOrEmpty(precioCatalogo))
            {
                <div class="venta-item">
                    <figure class="">
                        @if (!string.IsNullOrEmpty(comprarCatalogo))
                        {
                            <a href="@comprarCatalogo" target="_blank">
                                <img alt="@tituloCatalogo" src="@ilustracionCatalogo" class="" />
                            </a>
                        }
                        else
                        {
                            <img alt="@tituloCatalogo" src="@ilustracionCatalogo" class="" />
                        }
                        <figcaption>
                            @{
                                <strong>@Html.Translate("CATALOGO")</strong>

                                if (!string.IsNullOrEmpty(tituloCatalogo))
                                {
                                    if (!string.IsNullOrEmpty(comprarCatalogo))
                                    {
                                        <p><a href="@comprarCatalogo" target="_blank">@Html.Raw(tituloCatalogo)</a></p>
                                    }
                                    else
                                    {
                                        <p>@Html.Raw(tituloCatalogo)</p>
                                    }
                                }

                                @*if (!string.IsNullOrEmpty(precioCatalogo))
                                    {
                                         <p>@precioCatalogo</p>
                                    }*@
                            }
                        </figcaption>
                    </figure>
                </div>
            }
            @{
                if (!string.IsNullOrEmpty(comprarCatalogo))
                {
                    <div class="comprar-entradas">
                        <a href="@comprarCatalogo" target="_blank">@Html.Translate("COMPRARCATALOGO")</a>
                    </div>
                }
            }
        </div>
        <div class="fe-expo">
            <article>
                @if (!string.IsNullOrEmpty(antetitulo))
                {
                    <strong class="rastro">@antetitulo</strong>
                }
                else
                {
                    <strong class="rastro">@Html.Translate("EXPOSICION")</strong>
                }
                <h1 @Html.Raw(semCmsModel.GetRDFAPropertyByPath("http://www.cidoc-crm.org/cidoc-crm#p3_has_note"))>@titulo</h1>
                <p class="subtitulo">
                    @{
                        if (!string.IsNullOrEmpty(ciudad) || !string.IsNullOrEmpty(sede))
                        {
                            while ((!string.IsNullOrEmpty(sede)) && (sede.EndsWith(",") || sede.EndsWith(".")))
                            {
                                sede = sede.Substring(0, sede.Length - 1);
                            }
                            while ((!string.IsNullOrEmpty(ciudad)) && (ciudad.EndsWith(",") || ciudad.EndsWith(".")))
                            {
                                ciudad = ciudad.Substring(0, ciudad.Length - 1);
                            }

                            <span class="lugar">
                                @if (!string.IsNullOrEmpty(sede))
                                {
                                    if (!string.IsNullOrEmpty(ciudad))
                                    {
                                        sede += ".";
                                    }
                                    <span @Html.Raw(semCmsModel.GetRDFAPropertyByPath("http://www.cidoc-crm.org/cidoc-crm#p7_took_place_at"))>@Html.Raw(sede)</span>
                                }
                                @if (!string.IsNullOrEmpty(ciudad))
                                {
                                    <span @Html.Raw(semCmsModel.GetRDFAPropertyByPath("http://museodelprado.es/ontologia/ecidoc.owl#p7_took_place_at_city"))>@ciudad</span>
                                }
                            </span>
                        }

                        if (!string.IsNullOrEmpty(fechas))
                        {
                            @Html.Raw(fechas)
                        }
                    }
                </p>
                @{
                    DateTime? fechaInicioDate = Html.GetDate(fechaInicio);
                    DateTime? fechaFinDate = Html.GetDate(fechaFin);



                    //Si tiene fecha de inicio y de fin y la de fin es posterior a hoy lo mostramos
                    if (fechaInicioDate.HasValue && fechaFinDate.HasValue && fechaFinDate > DateTime.Now)
                    {
                        DateTime inicio = fechaInicioDate.Value;
                        DateTime fin = fechaFinDate.Value;

                        string fechaInicioString = "";
                        string fechaFinString = "";

                        //Si a√∫n no ha empezado, el inicio es el d√≠a de inicio a las 10 y el fin el dia de inicio a las 11
                        if (inicio > DateTime.Now)
                        {
                            inicio = new DateTime(inicio.Year, inicio.Month, inicio.Day, 10, 0, 0).ToUniversalTime();
                            fin = new DateTime(inicio.Year, inicio.Month, inicio.Day, 11, 0, 0).ToUniversalTime();
                        }
                        else
                        {
                            //Est√° empezada
                            inicio = new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day, 10, 0, 0).AddDays(1).ToUniversalTime();
                            fin = new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day, 11, 0, 0).AddDays(1).ToUniversalTime();
                        }

                        fechaInicioString = inicio.ToString("R");
                        fechaFinString = fin.ToString("R");




                        <div class="popmenu">
                            <span class="ly-calendario" lugar="@ciudad @sede" fechainicio="@fechaInicioString" fechafin="@fechaFinString">
                                <a>@Html.Translate("CALENDARIO")</a>
                                <span class="label">@Html.Translate("ANADIRALCALENDARIO")</span>
                            </span>
                            <ul>
                                <li><a class="googleCal" href="#">Google Calendar</a></li>
                                <li><a class="iCal" href="#">iCal</a></li>
                                <li><a class="outlookCal" href="#">Outlook</a></li>
                            </ul>
                        </div>
                    }
                }
                @if (!string.IsNullOrEmpty(descripcion))
                {
                    <div @Html.Raw(semCmsModel.GetRDFAPropertyByPath("http://www.cidoc-crm.org/cidoc-crm#p3_has_note"))>
                        <div class="colapsado normal">@Html.Raw(descripcion)</div>
                    </div>
                }
                @{
                    if (!string.IsNullOrEmpty(titularComisario) && !string.IsNullOrEmpty(comisario))
                    {
                        <dl class="comisario">
                            <dt>@titularComisario:</dt>
                            <dd @Html.Raw(semCmsModel.GetRDFAPropertyByPath("http://museodelprado.es/ontologia/ecidoc.owl#p14_carried_out_by_curator"))>@Html.Raw(Html.DeleteFirstParagraph(comisario))</dd>
                        </dl>
                    }
                }
            </article>
        </div>
        <div class="auxiliar">
            @{
                if (!string.IsNullOrEmpty(audioguiaUrl))
                {
                    <div class="descargar-audioguia" @Html.Raw(semCmsModel.GetRDFAProperty(propAudioguia))>
                        <span @Html.Raw(semCmsModel.GetRDFAEntity(propAudioguia.FirstPropertyValue.RelatedEntity))>
                            <a href="@audioguiaUrl" @Html.Raw(semCmsModel.GetRDFAProperty(propAudioguia.FirstPropertyValue.RelatedEntity.GetPropertyByPath("http://museodelprado.es/ontologia/pradomuseum.owl#audioFile")))>@Html.Translate("DESCARGALAAUDIOGUIA")</a>
                        </span>
                    </div>
                }
            }
            @{
                if (!string.IsNullOrEmpty(htmlModule))
                {
                    <div class="concurso" @Html.Raw(semCmsModel.GetRDFAProperty(semCmsModel.GetPropertyByPath("http://museodelprado.es/ontologia/pradomuseum.owl#htmlModule")))>
                        <span @Html.Raw(semCmsModel.GetRDFAEntity(semCmsModel.GetPropertyByPath("http://museodelprado.es/ontologia/pradomuseum.owl#htmlModule").FirstPropertyValue.RelatedEntity))>
                            <span @Html.Raw(semCmsModel.GetRDFAProperty(semCmsModel.GetPropertyByPath("http://museodelprado.es/ontologia/pradomuseum.owl#htmlModule@@@http://museodelprado.es/ontologia/pradomuseum.owl#html")))>@Html.Raw(htmlModule)</span>
                        </span>
                    </div>
                }
            }
            @{

                string edificio = string.Empty;

                if (!string.IsNullOrEmpty(edificioExposicion))
                {
                    string htmlEdificio = "<span " + semCmsModel.GetRDFAPropertyByPath("http://museodelprado.es/ontologia/ecidoc.owl#p7_took_place_at_headquarters") + ">" + edificioExposicion + "</span>";

                    if (!string.IsNullOrEmpty(salaExposicion) && !string.IsNullOrEmpty(htmlEdificio))
                    {
                        edificio = string.Concat(". ", htmlEdificio);
                    }
                    else if (!string.IsNullOrEmpty(htmlEdificio))
                    {
                        edificio = htmlEdificio;
                    }
                }

                if (!string.IsNullOrEmpty(salaExposicion) || !string.IsNullOrEmpty(edificio))
                {
                    <div class="acceso">
                        <h2>@Html.Translate("ACCESO")</h2>
                        <p>
                            @{
                                if (!string.IsNullOrEmpty(salaExposicion) && !string.IsNullOrEmpty(edificio))
                                {
                                    <strong @Html.Raw(semCmsModel.GetRDFAPropertyByPath("http://museodelprado.es/ontologia/ecidoc.owl#p7_took_place_at_room"))>@Html.Translate("SALA") @Html.Raw(salaExposicion)</strong>@Html.Raw(edificio)
                                }
                                else if (!string.IsNullOrEmpty(salaExposicion))
                                {
                                    <strong @Html.Raw(semCmsModel.GetRDFAPropertyByPath("http://museodelprado.es/ontologia/ecidoc.owl#p7_took_place_at_room"))>@Html.Translate("SALA") @Html.Raw(salaExposicion)</strong>
                                }
                                else if (!string.IsNullOrEmpty(edificio))
                                {
                                    @Html.Raw(edificio);
                                }
                            }
                        </p>
                    </div>
                }
            }
            @if (!string.IsNullOrEmpty(titularHorario) && !string.IsNullOrEmpty(horario))
            {

                <div class="horario">
                    <h2>@titularHorario</h2>
                    <p @Html.Raw(semCmsModel.GetRDFAPropertyByPath("http://museodelprado.es/ontologia/ecidoc.owl#p4_has_time-span_opening_time"))>@Html.Raw(horario)</p>
                </div>
            }
            <div class="famp">
                <a href="https://www.amigosmuseoprado.org/es/amigos/amigos-particulares/boletin-alta-paso-1">
                    <img src="@urlPersonalizacion/cms/fnd-tarjeta-amigos.png" alt="Im√°gen de hazte Amigo del museo">
                    <p class="mu-am-tit">Hazte Amigo</p>
                </a>
            </div>
            @if (acciones.Edit)
            {
                <div class="copiaexpo">
                    <a id="copiarExposicion" class="botones-centrados bc-estandar hv-estandar">
                        <span class="txt">Copiar exposici√≥n</span>
                    </a>
                </div>
            }
        </div>
        <h2>@Html.Translate("RDF")</h2>
        <p><a class="ico-rdf" href="@Html.GetURLRDF()">RDF</a></p>
        @{

            // Organizadores Exposici√≥n

            SemanticPropertyModel organizadores = semCmsModel.GetPropertyByPath("http://www.cidoc-crm.org/cidoc-crm#p14_carried_out_by");
            List<object> organizacionesJsonLD = new List<object>();

            if (organizadores != null && organizadores.PropertyValues != null && organizadores.PropertyValues.Count() > 0)
            {
                System.Data.DataTable datatableTipoOrganizador = new System.Data.DataTable("tipoOrganizador");
                datatableTipoOrganizador.Columns.Add("es");
                datatableTipoOrganizador.Columns.Add("en");

                // datatableTipoOrganizador contiene todos los tipos de organizador que puede haber en una exposici√≥n ordenados como deben mostrarse en la web.
                datatableTipoOrganizador.Rows.Add("Patrocinada por:", "Sponsored by:");
                datatableTipoOrganizador.Rows.Add("Gracias al patrocinio de:", "Thanks to the sponsorship of:");
                datatableTipoOrganizador.Rows.Add("Con el patrocinio tecnol√≥gico de:", "With the technological sponsorship of:");
                datatableTipoOrganizador.Rows.Add("Copatrocinada por:", "Copatrocinada por:");
                datatableTipoOrganizador.Rows.Add("Organizada por:", "Organized by:");
                datatableTipoOrganizador.Rows.Add("Proyecto organizado por:", "A project organized by:");
                datatableTipoOrganizador.Rows.Add("Coorganizada por:", "Co-organized by:");
                datatableTipoOrganizador.Rows.Add("Con la colaboraci√≥n de:", "With the collaboration of:");
                datatableTipoOrganizador.Rows.Add("Con la colaboraci√≥n especial de:", "In special collaboration with:");
                datatableTipoOrganizador.Rows.Add("Colaborador tecnol√≥gico:", "Technological support:");
                datatableTipoOrganizador.Rows.Add("Con el patrocinio exclusivo de la:", "Exclusive Sponsorship:");
                datatableTipoOrganizador.Rows.Add("Producido por:", "Produced by:");
                datatableTipoOrganizador.Rows.Add("Con el apoyo de:", "Supported by:");
                datatableTipoOrganizador.Rows.Add("Protector del Programa de Restauraci√≥n:", "Protector of the restoration program:");
                datatableTipoOrganizador.Rows.Add("Gracias a la generosidad de:", "Thanks to the generosity of:");


                // datatableOrganizadores almacena un recurso de tipo Organizador y sus propiedades tipo y orden, para ordenar en primer lugar por Tipo de Organizador y despu√©s por orden.

                System.Data.DataTable datatableOrganizadores = new System.Data.DataTable("Organizadores");
                datatableOrganizadores.Columns.Add("Organizador", typeof(SemanticPropertyModel.PropertyValue));
                datatableOrganizadores.Columns.Add("Tipo", typeof(string));
                datatableOrganizadores.Columns.Add("Orden", typeof(int));


                //Dictionary<SemanticPropertyModel.PropertyValue, string> diccionarioOrganizadores = new Dictionary<SemanticPropertyModel.PropertyValue, string>();
                //List<SemanticPropertyModel.PropertyValue> listadoOrganizadoresPorTipo = new List<SemanticPropertyModel.PropertyValue>();

                foreach (SemanticPropertyModel.PropertyValue organizador in organizadores.PropertyValues)
                {
                    string tipoOrganizadorExposicion = organizador.RelatedEntity.GetFirstValuePropertyByPath("http://museodelprado.es/ontologia/pradomuseum.owl#organizerType@@@http://museodelprado.es/ontologia/multilang-property.owl#textValue");
                    string propOrdenOrganizador = organizador.RelatedEntity.GetFirstValuePropertyByPath("http://museodelprado.es/ontologia/pradomuseum.owl#order");
                    int ordenOrganizador = 1000;


                    if (!string.IsNullOrEmpty(propOrdenOrganizador))
                    {
                        try
                        {
                            ordenOrganizador = Int32.Parse(propOrdenOrganizador);
                        }
                        catch (FormatException e)
                        {
                            ordenOrganizador = 1000;
                        }
                    }

                    datatableOrganizadores.Rows.Add(organizador, tipoOrganizadorExposicion, ordenOrganizador);


                    //string tipoOrganizadorExposicion = string.Empty;

                    //if (propTipoOrganizador != null && propTipoOrganizador.PropertyValues.Count() > 0)
                    //{
                    //    tipoOrganizadorExposicion = propTipoOrganizador.FirstPropertyValue.RelatedEntity.GetFirstValuePropertyByPath("http://museodelprado.es/ontologia/multilang-property.owl#textValue");
                    //}

                    //diccionarioOrganizadores.Add(organizador, tipoOrganizadorExposicion);
                }



                List<string> listadoTiposOrganizador = datatableTipoOrganizador.AsEnumerable().Select(id => id.Field<string>(idiomaNav)).ToList();

                // Muestra los organizadores de la Exposici√≥n ordenados por tipo
                if (listadoTiposOrganizador != null && listadoTiposOrganizador.Count() > 0)
                {
                    <div class="fe-logotipos">
                        <dl>
                            @foreach (string tipo in listadoTiposOrganizador)
                            {
                                // Obtiene los organizadores del tipo "tipo" que tiene la Exposici√≥n
                                // listadoOrganizadoresPorTipo = diccionarioOrganizadores.Where(par => par.Value.Equals(tipo)).Select(par => par.Key).ToList();

                                List<object> listadoOrganizadoresDelTipo = datatableOrganizadores.AsEnumerable().Where(row => row["Tipo"].Equals(tipo)).OrderBy(row => row["Orden"]).Select(row => row["Organizador"]).ToList();

                                if (listadoOrganizadoresDelTipo != null && listadoOrganizadoresDelTipo.Count > 0)
                                {
                                    string tipoOrganizador = string.Empty;


                                    <dt>@tipo</dt>

                                    foreach (SemanticPropertyModel.PropertyValue organizador in listadoOrganizadoresDelTipo)
                                    {
                                        string nombreOrganizadorExposicion = organizador.RelatedEntity.GetFirstValuePropertyByPath("http://museodelprado.es/ontologia/ecidoc.owl#p131_E82_p102_has_title");
                                        string imagenOrganizadorExposicion = organizador.RelatedEntity.GetFirstValuePropertyByPath("http://museodelprado.es/ontologia/ecidoc.owl#p65_E36_shows_visual_item");
                                        string urlOrganizadorExposicion = organizador.RelatedEntity.GetFirstValuePropertyByPath("http://www.cidoc-crm.org/cidoc-crm#p76_has_contact_point");
                                        string cssImagenOrganizadorExposicion = organizador.RelatedEntity.GetFirstValuePropertyByPath("http://museodelprado.es/ontologia/pradomuseum.owl#css");

                                        Dictionary<string, List<object>> orgJsonLD = new Dictionary<string, List<object>>();
                                        organizacionesJsonLD.Add(orgJsonLD);
                                        orgJsonLD.Add("@type", new List<object>(new string[] { "Organization" }));

                                        if (!string.IsNullOrEmpty(nombreOrganizadorExposicion))
                                        {
                                            orgJsonLD.Add("name", new List<object>(new string[] { nombreOrganizadorExposicion }));
                                        }

                                        if (!string.IsNullOrEmpty(imagenOrganizadorExposicion))
                                        {
                                            orgJsonLD.Add("image", new List<object>(new string[] { ViewBag.BaseUrlContent + "/" + imagenOrganizadorExposicion }));
                                        }

                                        if (!string.IsNullOrEmpty(urlOrganizadorExposicion))
                                        {
                                            orgJsonLD.Add("url", new List<object>(new string[] { urlOrganizadorExposicion }));
                                        }

                                        if (!string.IsNullOrEmpty(imagenOrganizadorExposicion) || !string.IsNullOrEmpty(nombreOrganizadorExposicion))
                                        {
                                            <dd @Html.Raw(semCmsModel.GetRDFAProperty(organizador.Property))>
                                                <span @Html.Raw(semCmsModel.GetRDFAEntity(organizador.RelatedEntity))>
                                                    <span @Html.Raw(semCmsModel.GetRDFAProperty(organizador.RelatedEntity.GetPropertyByPath("http://www.cidoc-crm.org/cidoc-crm#p76_has_contact_point")))>
                                                        <a href="@urlOrganizadorExposicion" @Html.Raw(semCmsModel.GetRDFAProperty(organizador.RelatedEntity.GetPropertyByPath("http://www.cidoc-crm.org/cidoc-crm#p76_has_contact_point")))>
                                                            @if (!string.IsNullOrEmpty(imagenOrganizadorExposicion))
                                                            {
                                                                <span @Html.Raw(semCmsModel.GetRDFAProperty(organizador.RelatedEntity.GetPropertyByPath("http://museodelprado.es/ontologia/ecidoc.owl#p65_E36_shows_visual_item")))>
                                                                    <img class="@cssImagenOrganizadorExposicion" alt="@nombreOrganizadorExposicion" src="@ViewBag.BaseURLContent/@imagenOrganizadorExposicion" class="" />
                                                                </span>
                                                            }
                                                            else
                                                            {
                                                                <p @Html.Raw(semCmsModel.GetRDFAProperty(organizador.RelatedEntity.GetPropertyByPath("http://museodelprado.es/ontologia/ecidoc.owl#p131_E82_p102_has_title")))>@nombreOrganizadorExposicion</p>
                                                            }
                                                        </a>
                                                    </span>
                                                </span>
                                            </dd>
                                        }
                                    }
                                }
                            }
                        </dl>
                    </div>
                }

            }
        }
    </section>
    @{
        if (interactivos != null && interactivos.PropertyValues != null && interactivos.PropertyValues.Count > 0)
        {
            foreach (SemanticPropertyModel.PropertyValue interactivoItem in interactivos.PropertyValues)
            {
                string visible = interactivoItem.RelatedEntity.GetPropertyByPath("http://museodelprado.es/ontologia/pradomuseum.owl#visible").Element.Propiedad.UnicoValor.Key;
                if (visible.ToLower() == "true")
                {
                    SemanticPropertyModel interactivo = interactivoItem.RelatedEntity.GetPropertyByPath("http://museodelprado.es/ontologia/pradomuseum.owl#interactive");
                    if (interactivo != null && interactivos.PropertyValues != null && interactivos.PropertyValues.Count > 0)
                    {
                        <section class="interactivo">
                            @{string html = interactivo.PropertyValues[0].RelatedEntity.GetFirstValuePropertyByPath("http://museodelprado.es/ontologia/pradomuseum.owl#main_HTML").Replace("URLCONTENTINTERACTIVOS", urlPersonalizacion + "/ElPrado/interactivos");
                                string title = interactivo.PropertyValues[0].RelatedEntity.GetFirstValuePropertyByPath("http://purl.org/vocab/frbr/core#p3020_has_title_of_the_manifestation");
                                SemanticPropertyModel js = interactivo.PropertyValues[0].RelatedEntity.GetPropertyByPath("http://museodelprado.es/ontologia/pradomuseum.owl#path_JS");
                                SemanticPropertyModel css = interactivo.PropertyValues[0].RelatedEntity.GetPropertyByPath("http://museodelprado.es/ontologia/pradomuseum.owl#path_CSS");



                                <h2 class="heading"><span>@title</span></h2>
                                @Html.Raw(html)
                                if (js != null && js.PropertyValues != null && js.PropertyValues.Count > 0)
                                {
                                    foreach (SemanticPropertyModel.PropertyValue jsItem in js.PropertyValues)
                                    {
                                        ViewBag.ListaJS.Add(urlPersonalizacion + "/ElPrado/interactivos/" + jsItem.Value);
                                    }
                                }
                                if (css != null && css.PropertyValues != null && css.PropertyValues.Count > 0)
                                {
                                    foreach (SemanticPropertyModel.PropertyValue cssItem in css.PropertyValues)
                                    {
                                        ViewBag.ListaCSS.Add(urlPersonalizacion + "/ElPrado/interactivos/" + cssItem.Value);
                                    }
                                }
                            }
                        </section>}
                }
            }
        }
    }
    <!-- MULTIMEDIA -->
    @if ((videos != null && videos.PropertyValues != null && videos.PropertyValues.Count() > 0) || mostrarInteractivosCarrusel)
    {
        <section class="videos" id="videos">
            <h2 class="heading">@Html.Translate("MULTIMEDIA")</h2>
            <div class="loop carousel inactive">
                @if (interactivos != null && interactivos.PropertyValues != null && interactivos.PropertyValues.Count > 0)
                {
                    foreach (SemanticPropertyModel.PropertyValue interactivoItem in interactivos.PropertyValues)
                    {
                        SemanticPropertyModel interactivo = interactivoItem.RelatedEntity.GetPropertyByPath("http://museodelprado.es/ontologia/pradomuseum.owl#interactive");
                        if (interactivo != null && interactivo.PropertyValues != null && interactivo.PropertyValues.Count > 0)
                        {
                            string tituloInteractivo = "";
                            string urlInteractivo = "";
                            SemanticPropertyModel propTituloInteractivo = interactivo.PropertyValues[0].RelatedEntity.GetPropertyByPath("http://purl.org/vocab/frbr/core#p3020_has_title_of_the_manifestation");
                            if (propTituloInteractivo != null && propTituloInteractivo.PropertyValues.Count > 0)
                            {
                                tituloInteractivo = propTituloInteractivo.FirstPropertyValue.Value;
                                urlInteractivo = propTituloInteractivo.FirstPropertyValue.DownloadUrl;
                            }
                            string imagenInteractivo = interactivo.PropertyValues[0].RelatedEntity.GetFirstValuePropertyByPath("http://museodelprado.es/ontologia/pradomuseum.owl#image");



                            <div class="slide" @Html.Raw(semCmsModel.GetRDFAProperty(interactivo.PropertyValues[0].Property))>
                                <figure @Html.Raw(semCmsModel.GetRDFAEntity(interactivo.PropertyValues[0].RelatedEntity))>
                                    @if (string.IsNullOrEmpty(imagenInteractivo))
                                    {
                                        <div class="thumb imgwrap">
                                            <a href="@urlInteractivo">
                                                <div class="no-img">
                                                    <div class="outer">
                                                        <span>@Html.Translate("IMAGENNODISPONIBLE")</span>
                                                    </div>
                                                </div>
                                            </a>
                                        </div>
                                    }
                                    else
                                    {
                                        <a href="@urlInteractivo">
                                            @if (!string.IsNullOrEmpty(imagenInteractivo))
                                            {
                                                <img alt="@tituloInteractivo" src="@ViewBag.BaseURLContent/@imagenInteractivo" />
                                            }
                                        </a>
                                    }
                                    <figcaption>
                                        <strong class="media-type">@Html.Translate("INTERACTIVO")</strong>
                                        @if (!string.IsNullOrEmpty(tituloInteractivo))
                                        {
                                            <h3 class="name">
                                                <a href="@urlInteractivo">
                                                    <span @Html.Raw(semCmsModel.GetRDFAProperty(interactivo.PropertyValues[0].RelatedEntity.GetPropertyByPath("http://purl.org/vocab/frbr/core#p3020_has_title_of_the_manifestation")))>@Html.Raw(tituloInteractivo)</span>
                                                </a>
                                            </h3>
                                        }
                                    </figcaption>
                                </figure>
                            </div>}
                    }
                }
                @if (videos != null && videos.PropertyValues != null && videos.PropertyValues.Count > 0)
                {
                    foreach (SemanticPropertyModel.PropertyValue video in videos.PropertyValues)
                    {
                        string tituloVideoRelacionado = string.Empty; //video.RelatedEntity.GetFirstValuePropertyByPath("http://purl.org/vocab/frbr/core#p3020_has_title_of_the_manifestation");
                        string urlInteractivo = string.Empty;
                        SemanticPropertyModel propTituloInteractivo = video.RelatedEntity.GetPropertyByPath("http://purl.org/vocab/frbr/core#p3020_has_title_of_the_manifestation");
                        if (propTituloInteractivo != null && propTituloInteractivo.PropertyValues.Count > 0)
                        {
                            tituloVideoRelacionado = propTituloInteractivo.FirstPropertyValue.Value;
                            urlInteractivo = propTituloInteractivo.FirstPropertyValue.DownloadUrl;
                        }
                        string tipoVideoRelacionado = video.RelatedEntity.GetFirstValuePropertyByPath("http://www.w3.org/1999/02/22-rdf-syntax-ns#type");

                        if (!string.IsNullOrEmpty(tipoVideoRelacionado))
                        {
                            tipoVideoRelacionado = tipoVideoRelacionado.Replace("http://museodelprado.es/ontologia/efrbrer.owl#", "");
                        }
                        string tipoRM = tipoVideoRelacionado;

                        if (!string.IsNullOrEmpty(tipoVideoRelacionado) && tipoVideoRelacionado.Contains('#'))
                        {
                            tipoRM = tipoVideoRelacionado.Split(new Char[] { '#' }).Last();
                        }
                        string duracionVideoRelacionado = video.RelatedEntity.GetFirstValuePropertyByPath("http://museodelprado.es/ontologia/pradomuseum.owl#duration");
                        string urlVideoRelacionado = video.RelatedEntity.GetFirstValuePropertyByPath("http://museodelprado.es/ontologia/pradomuseum.owl#url");
                        string imagenVideoRelacionado = video.RelatedEntity.GetFirstValuePropertyByPath("http://museodelprado.es/ontologia/pradomuseum.owl#image");

                        if (!string.IsNullOrEmpty(urlVideoRelacionado))
                        {
                            if (!urlVideoRelacionado.ToLower().Contains("instagram") && !urlVideoRelacionado.ToLower().Contains("tiktok"))
                            {
                                <div class="slide video" @Html.Raw(semCmsModel.GetRDFAProperty(video.Property))>
                                    <figure @Html.Raw(semCmsModel.GetRDFAEntity(video.RelatedEntity))>
                                        <a href="@urlVideoRelacionado" class="modal-videoPlayer">
                                            @if (!string.IsNullOrEmpty(duracionVideoRelacionado))
                                            {
                                                <span class="duracion">@duracionVideoRelacionado</span>
                                            }
                                            @if (!string.IsNullOrEmpty(imagenVideoRelacionado))
                                            {
                                                <img alt="@tituloVideoRelacionado" src="@ViewBag.BaseURLContent/@imagenVideoRelacionado" />
                                            }
                                        </a>
                                        <figcaption>
                                            @if (!string.IsNullOrEmpty(tipoVideoRelacionado))
                                            {
                                                <strong class="media-type">@tipoVideoRelacionado</strong>
                                            }
                                            @if (!string.IsNullOrEmpty(tituloVideoRelacionado))
                                            {
                                                <h3 class="name">
                                                    <a href="@urlVideoRelacionado" class="modal-videoPlayer">
                                                        <span @Html.Raw(semCmsModel.GetRDFAProperty(video.RelatedEntity.GetPropertyByPath("http://purl.org/vocab/frbr/core#p3020_has_title_of_the_manifestation")))>@Html.Raw(tituloVideoRelacionado)</span>
                                                    </a>
                                                </h3>
                                            }
                                        </figcaption>
                                    </figure>
                                </div>
                            }
                            else
                            {
                                <div class="slide video">
                                    <figure>
                                        <a href="@urlInteractivo">
                                            @if (!string.IsNullOrEmpty(duracionVideoRelacionado))
                                            {
                                                <span class="duracion">@duracionVideoRelacionado</span>
                                            }
                                            @if (!string.IsNullOrEmpty(imagenVideoRelacionado))
                                            {
                                                string imagenRMUrlCompleta = string.Concat(ViewBag.BaseUrlContent, "/", imagenVideoRelacionado);
                                                <img alt="" src="@Html.ObtenerImagenConTamano(imagenRMUrlCompleta, 300)" onclick="" />
                                            }
                                            else
                                            {
                                                <img alt="" src="img/provisionales/miniatura_multimedia.png" onclick="" />
                                            }
                                        </a>
                                        <figcaption>
                                            @if (!string.IsNullOrEmpty(tipoRM))
                                            {
                                                <div class="media-type">@tipoRM</div>
                                            }
                                            @if (!string.IsNullOrEmpty(tituloVideoRelacionado))
                                            {
                                                <h3 class="name"><a href="@urlInteractivo" class="modal-videoPlayer">@tituloVideoRelacionado</a></h3>
                                            }
                                        </figcaption>
                                    </figure>
                                </div>
                            }


                        }



                    }
                }
            </div>
            <div class="ver-mas-multimedia"><a href="@Html.GetComunidad().Url/@Html.Translate("URLBUSQUEDACONTENIDOCOLECCION")?rdf:type=multimediaresource">@Html.Translate("VERMASMULTIMEDIA")</a></div>
        </section>
    }
    <!-- EXPOSICIONES -->
    @if (exposiciones != null && exposiciones.PropertyValues != null && exposiciones.PropertyValues.Count() > 0 && !ocultarPaginas)
    {
        Dictionary<SemanticPropertyModel.PropertyValue, int> dicExposiciones = ObtenerDiccionarioPaginasOrden(exposiciones);
        Dictionary<SemanticPropertyModel.PropertyValue, int> dicExposicionesConIdiomaNav = new Dictionary<SemanticPropertyModel.PropertyValue, int>();

        <section class="exposicion" id="exposicion">
            <h2 class="heading"><span>@(!string.IsNullOrEmpty(esEnElMuseo) && esEnElMuseo.Equals("http://museodelprado.es/items/place_at_museum_itinerary") || esEnElMuseo.Equals("activitytype_44") ? @Html.Translate("ITINERARIO_EXPOSITIVO") : @Html.Translate("EXPOSICION"))</span></h2>
            @*<div @Html.Raw(semCmsModel.GetRDFAEntity(exposiciones.FirstPropertyValue.RelatedEntity))>*@
            <div class="exp-menu desktop">
                <nav>
                    <ul class="menu-normal">
                        @foreach (KeyValuePair<SemanticPropertyModel.PropertyValue, int> parExposicion in dicExposiciones.OrderBy(par => par.Value))
                        {
                            SemanticPropertyModel.PropertyValue exposicion = parExposicion.Key;
                            int ordenExposicion = parExposicion.Value;

                            // Nombre exposici√≥n

                            string nombreExposicion = string.Empty;
                            string descripcionExposicion = string.Empty;

                            string idiomaNombreExpo = string.Empty;
                            string idiomaNombreCortoExpo = string.Empty;
                            string idiomaDescripcionExpo = string.Empty;

                            SemanticPropertyModel propNombreExposicion = exposicion.RelatedEntity.GetPropertyByPath("http://museodelprado.es/ontologia/pradomuseum.owl#pageName");

                            if (propNombreExposicion != null && propNombreExposicion.FirstPropertyValue != null)
                            {
                                nombreExposicion = propNombreExposicion.FirstPropertyValue.Value;
                                idiomaNombreExpo = propNombreExposicion.FirstPropertyValue.LanguageOfValue;
                            }

                            //Descripci√≥n

                            SemanticPropertyModel propDescripcionExposicion = exposicion.RelatedEntity.GetPropertyByPath("http://museodelprado.es/ontologia/pradomuseum.owl#pageDescription");

                            if (propDescripcionExposicion != null && propDescripcionExposicion.FirstPropertyValue != null)
                            {
                                descripcionExposicion = propDescripcionExposicion.FirstPropertyValue.Value;
                                idiomaDescripcionExpo = propDescripcionExposicion.FirstPropertyValue.LanguageOfValue;
                            }

                            // Nombre corto exposici√≥n

                            SemanticPropertyModel propNombreCortoExposicion = exposicion.RelatedEntity.GetPropertyByPath("http://museodelprado.es/ontologia/pradomuseum.owl#pageShortName");

                            if (propNombreCortoExposicion != null && propNombreCortoExposicion.FirstPropertyValue != null)
                            {
                                string nombreCortoExposicion = propNombreCortoExposicion.FirstPropertyValue.Value;
                                idiomaNombreCortoExpo = propNombreCortoExposicion.FirstPropertyValue.LanguageOfValue;

                                if (!string.IsNullOrEmpty(nombreCortoExposicion) && idiomaNombreCortoExpo.Equals(idiomaNav) && !string.IsNullOrEmpty(nombreExposicion) && idiomaNombreExpo.Equals(idiomaNav) && !string.IsNullOrEmpty(descripcionExposicion) && idiomaDescripcionExpo.Equals(idiomaNav))
                                {
                                    string nombrecorto = Es.Riam.Util.UtilCadenas.EliminarHtmlDeTexto(nombreCortoExposicion);
                                    <li class="menu-@EliminarCaracteresEspeciales(nombrecorto)"><a>@Html.Raw(nombrecorto)</a></li>

                                    dicExposicionesConIdiomaNav.Add(exposicion, ordenExposicion);
                                }
                            }
                        }
                    </ul>
                </nav>
            </div>
            <div class="exp-cont">
                <!-- P√°ginas de la exposici√≥n -->
                @foreach (KeyValuePair<SemanticPropertyModel.PropertyValue, int> parExposicion in dicExposicionesConIdiomaNav.OrderBy(par => par.Value))
                {
                    string nombreExposicion = string.Empty;
                    string nombreCortoExposicion = string.Empty;
                    string descripcionExposicion = string.Empty;
                    SemanticPropertyModel propUrlImagenExposicion = null;
                    string urlImagenExposicion = string.Empty;
                    SemanticPropertyModel propPieImagenExposicion = null;
                    string pieImagenExposicion = string.Empty;
                    string classImagen = "expo-cont-item";
                    string enlaceObraPaginaExpo = string.Empty;

                    SemanticPropertyModel.PropertyValue exposicion = parExposicion.Key;

                    // Nombre exposici√≥n

                    SemanticPropertyModel propNombreExposicion = exposicion.RelatedEntity.GetPropertyByPath("http://museodelprado.es/ontologia/pradomuseum.owl#pageName");

                    if (propNombreExposicion != null && propNombreExposicion.FirstPropertyValue != null)
                    {
                        nombreExposicion = propNombreExposicion.FirstPropertyValue.Value;
                    }


                    // Nombre corto exposici√≥n

                    SemanticPropertyModel propNombreCortoExposicion = exposicion.RelatedEntity.GetPropertyByPath("http://museodelprado.es/ontologia/pradomuseum.owl#pageShortName");

                    if (propNombreCortoExposicion != null && propNombreCortoExposicion.FirstPropertyValue != null)
                    {
                        nombreCortoExposicion = propNombreCortoExposicion.FirstPropertyValue.Value;
                    }


                    //Descripci√≥n

                    SemanticPropertyModel propDescripcionExposicion = exposicion.RelatedEntity.GetPropertyByPath("http://museodelprado.es/ontologia/pradomuseum.owl#pageDescription");

                    if (propDescripcionExposicion != null && propDescripcionExposicion.FirstPropertyValue != null)
                    {
                        descripcionExposicion = propDescripcionExposicion.FirstPropertyValue.Value;
                    }


                    // Imagen

                    SemanticPropertyModel propImagenExposicion = exposicion.RelatedEntity.GetPropertyByPath("http://www.cidoc-crm.org/cidoc-crm#p65_shows_visual_item");

                    if (propImagenExposicion != null && propImagenExposicion.FirstPropertyValue != null)
                    {
                        propUrlImagenExposicion = propImagenExposicion.FirstPropertyValue.RelatedEntity.GetPropertyByPath("http://museodelprado.es/ontologia/pradomuseum.owl#pageImage");

                        if (propUrlImagenExposicion != null && propUrlImagenExposicion.FirstPropertyValue != null)
                        {
                            urlImagenExposicion = ViewBag.BaseUrlContent + "/" + propUrlImagenExposicion.FirstPropertyValue.Value;
                        }


                        propPieImagenExposicion = propImagenExposicion.FirstPropertyValue.RelatedEntity.GetPropertyByPath("http://museodelprado.es/ontologia/pradomuseum.owl#pageImageFooter");

                        if (propPieImagenExposicion != null && propPieImagenExposicion.FirstPropertyValue != null)
                        {
                            pieImagenExposicion = propPieImagenExposicion.FirstPropertyValue.Value;
                        }


                        //Orientaci√≥n de la imagen de la obra
                        if (propImagenExposicion.FirstPropertyValue.RelatedEntity.GetProperty("http://museodelprado.es/ontologia/pradomuseum.owl#isHorizontal") != null)
                        {
                            string isHorizontal = propImagenExposicion.FirstPropertyValue.RelatedEntity.GetProperty("http://museodelprado.es/ontologia/pradomuseum.owl#isHorizontal").Element.Propiedad.UnicoValor.Key;

                            if (!string.IsNullOrEmpty(isHorizontal))
                            {

                                try
                                {
                                    if (!Boolean.Parse(isHorizontal))
                                    {
                                        classImagen = "expo-cont-item vertical";
                                    }
                                    else
                                    {
                                        classImagen = "expo-cont-item horizontal";
                                    }
                                }
                                catch (Exception)
                                {
                                    classImagen = "expo-cont-item horizontal";
                                }
                            }
                        }


                        enlaceObraPaginaExpo = propImagenExposicion.FirstPropertyValue.RelatedEntity.GetFirstValuePropertyByPath("http://museodelprado.es/ontologia/pradomuseum.owl#pageImageUrl");
                    }

                    string nombrecorto = Es.Riam.Util.UtilCadenas.EliminarHtmlDeTexto(nombreCortoExposicion);

                    <div id="@EliminarCaracteresEspeciales(nombrecorto)" class="@classImagen" @Html.Raw(semCmsModel.GetRDFAProperty(exposicion.Property))>
                        <div @Html.Raw(semCmsModel.GetRDFAEntity(exposicion.RelatedEntity))>
                            @if (!string.IsNullOrEmpty(nombreCortoExposicion))
                            {
                                <h3 @Html.Raw(semCmsModel.GetRDFAProperty(propNombreExposicion))>@Html.Raw(nombreExposicion)</h3>
                            }
                            @if (propImagenExposicion != null && propImagenExposicion.FirstPropertyValue != null)
                            {
                                <div @Html.Raw(semCmsModel.GetRDFAProperty(propImagenExposicion))>
                                    <figure @Html.Raw(semCmsModel.GetRDFAEntity(propImagenExposicion.FirstPropertyValue.RelatedEntity))>
                                        @if (!string.IsNullOrEmpty(urlImagenExposicion))
                                        {
                                            if (!string.IsNullOrEmpty(enlaceObraPaginaExpo))
                                            {
                                                <a href="@enlaceObraPaginaExpo" @Html.Raw(semCmsModel.GetRDFAProperty(propUrlImagenExposicion))>
                                                    <img src="@urlImagenExposicion" alt="@nombreExposicion" />
                                                </a>
                                            }
                                            else
                                            {
                                                <img src="@urlImagenExposicion" alt="@nombreExposicion" />
                                            }
                                        }
                                        @if (!string.IsNullOrEmpty(pieImagenExposicion))
                                        {
                                            <figcaption @Html.Raw(semCmsModel.GetRDFAProperty(propPieImagenExposicion))>
                                                <dl>
                                                    <dd>@Html.Raw(Html.DeleteFirstParagraph(pieImagenExposicion))</dd>
                                                </dl>
                                            </figcaption>
                                        }
                                        <!--<p>OPCION 2</p><figcaption>
                                                <p>Html.Raw(pieImagenExposicion)</p>
                                        </figcaption> -->
                                    </figure>
                                </div>
                            }
                            @if (!string.IsNullOrEmpty(descripcionExposicion))
                            {
                                <div class="exp-cont-text">
                                    <span>@Html.Raw(descripcionExposicion)</span>
                                </div>
                            }
                        </div>
                    </div>
                }
            </div>
            @*</div>*@
        </section>
    }
    <!-- EXPOSICIONES - OBRA -->
    @if (exposicionObras != null && exposicionObras.PropertyValues.Count() > 0 && !ocultarObras)
    {
        <section class="obras-ficha-expo" id="obras-ficha-expo">
            <h2 class="heading"><span>@Html.Translate("OBRAS")</span></h2>
            <form novalidate="novalidate">
                <ul class="vista-selector">
                    <li class="miniaturas selected" data-mode="vista-muro"><a>@Html.Translate("IMAGENES")</a></li>
                    <li class="listado" data-mode="vista-lista"><a>@Html.Translate("LISTADO")</a></li>
                    <li class="galeria" data-mode="big-galeria"><a>@Html.Translate("GALERIA")</a></li>
                </ul>
            </form>
            <div class="vista-muro mostrable">
                <div id="wall-container">
                    @{

                        // EXPOSICI√ìN - OBRAS
                        Dictionary<SemanticPropertyModel.PropertyValue, int> diccionarioObras = new Dictionary<SemanticPropertyModel.PropertyValue, int>();
                        SemanticPropertyModel orden = null;
                        int ordenObra = 0;
                        string o = string.Empty;

                        // Exposici√≥n-Obra
                        foreach (SemanticPropertyModel.PropertyValue exposicionObra in exposicionObras.PropertyValues)
                        {
                            orden = exposicionObra.RelatedEntity.GetPropertyByPath("http://museodelprado.es/ontologia/pradomuseum.owl#artWorkOrder");

                            try
                            {
                                if (orden != null && orden.FirstPropertyValue != null)
                                {
                                    o = orden.FirstPropertyValue.Value;
                                }

                                if (!string.IsNullOrEmpty(o))
                                {
                                    ordenObra = Int32.Parse(o);
                                }
                                else
                                {
                                    // Si la obra no tiene un orden, se le asigna orden 1000 para que aparezca en √∫ltimo lugar.
                                    ordenObra = 1000;
                                }
                            }
                            catch (FormatException e)
                            {
                                ordenObra = 1000;
                            }

                            diccionarioObras.Add(exposicionObra, ordenObra);
                        }
                        int ordenPintar = 1;
                        int numObraMosaico = 0;
                        int paginaMosaicoObras = 0;

                        foreach (KeyValuePair<SemanticPropertyModel.PropertyValue, int> ParObra in diccionarioObras.OrderBy(key => key.Value))
                        {
                            int obra_orden = ordenPintar;

                            string obra_titulo = "";
                            string obra_enlace = "";
                            string obra_descripcion = "";
                            string obra_imagen = "";
                            SemanticPropertyModel propObraExterna = null;

                            Dictionary<string, List<object>> expObrasJsonLD = new Dictionary<string, List<object>>();
                            exposicionObrasJsonLD.Add(expObrasJsonLD);
                            expObrasJsonLD.Add("@type", new List<object>(new string[] { "VisualArtwork" }));


                            SemanticPropertyModel.PropertyValue obraExposicion = ParObra.Key;

                            //Obra interna
                            SemanticPropertyModel propObraInterna = obraExposicion.RelatedEntity.GetPropertyByPath("http://museodelprado.es/ontologia/pradomuseum.owl#relatedInternalArtWork");

                            if (propObraInterna != null && propObraInterna.PropertyValues != null && propObraInterna.PropertyValues.Count() > 0)
                            {
                                SemanticPropertyModel proptituloObra = propObraInterna.FirstPropertyValue.RelatedEntity.GetPropertyByPath("http://museodelprado.es/ontologia/ecidoc.owl#p102_E35_p3_has_title");
                                if (proptituloObra != null && proptituloObra.PropertyValues.Count > 0)
                                {
                                    obra_titulo = proptituloObra.FirstPropertyValue.Value;
                                    obra_enlace = proptituloObra.FirstPropertyValue.DownloadUrl;
                                }

                                //string autor = propObraInterna.FirstPropertyValue.RelatedEntity.GetFirstValuePropertyByPath("http://www.cidoc-crm.org/cidoc-crm#p14_carried_out_by@@@http://museodelprado.es/ontologia/pradomuseum.owl#author@@@http://museodelprado.es/ontologia/ecidoc.owl#p131_E82_p102_has_title");

                                List<string> autores = new List<string>();
                                SemanticPropertyModel propAutores = propObraInterna.FirstPropertyValue.RelatedEntity.GetPropertyByPath("http://www.cidoc-crm.org/cidoc-crm#p14_carried_out_by");
                                if (propAutores != null && propAutores.PropertyValues.Count() > 0)
                                {
                                    foreach (SemanticPropertyModel.PropertyValue autor in propAutores.PropertyValues)
                                    {
                                        SemanticPropertyModel propAutor = autor.RelatedEntity.GetPropertyByPath("http://museodelprado.es/ontologia/pradomuseum.owl#author");
                                        if (propAutor != null && propAutor.PropertyValues.Count() > 0)
                                        {
                                            foreach (SemanticPropertyModel.PropertyValue autorInt in propAutor.PropertyValues)
                                            {
                                                autores.Add(autorInt.RelatedEntity.GetFirstValuePropertyByPath("http://museodelprado.es/ontologia/ecidoc.owl#p131_E82_p102_has_title"));
                                            }
                                        }
                                    }
                                }



                                string formatoFisico = string.Empty;

                                string numeroCatalogoObraRelacionada = propObraInterna.FirstPropertyValue.RelatedEntity.GetFirstValuePropertyByPath("http://www.cidoc-crm.org/cidoc-crm#p48_has_preferred_identifier@@@http://www.cidoc-crm.org/cidoc-crm#p102_has_title");
                                string soporteObraRelacionada = propObraInterna.FirstPropertyValue.RelatedEntity.GetFirstValuePropertyByPath("http://museodelprado.es/ontologia/ecidoc.owl#p108i_E12_p126_employed_support@@@http://museodelprado.es/ontologia/pradomuseum.owl#supportNode@@@http://www.w3.org/2008/05/skos#prefLabel");
                                string materiaObraRelacionada = propObraInterna.FirstPropertyValue.RelatedEntity.GetFirstValuePropertyByPath("http://museodelprado.es/ontologia/ecidoc.owl#p108i_E12_p126_employed_medium@@@http://museodelprado.es/ontologia/pradomuseum.owl#mediumNode@@@http://www.w3.org/2008/05/skos#prefLabel");

                                string letraObraRelacionada = string.Empty;
                                if (!string.IsNullOrEmpty(numeroCatalogoObraRelacionada))
                                {
                                    System.Text.RegularExpressions.Regex re = new System.Text.RegularExpressions.Regex(@"^[a-zA-Z]+");
                                    System.Text.RegularExpressions.MatchCollection mc = re.Matches(numeroCatalogoObraRelacionada);

                                    if (mc != null)
                                    {
                                        letraObraRelacionada = mc[0].Groups[0].Value;
                                    }
                                }


                                SemanticPropertyModel tesauroTecnicaObraRelacionada = propObraInterna.FirstPropertyValue.RelatedEntity.GetPropertyByPath("http://museodelprado.es/ontologia/ecidoc.owl#p108i_E12_p32_used_general_technique@@@http://museodelprado.es/ontologia/pradomuseum.owl#techniqueNode");
                                string tecnicaObraRelacionada = null;

                                if (tesauroTecnicaObraRelacionada != null && tesauroTecnicaObraRelacionada.PropertyValues.Count > 0)
                                {
                                    tecnicaObraRelacionada = tesauroTecnicaObraRelacionada.PropertyValues.Last().RelatedEntity.GetFirstValuePropertyByPath("http://www.w3.org/2008/05/skos#prefLabel");
                                    if (!string.IsNullOrEmpty(materiaObraRelacionada))
                                    {
                                        formatoFisico = formatoFisico + materiaObraRelacionada + ", ";
                                    }
                                    if (!string.IsNullOrEmpty(tecnicaObraRelacionada))
                                    {
                                        formatoFisico = formatoFisico + tecnicaObraRelacionada;
                                    }
                                    if (!string.IsNullOrEmpty(soporteObraRelacionada))
                                    {
                                        formatoFisico = formatoFisico + " " + sobreIdiomaNav + " " + soporteObraRelacionada.ToLower();
                                    }

                                }
                                string alto = "";
                                string ancho = "";
                                string profundidad = string.Empty;
                                string unidadMedida = propObraInterna.FirstPropertyValue.RelatedEntity.GetFirstValuePropertyByPath("http://museodelprado.es/ontologia/ecidoc.owl#p43_E54_has_dimension@@@http://museodelprado.es/ontologia/ecidoc.owl#p91_E58_has_unit");
                                if (propObraInterna.FirstPropertyValue.RelatedEntity.GetPropertyByPath("http://museodelprado.es/ontologia/ecidoc.owl#p43_E54_has_dimension") != null)
                                {
                                    foreach (SemanticPropertyModel.PropertyValue propDimension in propObraInterna.FirstPropertyValue.RelatedEntity.GetPropertyByPath("http://museodelprado.es/ontologia/ecidoc.owl#p43_E54_has_dimension").PropertyValues)
                                    {
                                        SemanticPropertyModel propTipo = propDimension.RelatedEntity.GetProperty("http://museodelprado.es/ontologia/ecidoc.owl#p2_E55_has_type");
                                        SemanticPropertyModel propValor = propDimension.RelatedEntity.GetProperty("http://museodelprado.es/ontologia/ecidoc.owl#p90_E60_has_value");
                                        SemanticPropertyModel propFactorConversion = propDimension.RelatedEntity.GetPropertyByPath("http://museodelprado.es/ontologia/pradomuseum.owl#conversion_factor");

                                        float factorConversion = 0;

                                        if (propTipo.PropertyValues.Count > 0 && propValor.PropertyValues.Count > 0)
                                        {
                                            if (propFactorConversion != null)
                                            {

                                                string factorConv = propFactorConversion.FirstPropertyValue.Value;

                                                if (!string.IsNullOrEmpty(factorConv))
                                                {
                                                    factorConversion = float.Parse(factorConv);
                                                }
                                            }

                                            if (propTipo.FirstPropertyValue.Value == "Alto" || propTipo.FirstPropertyValue.Value == "High/Height")
                                            {
                                                float altoFloat = float.Parse(propValor.FirstPropertyValue.Value) / factorConversion;
                                                alto = altoFloat.ToString();
                                            }
                                            else if (propTipo.FirstPropertyValue.Value == "Ancho" || propTipo.FirstPropertyValue.Value == "Width")
                                            {
                                                float anchoFloat = float.Parse(propValor.FirstPropertyValue.Value) / factorConversion;
                                                ancho = anchoFloat.ToString();
                                            }
                                            else if (propTipo.FirstPropertyValue.Value == "Fondo" || propTipo.FirstPropertyValue.Value == "Base/bottom")
                                            {
                                                float profundidadFloat = float.Parse(propValor.FirstPropertyValue.Value) / factorConversion;
                                                profundidad = profundidadFloat.ToString();
                                            }
                                        }
                                    }

                                    // Dimensiones
                                    if (!string.IsNullOrEmpty(alto) && !string.IsNullOrEmpty(ancho) && !string.IsNullOrEmpty(unidadMedida))
                                    {
                                        formatoFisico += ", " + alto + " x " + ancho + " " + unidadMedida;
                                    }
                                }


                                string fecha = propObraInterna.FirstPropertyValue.RelatedEntity.GetFirstValuePropertyByPath("http://museodelprado.es/ontologia/edate.owl#textDate");
                                string procedencia = "Madrid, Museo Nacional del Prado";

                                string ubicacionObra = propObraInterna.FirstPropertyValue.RelatedEntity.GetFirstValuePropertyByPath("http://www.cidoc-crm.org/cidoc-crm#p55_has_current_location");
                                string salaObra = propObraInterna.FirstPropertyValue.RelatedEntity.GetFirstValuePropertyByPath("http://museodelprado.es/ontologia/ecidoc.owl#p55_has_current_location_type");

                                obra_descripcion = "<p>";
                                if (autores.Count() > 0)
                                {
                                    int numAutor = 0;
                                    foreach (string autor in autores)
                                    {
                                        numAutor++;
                                        if (numAutor > 1)
                                        {
                                            obra_descripcion += "; ";
                                        }
                                        obra_descripcion += autor;
                                    }
                                    obra_descripcion += "<br>";
                                }
                                if (!string.IsNullOrEmpty(formatoFisico))
                                {
                                    obra_descripcion += formatoFisico + "<br>";
                                }
                                if (!string.IsNullOrEmpty(fecha))
                                {
                                    obra_descripcion += fecha + "<br>";
                                }
                                if (!string.IsNullOrEmpty(procedencia))
                                {
                                    obra_descripcion += procedencia + "<br>";
                                }

                                if (!string.IsNullOrEmpty(salaObra))
                                {
                                    if (salaObra.Contains("Expuesto"))
                                    {
                                        if (!string.IsNullOrEmpty(ubicacionObra))
                                        {
                                            obra_descripcion += ubicacionObra;
                                        }
                                    }
                                }

                                obra_descripcion += "</p>";

                                obra_imagen = propObraInterna.FirstPropertyValue.RelatedEntity.GetFirstValuePropertyByPath("http://museodelprado.es/ontologia/pradomuseum.owl#main_image");

                                if (!string.IsNullOrEmpty(numeroCatalogoObraRelacionada))
                                {
                                    expObrasJsonLD.Add("artEdition", new List<object>(new string[] { numeroCatalogoObraRelacionada }));
                                }

                                if (!string.IsNullOrEmpty(tecnicaObraRelacionada))
                                {
                                    expObrasJsonLD.Add("artform", new List<object>());

                                    foreach (string tecIndi in tecnicaObraRelacionada.Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries))
                                    {
                                        ((List<object>)expObrasJsonLD["artform"]).Add(tecIndi.Trim());
                                    }
                                }

                                if (!string.IsNullOrEmpty(soporteObraRelacionada))
                                {
                                    expObrasJsonLD.Add("artworkSurface", new List<object>());

                                    foreach (string sopIndi in soporteObraRelacionada.Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries))
                                    {
                                        ((List<object>)expObrasJsonLD["artworkSurface"]).Add(sopIndi.Trim());
                                    }
                                }

                                if (!string.IsNullOrEmpty(materiaObraRelacionada))
                                {
                                    expObrasJsonLD.Add("artMedium", new List<object>());

                                    foreach (string matIndi in materiaObraRelacionada.Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries))
                                    {
                                        ((List<object>)expObrasJsonLD["artMedium"]).Add(matIndi.Trim());
                                    }
                                }

                                if (!string.IsNullOrEmpty(alto))
                                {
                                    Dictionary<string, List<object>> height = new Dictionary<string, List<object>>();
                                    height.Add("@type", new List<object>(new string[] { "QuantitativeValue" }));
                                    height.Add("value", new List<object>(new string[] { alto }));

                                    if (!string.IsNullOrEmpty(unidadMedida))
                                    {
                                        height.Add("unitText", new List<object>(new string[] { unidadMedida }));
                                    }

                                    expObrasJsonLD.Add("height", new List<object>(new object[] { height }));
                                }

                                if (!string.IsNullOrEmpty(ancho))
                                {
                                    Dictionary<string, List<object>> width = new Dictionary<string, List<object>>();
                                    width.Add("@type", new List<object>(new string[] { "QuantitativeValue" }));
                                    width.Add("value", new List<object>(new string[] { ancho }));

                                    if (!string.IsNullOrEmpty(unidadMedida))
                                    {
                                        width.Add("unitText", new List<object>(new string[] { unidadMedida }));
                                    }

                                    expObrasJsonLD.Add("width", new List<object>(new object[] { width }));
                                }

                                if (!string.IsNullOrEmpty(profundidad))
                                {
                                    Dictionary<string, List<object>> depth = new Dictionary<string, List<object>>();
                                    depth.Add("@type", new List<object>(new string[] { "QuantitativeValue" }));
                                    depth.Add("value", new List<object>(new string[] { profundidad }));

                                    if (!string.IsNullOrEmpty(unidadMedida))
                                    {
                                        depth.Add("unitText", new List<object>(new string[] { unidadMedida }));
                                    }

                                    expObrasJsonLD.Add("depth", new List<object>(new object[] { depth }));
                                }
                            }
                            else
                            {
                                //Obra externa
                                propObraExterna = obraExposicion.RelatedEntity.GetPropertyByPath("http://museodelprado.es/ontologia/pradomuseum.owl#relatedExternalArtWork");

                                if (propObraExterna != null && propObraExterna.PropertyValues != null && propObraExterna.PropertyValues.Count() > 0)
                                {
                                    obra_titulo = propObraExterna.FirstPropertyValue.RelatedEntity.GetFirstValuePropertyByPath("http://www.cidoc-crm.org/cidoc-crm#p3_has_note");
                                    obra_descripcion = "<p>" + Html.DeleteFirstParagraph(propObraExterna.FirstPropertyValue.RelatedEntity.GetFirstValuePropertyByPath("http://museodelprado.es/ontologia/ecidoc.owl#p3_has_note")) + "</p>";
                                    obra_imagen = propObraExterna.FirstPropertyValue.RelatedEntity.GetFirstValuePropertyByPath("http://museodelprado.es/ontologia/pradomuseum.owl#artWorkImage");
                                }
                            }

                            if (!string.IsNullOrEmpty(obra_titulo))
                            {
                                expObrasJsonLD.Add("name", new List<object>(new string[] { obra_titulo }));
                            }

                            if (!string.IsNullOrEmpty(obra_descripcion))
                            {
                                expObrasJsonLD.Add("description", new List<object>(new string[] { obra_descripcion }));
                            }

                            if (!string.IsNullOrEmpty(obra_imagen))
                            {
                                expObrasJsonLD.Add("image", new List<object>(new string[] { ViewBag.BaseUrlContent + "/" + obra_imagen }));
                            }

                            if (!string.IsNullOrEmpty(obra_imagen))
                            {
                                obra_imagen = ViewBag.BaseUrlContent + "/" + obra_imagen;
                            }
                            ordenPintar++;

                            //Declarar RDFa aqu√≠

                            string rdfaPropOrdenObra = string.Empty;
                            string rdfaPropObraRelacionada = string.Empty;
                            string rdfaEntidadObraRelacionada = string.Empty;
                            string rdfaPropTituloObra = string.Empty;
                            string rdfaPropDescripcionObra = string.Empty;
                            string rdfaPropImagenObra = string.Empty;

                            if (propObraInterna != null && propObraInterna.PropertyValues != null && propObraInterna.PropertyValues.Count() > 0)
                            {
                                rdfaPropObraRelacionada = semCmsModel.GetRDFAProperty(propObraInterna);
                                rdfaEntidadObraRelacionada = semCmsModel.GetRDFAEntity(propObraInterna.FirstPropertyValue.RelatedEntity);
                                rdfaPropTituloObra = semCmsModel.GetRDFAProperty(propObraInterna.FirstPropertyValue.RelatedEntity.GetPropertyByPath("http://museodelprado.es/ontologia/ecidoc.owl#p102_E35_p3_has_title"));
                            }
                            else if (propObraExterna != null && propObraExterna.PropertyValues != null && propObraExterna.PropertyValues.Count() > 0)
                            {
                                rdfaPropObraRelacionada = semCmsModel.GetRDFAProperty(propObraExterna);
                                rdfaEntidadObraRelacionada = semCmsModel.GetRDFAEntity(propObraExterna.FirstPropertyValue.RelatedEntity);
                                rdfaPropTituloObra = semCmsModel.GetRDFAProperty(propObraExterna.FirstPropertyValue.RelatedEntity.GetPropertyByPath("http://www.cidoc-crm.org/cidoc-crm#p3_has_note"));
                                rdfaPropDescripcionObra = semCmsModel.GetRDFAProperty(propObraExterna.FirstPropertyValue.RelatedEntity.GetPropertyByPath("http://museodelprado.es/ontologia/ecidoc.owl#p3_has_note"));
                                rdfaPropImagenObra = semCmsModel.GetRDFAProperty(propObraExterna.FirstPropertyValue.RelatedEntity.GetPropertyByPath("http://museodelprado.es/ontologia/pradomuseum.owl#artWorkImage"));
                            }

                            //La siguiente clase la utilizaremos para que solo se vean las im√°genes de los que tienen imagen
                            string claseItem = "item";
                            string src = "src=\"" + Html.ObtenerImagenConTamano(obra_imagen, 832) + "\"";
                            if (string.IsNullOrEmpty(obra_imagen))
                            {
                                claseItem = "itemOculto oculto";
                            }
                            else
                            {
                                numObraMosaico++;
                                paginaMosaicoObras = ((numObraMosaico - 1) / 9) + 1;
                                if (paginaMosaicoObras > 1)
                                {
                                    claseItem = "itemPaginado oculto";
                                    src = "srcAux=\"" + Html.ObtenerImagenConTamano(obra_imagen, 832) + "\"";
                                }
                            }

                            <div class="@claseItem" pagina="@paginaMosaicoObras" @Html.Raw(semCmsModel.GetRDFAProperty(obraExposicion.Property))>
                                <div @Html.Raw(semCmsModel.GetRDFAEntity(obraExposicion.RelatedEntity))>
                                    <div @Html.Raw(rdfaPropObraRelacionada)>
                                        <figure @Html.Raw(rdfaEntidadObraRelacionada)>
                                            @if (string.IsNullOrEmpty(obra_enlace))
                                            {
                                                if (!string.IsNullOrEmpty(obra_imagen))
                                                {
                                                    <span @Html.Raw(rdfaPropImagenObra)>
                                                        <img alt="@obra_titulo" @Html.Raw(src) />
                                                    </span>
                                                }

                                                if (obra_orden != null)
                                                {
                                                    <div class="num" @Html.Raw(semCmsModel.GetRDFAProperty(obraExposicion.RelatedEntity.GetPropertyByPath("http://museodelprado.es/ontologia/pradomuseum.owl#artWorkOrder")))>@obra_orden</div>
                                                }

                                                <figcaption class="textos">
                                                    <strong @Html.Raw(rdfaPropTituloObra)>@obra_titulo</strong>
                                                    <span @Html.Raw(rdfaPropDescripcionObra)>@Html.Raw(obra_descripcion)</span>
                                                </figcaption>
                                            }
                                            else
                                            {
                                                <a href="@obra_enlace">
                                                    @if (!string.IsNullOrEmpty(obra_imagen))
                                                    {
                                                        <span @Html.Raw(rdfaPropImagenObra)>
                                                            <img alt="@obra_titulo" @Html.Raw(src) />
                                                        </span>
                                                    }
                                                    @if (obra_orden != null)
                                                    {
                                                        <div class="num" @Html.Raw(semCmsModel.GetRDFAProperty(obraExposicion.RelatedEntity.GetPropertyByPath("http://museodelprado.es/ontologia/pradomuseum.owl#artWorkOrder")))>@obra_orden</div>
                                                    }
                                                    <figcaption class="textos">
                                                        <strong @Html.Raw(rdfaPropTituloObra)>@obra_titulo</strong>
                                                        <span @Html.Raw(rdfaPropDescripcionObra)>@Html.Raw(obra_descripcion)</span>
                                                    </figcaption>
                                                </a>
                                            }
                                        </figure>
                                    </div>
                                </div>
                            </div>
                        }
                    }
                </div>
                @if (paginaMosaicoObras > 1)
                {
                    <div class="ver-mas-general" pagina="2"><a>@Html.GetText("COMBUSQUEDAAVANZADA", "VERMAS")</a></div>
                }
            </div>
        </section>
        <section class="vista-lista mostrable oculto"></section>
        <section class="mostrable oculto big-galeria"></section>
    }
    <!-- CAT√ÅLOGO -->
    @if (propCatalogo != null && propCatalogo.PropertyValues != null && propCatalogo.PropertyValues.Count() > 0)
    {
        SemanticPropertyModel.PropertyValue catalogo = propCatalogo.FirstPropertyValue;
        <section class="catalogo" id="catalogo" @Html.Raw(semCmsModel.GetRDFAProperty(propCatalogo))>
            <div @Html.Raw(semCmsModel.GetRDFAEntity(propCatalogo.FirstPropertyValue.RelatedEntity))>
                <h2 class="heading"><span>@Html.Translate("CATALOGO")</span></h2>
                <div class="ca-venta">
                    <div class="venta-item">
                        @if (!string.IsNullOrEmpty(ilustracionCatalogo)) // || !string.IsNullOrEmpty(precioCatalogo))
                        {
                            <figure class="">
                                <img class="" src="@ilustracionCatalogo" alt="@tituloCatalogo" />
                            </figure>
                        }
                    </div>
                    @if (!string.IsNullOrEmpty(comprarCatalogo))
                    {
                        <div class="comprar-entradas" @Html.Raw(semCmsModel.GetRDFAEntity(propCatalogo.FirstPropertyValue.RelatedEntity))>
                            <a href="@comprarCatalogo" @Html.Raw(semCmsModel.GetRDFAProperty(catalogo.RelatedEntity.GetPropertyByPath("http://museodelprado.es/ontologia/efrbrer.owl#has_buy_link")))>@Html.Translate("COMPRARCATALOGO")</a>
                        </div>
                    }
                </div>
                <div class="ca-desc" @Html.Raw(semCmsModel.GetRDFAProperty(catalogo.RelatedEntity.GetPropertyByPath("http://museodelprado.es/ontologia/efrbrer.owl#has_description")))>@Html.Raw(descripcionCatalogo)</div>
                <div class="ca-auxiliar">
                    <div class="ficha-tecnica">
                        <dl>
                            @if (!string.IsNullOrEmpty(titularTituloCatalogo) && !string.IsNullOrEmpty(tituloCatalogo))
                            {
                                //en:Title
                                //es:T√≠tulo
                                <dt>@Html.Translate("TITULO")</dt>
                                <dd @Html.Raw(semCmsModel.GetRDFAProperty(catalogo.RelatedEntity.GetPropertyByPath("http://purl.org/vocab/frbr/core#P3020_has_title_of_the_manifestation")))>@Html.Raw(tituloCatalogo)</dd>
                            }
                            @if (!string.IsNullOrEmpty(paginasCatalogo))
                            {
                                <dt>@Html.Translate("PAGINAS")</dt>
                                <dd @Html.Raw(semCmsModel.GetRDFAProperty(catalogo.RelatedEntity.GetPropertyByPath("http://purl.org/vocab/frbr/core#P3024_has_extent_of_the_carrier")))>@paginasCatalogo</dd>
                            }
                            @if (!string.IsNullOrEmpty(dimensionesCatalogo))
                            {
                                <dt>@Html.Translate("MEDIDAS")</dt>
                                <dd @Html.Raw(semCmsModel.GetRDFAProperty(catalogo.RelatedEntity.GetPropertyByPath("http://purl.org/vocab/frbr/core#P3027_has_dimensions_of_the_carrier")))>@dimensionesCatalogo</dd>
                            }
                            @if (!string.IsNullOrEmpty(titularEncuadernacionCatalogo) && !string.IsNullOrEmpty(encuadernacionCatalogo))
                            {
                                //EN:Binding
                                //ES:Encuadernaci√≥n
                                <dt>@Html.Translate("ENCUADERNACION")</dt>
                                <dd @Html.Raw(semCmsModel.GetRDFAProperty(catalogo.RelatedEntity.GetPropertyByPath("http://museodelprado.es/ontologia/efrbrer.owl#has_binding")))>@encuadernacionCatalogo</dd>
                            }
                            @if (!string.IsNullOrEmpty(titularIdiomaCatalogo) && !string.IsNullOrEmpty(idiomaCatalogo))
                            {
                                //EN:Language
                                //ES:Idioma
                                <dt>@Html.Translate("IDIOMA")</dt>
                                <dd @Html.Raw(semCmsModel.GetRDFAProperty(catalogo.RelatedEntity.GetPropertyByPath("http://purl.org/vocab/frbr/core#P3011_has_language_of_expression")))>@idiomaCatalogo</dd>
                            }
                            @if (!string.IsNullOrEmpty(titularIsbnCatalogo) && propIsbnCatalogo != null && propIsbnCatalogo.PropertyValues != null && propIsbnCatalogo.PropertyValues.Count() > 0)
                            {
                                <dt>@Html.Translate("ISBNCATALOGO")</dt>

                                string isbns = string.Empty;

                                foreach (SemanticPropertyModel.PropertyValue isbn in propIsbnCatalogo.PropertyValues)
                                {
                                    if (!string.IsNullOrEmpty(isbn.Value))
                                    {
                                        string htmlIsbn = "<span " + semCmsModel.GetRDFAProperty(isbn.Property) + ">" + isbn.Value + "</span></br>";
                                        isbns = string.Concat(isbns, htmlIsbn);
                                    }
                                }

                                if (!string.IsNullOrEmpty(isbns))
                                {
                                    <dd>@Html.Raw(isbns.Remove(isbns.LastIndexOf("</br>")))</dd>
                                }
                            }
                            @if (!string.IsNullOrEmpty(titularAnioCatalogo) && !string.IsNullOrEmpty(anioCatalogo))
                            {
                                //EN:Year
                                //ES:A√±o
                                <dt>@Html.Translate("ANIO")</dt>
                                <dd @Html.Raw(semCmsModel.GetRDFAProperty(catalogo.RelatedEntity.GetPropertyByPath("http://museodelprado.es/ontologia/efrbrer.owl#P3055_has_date_of_publication_or_distribution_year")))>@anioCatalogo</dd>
                            }
                            @if (!string.IsNullOrEmpty(titularAutorCatalogo) && !string.IsNullOrEmpty(autorCatalogo))
                            {
                                //EN:Author
                                //ES:Autor
                                <dt>@Html.Translate("AUTOR")</dt>
                                <dd @Html.Raw(semCmsModel.GetRDFAProperty(catalogo.RelatedEntity.GetPropertyByPath("http://purl.org/vocab/frbr/core#P2007_is_created_by")))>@autorCatalogo</dd>
                            }
                            @if (!string.IsNullOrEmpty(titularCoordinacionCatalogo) && !string.IsNullOrEmpty(coordinacionCatalogo))
                            {
                                //EN:Coordinator
                                //ES:Coordinador
                                <dt>@Html.Translate("COORDINADOR")</dt>
                                <dd @Html.Raw(semCmsModel.GetRDFAProperty(catalogo.RelatedEntity.GetPropertyByPath("http://museodelprado.es/ontologia/efrbrer.owl#has_coordinator")))>@coordinacionCatalogo</dd>
                            }
                            @if (!string.IsNullOrEmpty(titularCubiertaCatalogo) && !string.IsNullOrEmpty(cubiertaCatalogo))
                            {
                                //EN:Cover
                                //ES:Cubierta
                                <dt>@Html.Translate("CUBIERTA")</dt>
                                <dd @Html.Raw(semCmsModel.GetRDFAProperty(catalogo.RelatedEntity.GetPropertyByPath("http://museodelprado.es/ontologia/efrbrer.owl#has_cover")))>@cubiertaCatalogo</dd>
                            }
                            @if (!string.IsNullOrEmpty(titularDepositoLegalCatalogo) && !string.IsNullOrEmpty(depositoLegalCatalogo))
                            {
                                //EN:Legal deposit
                                //ES:Dep√≥sito legal
                                <dt>@Html.Translate("DEPOSITOLEGAL")</dt>
                                <dd @Html.Raw(semCmsModel.GetRDFAProperty(catalogo.RelatedEntity.GetPropertyByPath("http://museodelprado.es/ontologia/efrbrer.owl#P3028_has_manifestation_identifier_legal_deposit")))>@depositoLegalCatalogo</dd>
                            }
                            @if (!string.IsNullOrEmpty(titularDescargarCatalogo) && !string.IsNullOrEmpty(descargarCatalogo))
                            {
                                //EN:Download
                                //ES:Descargar
                                <dt>@Html.Translate("DESCARGAR")</dt>
                                <dd @Html.Raw(semCmsModel.GetRDFAProperty(catalogo.RelatedEntity.GetPropertyByPath("http://museodelprado.es/ontologia/efrbrer.owl#has_download_link")))>@descargarCatalogo</dd>
                            }
                            @if (!string.IsNullOrEmpty(titularDisenioCatalogo) && !string.IsNullOrEmpty(disenioCatalogo))
                            {
                                //EN:Design
                                //ES:Dise√±o
                                <dt>@Html.Translate("DISENIO")</dt>
                                <dd @Html.Raw(semCmsModel.GetRDFAProperty(catalogo.RelatedEntity.GetPropertyByPath("http://museodelprado.es/ontologia/efrbrer.owl#has_design")))>@disenioCatalogo</dd>
                            }
                            @if (!string.IsNullOrEmpty(titularEditorCatalogo) && !string.IsNullOrEmpty(editorCatalogo))
                            {
                                //EN:Editor
                                //ES:Editor
                                <dt>@Html.Translate("EDITOR")</dt>
                                <dd @Html.Raw(semCmsModel.GetRDFAProperty(catalogo.RelatedEntity.GetPropertyByPath("http://purl.org/vocab/frbr/core#P2015_is_produced_by_corporate_body")))>@editorCatalogo</dd>
                            }
                            @if (!string.IsNullOrEmpty(titularEdicionCatalogo) && !string.IsNullOrEmpty(edicionCatalogo))
                            {
                                //EN:Edition
                                //ES:Edici√≥n
                                <dt>@Html.Translate("EDICION")</dt>
                                <dd @Html.Raw(semCmsModel.GetRDFAProperty(catalogo.RelatedEntity.GetPropertyByPath("http://museodelprado.es/ontologia/efrbrer.owl#has_edition")))>@edicionCatalogo</dd>
                            }
                            @if (!string.IsNullOrEmpty(titularFechaCatalogo) && !string.IsNullOrEmpty(fechaCatalogo))
                            {
                                //EN:Date
                                //ES:Fecha
                                <dt>@Html.Translate("FECHA")</dt>
                                <dd @Html.Raw(semCmsModel.GetRDFAProperty(catalogo.RelatedEntity.GetPropertyByPath("http://purl.org/vocab/frbr/core#P3055_has_date_of_publication_or_distribution")))>@fechaCatalogo</dd>
                            }
                            @if (!string.IsNullOrEmpty(titularFotomecanicaCatalogo) && !string.IsNullOrEmpty(fotomecanicaCatalogo))
                            {
                                //EN:Photomechanical
                                //ES:Fotomec√°nica
                                <dt>@Html.Translate("FOTOMECANICA")</dt>
                                <dd @Html.Raw(semCmsModel.GetRDFAProperty(catalogo.RelatedEntity.GetPropertyByPath("http://museodelprado.es/ontologia/pradomuseum.owl#photomechanical")))>@fotomecanicaCatalogo</dd>
                            }
                            @if (!string.IsNullOrEmpty(titularImpresionCatalogo) && !string.IsNullOrEmpty(impresionCatalogo))
                            {
                                //EN:Print
                                //ES:Impresi√≥n
                                <dt>@Html.Translate("IMPRESION")</dt>
                                <dd @Html.Raw(semCmsModel.GetRDFAProperty(catalogo.RelatedEntity.GetPropertyByPath("http://museodelprado.es/ontologia/efrbrer.owl#has_print")))>@impresionCatalogo</dd>
                            }
                            @if (!string.IsNullOrEmpty(titularIndiceCatalogo) && !string.IsNullOrEmpty(indiceCatalogo))
                            {
                                //EN:Index
                                //ES:√çndice
                                <dt>@Html.Translate("INDICE")</dt>
                                <dd @Html.Raw(semCmsModel.GetRDFAProperty(catalogo.RelatedEntity.GetPropertyByPath("http://museodelprado.es/ontologia/efrbrer.owl#has_index")))>@indiceCatalogo</dd>
                            }
                            @if (!string.IsNullOrEmpty(titularNipoCatalogo) && !string.IsNullOrEmpty(nipoCatalogo))
                            {
                                //EN:NIPO
                                //ES:NIPO
                                <dt>@Html.Translate("NIPO")</dt>
                                <dd @Html.Raw(semCmsModel.GetRDFAProperty(catalogo.RelatedEntity.GetPropertyByPath("http://museodelprado.es/ontologia/efrbrer.owl#P3028_has_manifestation_identifier_nipo")))>@nipoCatalogo</dd>
                            }
                            @if (!string.IsNullOrEmpty(titularPesoCatalogo) && !string.IsNullOrEmpty(pesoCatalogo))
                            {
                                //EN:Weight
                                //ES:Peso
                                <dt>@Html.Translate("PESO")</dt>
                                <dd @Html.Raw(semCmsModel.GetRDFAProperty(catalogo.RelatedEntity.GetPropertyByPath("http://museodelprado.es/ontologia/efrbrer.owl#P3024_has_extent_of_the_carrier_weight")))>@pesoCatalogo</dd>
                            }
                            @if (!string.IsNullOrEmpty(titularProduccionCatalogo) && !string.IsNullOrEmpty(produccionCatalogo))
                            {
                                //EN:Production
                                //ES:Producci√≥n
                                <dt>@Html.Translate("PRODUCCION")</dt>
                                <dd @Html.Raw(semCmsModel.GetRDFAProperty(catalogo.RelatedEntity.GetPropertyByPath("http://purl.org/vocab/frbr/core#P3054_has_fabricator_or_manufacturer")))>@produccionCatalogo</dd>
                            }
                            @if (!string.IsNullOrEmpty(titularRecopilatorioCatalogo) && !string.IsNullOrEmpty(recopilatorioCatalogo))
                            {
                                //EN:Compilation
                                //ES:Recopilatorio
                                <dt>@Html.Translate("RECOPILATORIO")</dt>
                                <dd @Html.Raw(semCmsModel.GetRDFAProperty(catalogo.RelatedEntity.GetPropertyByPath("http://museodelprado.es/ontologia/efrbrer.owl#has_compilation")))>@recopilatorioCatalogo</dd>
                            }
                            @if (!string.IsNullOrEmpty(titularTraduccionCatalogo) && !string.IsNullOrEmpty(traduccionCatalogo))
                            {
                                //EN:Traslation
                                //ES:Traducci√≥n
                                <dt>@Html.Translate("TRADUCCION")</dt>
                                <dd @Html.Raw(semCmsModel.GetRDFAProperty(catalogo.RelatedEntity.GetPropertyByPath("http://museodelprado.es/ontologia/efrbrer.owl#has_translator")))>@traduccionCatalogo</dd>
                            }
                        </dl>
                    </div>
                </div>
            </div>
        </section>
    }
    <!-- ACTIVIDADES -->
    @*
        1) Inscripci√≥n abierta
        2) Inscripci√≥n xx-xx-xxxx
        3) Pr√≥xima inscripci√≥n ÔÉ† Va a tener inscripci√≥n pero a√∫n no sabemos la fecha (M√ÅS DE DOS A√ëOS)
        4) Inscripci√≥n cerrada ÔÉ† Cuando la actividad no ha empezado pero s√≠ ha terminado la inscripci√≥n.
        5) En curso (sin etiqueta de estado).
        6) Futuras sin fecha de inscripci√≥n (sin etiqueta de estado).
        7) Actividades sin fecha (sin etiqueta de estado).
        8) Pasadas (Mantener la clase ‚Äòold‚Äô).*@
    @{
        Dictionary<int, List<RelatedActivity>> listaActividadesHijas = new Dictionary<int, List<RelatedActivity>>();
        listaActividadesHijas.Add(1, new List<RelatedActivity>());
        listaActividadesHijas.Add(2, new List<RelatedActivity>());
        listaActividadesHijas.Add(3, new List<RelatedActivity>());
        listaActividadesHijas.Add(4, new List<RelatedActivity>());
        listaActividadesHijas.Add(5, new List<RelatedActivity>());
        listaActividadesHijas.Add(6, new List<RelatedActivity>());
        listaActividadesHijas.Add(7, new List<RelatedActivity>());
        listaActividadesHijas.Add(8, new List<RelatedActivity>());



        if (actividades != null && actividades.Count > 0)
        {
            foreach (RelatedActivity relatedActivity in actividades)
            {
                int estado = 0;
                if (relatedActivity.registrationDateStart.HasValue && relatedActivity.registrationDateEnd.HasValue && relatedActivity.registrationDateStart.Value < DateTime.Now && relatedActivity.registrationDateEnd.Value > DateTime.Now)
                {
                    estado = 1;
                }
                else if (relatedActivity.registrationDateStart.HasValue && relatedActivity.registrationDateStart.Value > DateTime.Now.AddYears(2))
                {
                    estado = 3;
                }
                else if (relatedActivity.registrationDateStart.HasValue && relatedActivity.registrationDateStart.Value > DateTime.Now)
                {
                    estado = 2;
                }
                else if (relatedActivity.registrationDateEnd.HasValue && relatedActivity.activityDateStart.HasValue && relatedActivity.registrationDateEnd.Value < DateTime.Now && relatedActivity.activityDateStart.Value > DateTime.Now)
                {
                    estado = 4;
                }
                else if (relatedActivity.activityDateStart.HasValue && relatedActivity.activityDateEnd.HasValue && relatedActivity.activityDateStart.Value < DateTime.Now && relatedActivity.activityDateEnd.Value > DateTime.Now)
                {
                    estado = 5;
                }
                else if (relatedActivity.activityDateStart.HasValue && !relatedActivity.registrationDateStart.HasValue && relatedActivity.activityDateStart.Value > DateTime.Now)
                {
                    estado = 6;
                }
                else if (!relatedActivity.activityDateStart.HasValue)
                {
                    estado = 7;
                }
                else if (relatedActivity.activityDateEnd.HasValue && relatedActivity.activityDateEnd.Value < DateTime.Now)
                {
                    estado = 8;
                }
                listaActividadesHijas[estado].Add(relatedActivity);
            }

            <section class="programas-actividades" id="actividades">
                <h2 class="heading"><span>@Html.Translate("ACTIVIDADES")</span></h2>
                <div class="items">
                    @foreach (int estadoInt in listaActividadesHijas.Keys)
                    {
                        foreach (RelatedActivity relatedActivity in listaActividadesHijas[estadoInt])
                        {
                            string estado = "";
                            string clase = "item";
                            switch (estadoInt)
                            {
                                case 1:
                                    if (!string.IsNullOrEmpty(relatedActivity.ticketUrl))
                                    {
                                        estado = Html.Translate("VENTADEENTRADAS");
                                    }
                                    else
                                    {
                                        estado = Html.Translate("INSCRIPCIONABIERTA");
                                    }
                                    break;
                                case 2:
                                    if (!string.IsNullOrEmpty(relatedActivity.ticketUrl))
                                    {
                                        estado = Html.Translate("ENTRADAS") + " " + relatedActivity.registrationDateStart.Value.ToString("d");
                                    }
                                    else
                                    {
                                        estado = Html.Translate("INSCRIPCION") + " " + relatedActivity.registrationDateStart.Value.ToString("d");
                                    }
                                    break;
                                case 3:
                                    estado = Html.Translate("PROXIMAINSCRIPCION");
                                    break;
                                case 4:
                                    estado = Html.Translate("INSCRIPCIONCERRADA");
                                    break;
                                case 8:
                                    //clase += " old";
                                    break;
                            }



                            <a href="@relatedActivity.url" class="@clase">
                                <figure>
                                    @if (!string.IsNullOrEmpty(estado))
                                    {
                                        <div class="tag">@estado</div>
                                    }
                                    <img src="@ViewBag.BaseURLContent/@relatedActivity.image" alt="">
                                    <figcaption>
                                        @if (relatedActivity.activityCategory != null && relatedActivity.activityCategory.Count > 0)
                                        {
                                            HashSet<string> categorias = new HashSet<string>();
                                            foreach (ActivityCategory activityCategoryInt in relatedActivity.activityCategory)
                                            {
                                                categorias.Add(activityCategoryInt.title);
                                            }
                                            foreach (string categoriaInt in categorias)
                                            {
                                                <strong class="categoria">@categoriaInt</strong>
                                            }
                                        }
                                        @if (relatedActivity.activityType != null)
                                        {
                                            <strong class="categoria">@relatedActivity.activityType.title</strong>
                                        }
                                        <h3>@Html.Raw(relatedActivity.title)</h3>
                                        <p>@relatedActivity.textDate</p>
                                    </figcaption>
                                </figure>
                            </a>}
                    }
                </div>
            </section>
        }

    }
    @*@if (actividades != null && actividades.PropertyValues.Count > 0)
        {
            <section class="actividades" id="actividades">
                <h1><span>@Html.Translate("ACTIVIDADES")</span></h1>
                <div class="act-menu">
                    <nav>
                        @{

                            System.Data.DataTable datatableActividades = new System.Data.DataTable("Actividades");
                            List<string> listadoTiposActividad = new List<string>();
                            datatableActividades.Columns.Add("Actividad");
                            datatableActividades.Columns["Actividad"].DataType = typeof(SemanticPropertyModel.PropertyValue);
                            datatableActividades.Columns.Add("Tipo");
                            datatableActividades.Columns.Add("Fecha");
                            datatableActividades.Columns["Fecha"].DataType = typeof(DateTime);


                            if (actividades != null && actividades.PropertyValues != null && actividades.PropertyValues.Count > 0)
                            {

                                foreach (SemanticPropertyModel.PropertyValue actividad in actividades.PropertyValues)
                                {
                                    string tipoActividad = actividad.RelatedEntity.GetFirstValuePropertyByPath("http://www.cidoc-crm.org/cidoc-crm#p2_has_type@@@http://museodelprado.es/ontologia/multilang-property.owl#textValue");

                                    string fechaInicioActividad = actividad.RelatedEntity.GetFirstValuePropertyByPath("http://museodelprado.es/ontologia/ecidoc.owl#p62_E52_p80_has_time-span");

                                    datatableActividades.Rows.Add(actividad, tipoActividad, Html.GetDate(fechaInicioActividad));
                                }
                            }


                            if (datatableActividades != null && datatableActividades.Rows.Count != 0)
                            {
                                <ul class="menu-normal">
                                    @{
                                        listadoTiposActividad = datatableActividades.AsEnumerable().Select(id => id.Field<string>("Tipo")).Distinct().ToList();

                                        listadoTiposActividad.Sort();

                                        foreach (string tipoActividad in listadoTiposActividad)
                                        {
                                            if (!string.IsNullOrEmpty(tipoActividad))
                                            {
                                                <li class="menu-@EliminarCaracteresEspeciales(tipoActividad)"><a href="#">@tipoActividad</a></li>
                                            }
                                        }
                                    }
                                </ul>
                                        }
                        }
                    </nav>
                </div>
                @{
                    if (listadoTiposActividad != null && listadoTiposActividad.Count > 0)
                    {
                        <div class="act-cont">
                            <!-- A√±ade en un bloque todas las actividades del mismo tipo -->
                            @foreach (string tipo in listadoTiposActividad)
                        {
                            string anio = string.Empty;
                            if (!string.IsNullOrEmpty(tipo))
                            {
                                    <div id="@EliminarCaracteresEspeciales(tipo)">
                                        <h2>@tipo</h2>
                                        @{
                                            // Recoge las actividades del tipo indicado, ordenadas por fecha.

                                            List<SemanticPropertyModel.PropertyValue> actividadesTipoOrdenadasPorFecha = datatableActividades.AsEnumerable().Where(id => id["Tipo"].Equals(tipo)).OrderBy(id => id["Fecha"]).Select(id => id.Field<SemanticPropertyModel.PropertyValue>("Actividad")).ToList();

                                        }
                                        <!-- Muestra las actividades del tipo ordenadas por fecha -->
                                        @if (actividadesTipoOrdenadasPorFecha != null && actividadesTipoOrdenadasPorFecha.Count != 0)
                                        {

                                            foreach (SemanticPropertyModel.PropertyValue actividad in actividadesTipoOrdenadasPorFecha)
                                            {
                                                SemanticPropertyModel propTituloAct = actividad.RelatedEntity.GetPropertyByPath("http://museodelprado.es/ontologia/ecidoc.owl#p1_E41_p102_has_title");
                                                string tituloActividad = string.Empty;
                                                string enlaceActividad = string.Empty;

                                                if (propTituloAct != null && propTituloAct.PropertyValues.Count > 0)
                                                {
                                                    tituloActividad = propTituloAct.PropertyValues[0].Value;
                                                    enlaceActividad = propTituloAct.PropertyValues[0].DownloadUrl;
                                                }

                                                string fechaInicioActividad = string.Empty;
                                                string diaInicioFormateado = string.Empty;
                                                string mesInicioFormateado = string.Empty;
                                                string aniooInicioFormateado = string.Empty;

                                                string fechaInicioAct = actividad.RelatedEntity.GetFirstValuePropertyByPath("http://museodelprado.es/ontologia/ecidoc.owl#p62_E52_p80_has_time-span");

                                                if (!string.IsNullOrEmpty(fechaInicioAct))
                                                {
                                                    fechaInicioActividad = ObtenerFechaCompletaFormateada(fechaInicioAct);
                                                    diaInicioFormateado = ObtenerFechaFormateada(fechaInicioAct, "dd", idiomaNav);

                                                    mesInicioFormateado = ObtenerFechaFormateada(fechaInicioAct, "MMM", idiomaNav);
                                                    if (!string.IsNullOrEmpty(mesInicioFormateado))
                                                    {
                                                        mesInicioFormateado = mesInicioFormateado.ToUpper();
                                                    }

                                                    aniooInicioFormateado = ObtenerFechaFormateada(fechaInicioAct, "yyyy", idiomaNav);

                                                }

                                                string horaInicioActividad = ObtenerFechaFormateada(fechaInicioAct, "HH:mm", idiomaNav);


                                                //fechaActividad contiene la fecha y hora de inicio del evento

                                                string fechaActividad = string.Empty;

                                                if (!string.IsNullOrEmpty(fechaInicioActividad) && !string.IsNullOrEmpty(horaInicioActividad) && !horaInicioActividad.Equals("00:00"))
                                                {
                                                    fechaActividad = string.Concat(fechaInicioActividad, ", ", horaInicioActividad, "h");
                                                }
                                                else if (!string.IsNullOrEmpty(fechaInicioActividad))
                                                {
                                                    fechaActividad = fechaInicioActividad;
                                                }
                                                else if (!string.IsNullOrEmpty(horaInicioActividad))
                                                {
                                                    fechaActividad = string.Concat(horaInicioActividad, "h");
                                                }

                                                string descripcionActividad = actividad.RelatedEntity.GetFirstValuePropertyByPath("http://www.cidoc-crm.org/cidoc-crm#p3_has_note");



                                                string tipoActividad = actividad.RelatedEntity.GetFirstValuePropertyByPath("http://www.cidoc-crm.org/cidoc-crm#p2_has_type@@@http://museodelprado.es/ontologia/multilang-property.owl#textValue");

                                                if (!string.IsNullOrEmpty(tipoActividad))
                                                {
                                                    tipoActividad = tipoActividad.ToLower();

                                                    // Mapeo del tipo de actividad con las clases CSS para el color del calendario
                                                    switch (tipoActividad)
                                                    {
                                                        case "acto oficial":
                                                            tipoActividad = "act-especiales";
                                                            break;
                                                        case "cine":
                                                            tipoActividad = "proyeccion";
                                                            break;
                                                        case "claves para ver la exposici√≥n":
                                                            tipoActividad = "itinerario";
                                                            break;
                                                        case "coloquio":
                                                            tipoActividad = "proyeccion";
                                                            break;
                                                        case "evento especial":
                                                            tipoActividad = "act-especiales";
                                                            break;
                                                        case "jornadas de puertas abiertas":
                                                            tipoActividad = "seminario";
                                                            break;
                                                        case "taller de lectura":
                                                            tipoActividad = "talleres";
                                                            break;
                                                        case "taller para adultos":
                                                            tipoActividad = "talleres";
                                                            break;
                                                        case "taller para j√≥venes":
                                                            tipoActividad = "talleres";
                                                            break;
                                                        case "taller para ni√±os":
                                                            tipoActividad = "talleres";
                                                            break;
                                                        case "tertulias de arte":
                                                            tipoActividad = "seminario";
                                                            break;
                                                        case "visita a la exposici√≥n":
                                                            tipoActividad = "seminario";
                                                            break;
                                                        case "visita para profesores":
                                                            tipoActividad = "seminario";
                                                            break;
                                                        case "cursos para profesores":
                                                            tipoActividad = "cursos-para-profesores";
                                                            break;
                                                    }
                                                }

                                                //A√±adimos clases en funcion de "amigos" "exclusivaamigos" y "accesible"
                                                string tipoActividadCss = "";
                                                string museumfriends = actividad.RelatedEntity.GetFirstValuePropertyByPath("http://museodelprado.es/ontologia/pradomuseum.owl#museumfriends");
                                                string museumfriendsexclusive = actividad.RelatedEntity.GetFirstValuePropertyByPath("http://museodelprado.es/ontologia/pradomuseum.owl#museumfriendsexclusive");
                                                string accessible = actividad.RelatedEntity.GetFirstValuePropertyByPath("http://museodelprado.es/ontologia/pradomuseum.owl#accessible");
                                                string lgtb = actividad.RelatedEntity.GetFirstValuePropertyByPath("http://museodelprado.es/ontologia/pradomuseum.owl#lgtb");
                                                if (!string.IsNullOrEmpty(museumfriends) && museumfriends.ToLower() == "true")
                                                {
                                                    tipoActividadCss += " amigos";
                                                }
                                                if (!string.IsNullOrEmpty(museumfriendsexclusive) && museumfriendsexclusive.ToLower() == "true")
                                                {
                                                    tipoActividadCss += " exclusivaamigos";
                                                }
                                                if (!string.IsNullOrEmpty(accessible) && accessible.ToLower() == "true")
                                                {
                                                    tipoActividadCss += " accesible";
                                                }
                                                if (!string.IsNullOrEmpty(lgtb) && lgtb.ToLower() == "true")
                                                {
                                                    tipoActividadCss += " lgtb";
                                                }

                                                //Agrupa las actividades por anio
                                                if (!anio.Equals(aniooInicioFormateado))
                                                {
                                                    <h3>@aniooInicioFormateado</h3>
                                                    anio = aniooInicioFormateado;
                                                }

                                                if (!string.IsNullOrEmpty(tituloActividad))
                                                {
                                                    <div @Html.Raw(semCmsModel.GetRDFAProperty(actividad.Property))>
                                                        <div @Html.Raw(semCmsModel.GetRDFAEntity(actividad.RelatedEntity))>
                                                            <a href="@enlaceActividad">
                                                                <div class="act-item @tipoActividad @tipoActividadCss">
                                                                    <div class="act-item-fecha">
                                                                        <dl>
                                                                            @if (!string.IsNullOrEmpty(mesInicioFormateado))
                                                                            {
                                                                                <dt>@mesInicioFormateado</dt>
                                                                            }
                                                                            @if (!string.IsNullOrEmpty(diaInicioFormateado))
                                                                            {
                                                                                <dd>@diaInicioFormateado</dd>
                                                                            }
                                                                        </dl>
                                                                    </div>
                                                                    <div class="act-item-act">
                                                                        <dl>
                                                                            @if (!string.IsNullOrEmpty(fechaActividad))
                                                                            {
                                                                                <dt>@fechaActividad</dt>
                                                                            }
                                                                            @if (!string.IsNullOrEmpty(tituloActividad))
                                                                            {
                                                                                <dd class="titulo" @Html.Raw(semCmsModel.GetRDFAProperty(propTituloAct))>@Html.Raw(tituloActividad)</dd>
                                                                            }
                                                                        </dl>
                                                                    </div>
                                                                </div>
                                                            </a>
                                                        </div>
                                                    </div>
                                                }
                                            }
                                        }
                                    </div>
                                                }
                                            }
                        </div>
                                            }
                }*@
</section>

@*RECURSOS*@
@if (resources != null && resources.Any())
{
    <section class="recursos" id="recursos">
        <h2 class="heading"><span>@Html.Translate("RECURSOSPARALAVISITA")</span></h2>
        @foreach (Resource resource in resources)
        {
            if (!string.IsNullOrEmpty(resource.title))
            {
                <h3>@Html.Raw(resource.title)</h3> }
            if (!string.IsNullOrEmpty(resource.description))
            {
                @Html.Raw(resource.description) }
            if (resource.files != null && resource.files.Count > 0)
            {
                <ul class="descargas">
                    @foreach (File file in resource.files)
                    {
                        <li>
                            @if (!string.IsNullOrEmpty(file.file) && !string.IsNullOrEmpty(file.fileName))
                            {
                                <a href="@file.file" class="boton-descarga"><span class="ico"></span>@file.extension</a>
                                <span><a href="@file.file">@Html.Raw(file.fileName)</a></span>}
                        </li>
                    }
                </ul>}
        }
    </section>

}

<div class="act-pie">
    @if (ventaDesactivada)
    {
        <div class="venta-entradas" style="cursor: default; pointer-events: none; background-color: #d38e8a; box-shadow: 2px 2px 5px 0px #1c1c1c2b;">
            <a href="#">@Html.Translate("VENTADEENTRADAS")</a>
        </div>
    }
    else if (!string.IsNullOrEmpty(tipoExposicion) && tipoExposicion.ToLowerInvariant() == "temporal")
    {
        <div class="venta-entradas">
            <a href="@Html.Translate("URL_COMPRAENTRADAS_TEMPORALES")" target="_blank">@Html.Translate("VENTADEENTRADAS")</a>
        </div>
    }
    else if (esEnElMuseo == "http://museodelprado.es/items/place_at_museum_in" || esEnElMuseo == "http://museodelprado.es/items/place_at_museum_itinerary")
    {
        <div class="venta-entradas">
            <a href="@Html.Translate("URL_COMPRAENTRADAS")" target="_blank">@Html.Translate("VENTADEENTRADAS")</a>
        </div>
    }
    else
    {
        <div class="venta-entradas" style="cursor: default; pointer-events: none; background-color: #d38e8a; box-shadow: 2px 2px 5px 0px #1c1c1c2b;">
            <a href="#">
                @Html.Translate("VENTADEENTRADAS")
            </a>
        </div>
    }
</div>

@*TIENDA EL PRADO*@
<section class="tienda-prado" id="tienda-prado">
    @{
        if (propProductosTienda != null && propProductosTienda.PropertyValues != null && propProductosTienda.PropertyValues.Count > 0)
        {
            <h2 class="heading">@Html.Translate("TIENDAPRADO")</h2>
            <div class="carousel inactive">
                @foreach (SemanticPropertyModel.PropertyValue productoTienda in propProductosTienda.PropertyValues)
                {
                    string nombreProd = productoTienda.RelatedEntity.GetFirstValuePropertyByPath("http://purl.org/goodrelations/v1#name");
                    string categoria = productoTienda.RelatedEntity.GetFirstValuePropertyByPath("http://purl.org/goodrelations/v1#category");
                    string oferta = productoTienda.RelatedEntity.GetFirstValuePropertyByPath("http://museodelprado.es/ontologia/egr.owl#offer");
                    string imagenProd = productoTienda.RelatedEntity.GetFirstValuePropertyByPath("http://museodelprado.es/ontologia/egr.owl#image");
                    string web = productoTienda.RelatedEntity.GetFirstValuePropertyByPath("http://museodelprado.es/ontologia/egr.owl#web");

                    <div class="slide">
                        <figure>
                            @if (!string.IsNullOrEmpty(web))
                            {
                                <a href="@web" target="_blank">
                                    @if (!string.IsNullOrEmpty(imagenProd) && !string.IsNullOrEmpty(nombreProd))
                                    {
                                        <img alt="@nombreProd" src="@ViewBag.BaseUrlContent/@imagenProd">
                                    }
                                </a>
                            }
                            <figcaption>
                                @if (!string.IsNullOrEmpty(oferta) && oferta.Equals("true"))
                                {
                                    <div class="offer">Oferta</div>
                                }
                                @if (!string.IsNullOrEmpty(categoria))
                                {
                                    <div class="media-type">@categoria</div>
                                }
                                @if (!string.IsNullOrEmpty(nombreProd) && !string.IsNullOrEmpty(web))
                                {
                                    <div class="name"><a href="@web" target="_blank">@nombreProd</a></div>
                                }
                            </figcaption>
                        </figure>
                    </div>

                }
            </div>
        }
    }
    <div class="impresion-a-la-carta">
        <div>
            <h2><a href="http://www.tiendaprado.com/toolprintondemand.php" target="_blank">@Html.Translate("IMPRESIONALACARTA")</a></h2>
            @Html.Raw(@Html.Translate("FICHA_RECURSO_OBRA_IMPRESION"))
        </div>
        <div>
            <h2><a href="mailto:bimnp@museodelpradodifusion.es" target="_blank">@Html.Translate("BANCODEIMAGENES")</a></h2>
            @Html.Raw(@Html.Translate("FICHA_RECURSO_OBRA_IMAGENES"))
        </div>
    </div>
</section>
    </section>
@{

    if (acciones.Edit)
    {
        <a class="botones-centrados bc-estandar hv-estandar" href="@Model.UrlEdit">
            <span class="txt">@Html.GetText("PERFILBASERECURSOSFICHA", "EDITAR")</span>
        </a>
    }

    if (acciones.Delete)
    {
        <a class="preguntarBorrar botones-centrados bc-estandar hv-estandar" onclick="$('.preguntarBorrar').hide();$('.confirmarBorrar').show();">
            <span class="txt">@Html.GetText("PERFILBASERECURSOSFICHA", "BORRAR")</span>
        </a>
        <div class="confirmarBorrar oculto">
            @Html.Translate("PREGUNTAESTASSEGURO")
            <a onclick="AccionRecurso_Eliminar_Aceptar('@fichaRecurso.ListActions.UrlDelete', '@fichaRecurso.Key')">@Html.GetText("COMMON", "SI")</a>
            <a onclick="$('.preguntarBorrar').show();$('.confirmarBorrar').hide();">@Html.GetText("COMMON", "NO")</a>
        </div>
    }
}
@functions
{
    public string EliminarCaracteresEspeciales(string pTexto)
    {
        return pTexto.Replace(" ", "-").Replace(".", "-").Replace("(", "-").Replace(")", "-").Replace(":", "-").Replace(",", "-").Replace("\"", "-").Replace("'", "-");
    }
}
@{
    Dictionary<string, List<object>> propsJsonLD = new Dictionary<string, List<object>>();
    propsJsonLD.Add("@context", new List<object>(new string[] { "http://schema.org" }));
    propsJsonLD.Add("@type", new List<object>(new string[] { "ExhibitionEvent" }));

    if (!string.IsNullOrEmpty(titulo))
    {
        propsJsonLD.Add("name", new List<object>(new string[] { titulo }));
    }

    if (!string.IsNullOrEmpty(descripcion))
    {
        propsJsonLD.Add("description", new List<object>(new string[] { descripcion }));
    }

    if (!string.IsNullOrEmpty(ciudad) || !string.IsNullOrEmpty(sede))
    {
        string location = null;

        if (!string.IsNullOrEmpty(ciudad) && !string.IsNullOrEmpty(sede))
        {
            location += ciudad + " " + sede;
        }
        else if (!string.IsNullOrEmpty(ciudad))
        {
            location = ciudad;
        }
        else
        {
            location = sede;
        }

        Dictionary<string, List<object>> place = new Dictionary<string, List<object>>();
        place.Add("@type", new List<object>(new string[] { "Place " }));
        place.Add("address", new List<object>(new string[] { location }));

        propsJsonLD.Add("location", new List<object>(new object[] { place }));
    }

    if (!string.IsNullOrEmpty(fechaInicio))
    {
        int[] fechIni = ObtenerFechaNormalizada(fechaInicio);
        string fechaIniText = fechIni[2] + "/" + fechIni[1] + "/" + fechIni[0];

        if (fechIni.Length > 4)
        {
            fechaIniText += " " + fechIni[4] + ":" + fechIni[5] + ":00";
        }

        propsJsonLD.Add("startDate", new List<object>(new string[] { fechaIniText }));
    }

    if (!string.IsNullOrEmpty(fechaFin))
    {
        int[] fechIni = ObtenerFechaNormalizada(fechaFin);
        string fechaIniText = fechIni[2] + "/" + fechIni[1] + "/" + fechIni[0];

        if (fechIni.Length > 4)
        {
            fechaIniText += " " + fechIni[4] + ":" + fechIni[5] + ":00";
        }

        propsJsonLD.Add("endDate", new List<object>(new string[] { fechaIniText }));
    }

    if (!string.IsNullOrEmpty(comisario))
    {
        Dictionary<string, List<object>> creator = new Dictionary<string, List<object>>();
        creator.Add("@type", new List<object>(new string[] { "Person" }));
        creator.Add("name", new List<object>(new string[] { comisario }));

        propsJsonLD.Add("attendee", new List<object>(new object[] { creator }));
    }

    if (exposicionObrasJsonLD.Count > 0)
    {
        propsJsonLD.Add("workFeatured", exposicionObrasJsonLD);
    }

    if (organizacionesJsonLD.Count > 0)
    {
        propsJsonLD.Add("organizer", organizacionesJsonLD);
    }
}
@Html.PartialView("_scriptJsonLD", propsJsonLD)

@functions
{
    public class RelatedActivity
    {
        public string title { get; set; }
        public List<ActivityCategory> activityCategory { get; set; }
        public ActivityType activityType { get; set; }
        public string url { get; set; }
        public string ticketUrl { get; set; }
        public string alternativeType { get; set; }
        public string textDate { get; set; }
        public string image { get; set; }
        public DateTime? publicationDate { get; set; }
        public DateTime? activityDateStart { get; set; }
        public DateTime? activityDateEnd { get; set; }
        public DateTime? registrationDateStart { get; set; }
        public DateTime? registrationDateEnd { get; set; }

    }
    public class ActivityCategory
    {
        public string title { get; set; }
        public string uri { get; set; }
        public ActivityCategory child { get; set; }
    }

    public class ActivityType
    {
        public string title { get; set; }
    }

    public static class Activity
    {
        public static List<RelatedActivity> GetActivities(SemanticResourceModel pSemCmsModel, ResourceModel pFichaDocumento, string pIdioma, IHtmlHelper pHtmlHelper)
        {
            List<RelatedActivity> relatedActivities = new List<RelatedActivity>();
            SemanticPropertyModel propRelatedChildrenActivity = pSemCmsModel.GetPropertyByPath("http://museodelprado.es/ontologia/pradomuseum.owl#i_relatedActivity");
            if (propRelatedChildrenActivity != null && propRelatedChildrenActivity.PropertyValues != null && propRelatedChildrenActivity.PropertyValues.Count > 0)
            {
                foreach (SemanticPropertyModel.PropertyValue propertyRelatedActivity in propRelatedChildrenActivity.PropertyValues)
                {
                    if (propertyRelatedActivity != null && propertyRelatedActivity.Value != null)
                    {
                        RelatedActivity relatedActivity = new RelatedActivity();
                        SemanticPropertyModel propTituloRelatedActivity = propertyRelatedActivity.RelatedEntity.GetPropertyByPath("http://museodelprado.es/ontologia/ecidoc.owl#p1_E41_p102_has_title");
                        if (propTituloRelatedActivity != null && propTituloRelatedActivity.FirstPropertyValue != null)
                        {
                            relatedActivity.title = propTituloRelatedActivity.FirstPropertyValue.Value;
                            relatedActivity.url = propTituloRelatedActivity.FirstPropertyValue.DownloadUrl;
                        }

                        SemanticPropertyModel propActivityPathInt = propertyRelatedActivity.RelatedEntity.GetPropertyByPath("http://www.cidoc-crm.org/cidoc-crm#p2_has_type");
                        relatedActivity.activityCategory = new List<ActivityCategory>();
                        if (propActivityPathInt != null && propActivityPathInt.PropertyValues != null && propActivityPathInt.PropertyValues.Count > 0)
                        {
                            foreach (SemanticPropertyModel.PropertyValue activityPath in propActivityPathInt.PropertyValues)
                            {
                                SemanticPropertyModel propActivityNode = activityPath.RelatedEntity.GetPropertyByPath("http://museodelprado.es/ontologia/pradomuseum.owl#activityNode");
                                if (propActivityNode != null && propActivityNode.PropertyValues != null && propActivityNode.PropertyValues.Count() > 0)
                                {
                                    ActivityCategory lastActivityCategory = null;
                                    int i = 0;
                                    foreach (SemanticPropertyModel.PropertyValue activityNode in propActivityNode.PropertyValues)
                                    {
                                        i++;
                                        ActivityCategory actividadActual = new ActivityCategory();
                                        actividadActual.title = activityNode.RelatedEntity.GetFirstValuePropertyByPath("http://www.w3.org/2008/05/skos#prefLabel");
                                        if (i == 1)
                                        {
                                            relatedActivity.activityCategory.Add(actividadActual);
                                        }
                                        else
                                        {
                                            lastActivityCategory.child = actividadActual;
                                        }
                                        lastActivityCategory = actividadActual;
                                    }
                                }
                            }
                        }

                        SemanticPropertyModel propActivityTypeInt = propertyRelatedActivity.RelatedEntity.GetPropertyByPath("http://museodelprado.es/ontologia/ecidoc.owl#p2_has_type_activity");
                        if (propActivityTypeInt != null && propActivityTypeInt.PropertyValues != null && propActivityTypeInt.PropertyValues.Count > 0)
                        {
                            foreach (SemanticPropertyModel.PropertyValue activityTypeInt in propActivityTypeInt.PropertyValues)
                            {
                                relatedActivity.activityType = new ActivityType();
                                relatedActivity.activityType.title = activityTypeInt.RelatedEntity.GetFirstValuePropertyByPath("http://museodelprado.es/ontologia/multilang-property.owl#textValue");
                            }
                        }

                        relatedActivity.textDate = propertyRelatedActivity.RelatedEntity.GetFirstValuePropertyByPath("http://museodelprado.es/ontologia/pradomuseum.owl#textDate");
                        relatedActivity.image = propertyRelatedActivity.RelatedEntity.GetFirstValuePropertyByPath("http://museodelprado.es/ontologia/pradomuseum.owl#main_image");
                        relatedActivity.alternativeType = propertyRelatedActivity.RelatedEntity.GetFirstValuePropertyByPath("http://museodelprado.es/ontologia/pradomuseum.owl#alternativeType");
                        relatedActivity.ticketUrl = propertyRelatedActivity.RelatedEntity.GetFirstValuePropertyByPath("http://museodelprado.es/ontologia/pradomuseum.owl#ticketURL");
                        relatedActivity.publicationDate = GetDate(propertyRelatedActivity.RelatedEntity.GetFirstValuePropertyByPath("http://museodelprado.es/ontologia/pradomuseum.owl#publicationDate"));
                        relatedActivity.activityDateStart = GetDate(propertyRelatedActivity.RelatedEntity.GetFirstValuePropertyByPath("http://museodelprado.es/ontologia/pradomuseum.owl#activityDate@@@http://museodelprado.es/ontologia/pradomuseum.owl#startDate"));
                        relatedActivity.activityDateEnd = GetDate(propertyRelatedActivity.RelatedEntity.GetFirstValuePropertyByPath("http://museodelprado.es/ontologia/pradomuseum.owl#activityDate@@@http://museodelprado.es/ontologia/pradomuseum.owl#endDate"));
                        relatedActivity.registrationDateStart = GetDate(propertyRelatedActivity.RelatedEntity.GetFirstValuePropertyByPath("http://museodelprado.es/ontologia/pradomuseum.owl#registrationDate@@@http://museodelprado.es/ontologia/pradomuseum.owl#startDate"));
                        relatedActivity.registrationDateEnd = GetDate(propertyRelatedActivity.RelatedEntity.GetFirstValuePropertyByPath("http://museodelprado.es/ontologia/pradomuseum.owl#registrationDate@@@http://museodelprado.es/ontologia/pradomuseum.owl#endDate"));

                        //Pendiente -->Fecha publicacion existe y es posterior a la fecha actual
                        //En curso -->startDate y endDate existen y  Fecha actual>startDate && Fecha actual < endDate
                        //Inscripci√≥n XXXX -->Fecha inscripci√≥n existe y Fecha inscripci√≥n > Fecha actual
                        //Inscripci√≥n abierta -->Fecha inscripci√≥n existe y Fecha actual entre fecha de inscripci√≥n
                        //Si no est√° pendiente se a√±ade
                        if (!relatedActivity.publicationDate.HasValue || relatedActivity.publicationDate.Value < DateTime.Now)
                        {
                            relatedActivities.Add(relatedActivity);
                        }
                    }
                }
            }
            return relatedActivities;
        }

        public static List<Resource> GetResources(SemanticResourceModel pSemCmsModel, ResourceModel pFichaDocumento, string pIdioma, IHtmlHelper pHtmlHelper)
        {
            #region hasResources
            SemanticPropertyModel propResources = pSemCmsModel.GetPropertyByPath("http://museodelprado.es/ontologia/pradomuseum.owl#hasResources");
            List<Resource> resources = new List<Resource>();
            if (propResources != null && propResources.PropertyValues != null && propResources.PropertyValues.Count > 0)
            {
                foreach (SemanticPropertyModel.PropertyValue propertyResource in propResources.PropertyValues)
                {
                    if (propertyResource != null && propertyResource.Value != null)
                    {
                        Resource resource = new Resource();
                        resource.title = propertyResource.RelatedEntity.GetFirstValuePropertyByPath("http://purl.org/dc/elements/1.1/title");
                        resource.description = propertyResource.RelatedEntity.GetFirstValuePropertyByPath("http://purl.org/dc/elements/1.1/description");
                        resource.files = new List<File>();

                        SemanticPropertyModel propFiles = propertyResource.RelatedEntity.GetPropertyByPath("http://museodelprado.es/ontologia/pradomuseum.owl#hasFiles");
                        if (propFiles != null && propFiles.PropertyValues != null && propFiles.PropertyValues.Count > 0)
                        {
                            foreach (SemanticPropertyModel.PropertyValue propertyFile in propFiles.PropertyValues)
                            {
                                if (propertyFile != null && propertyFile.Value != null)
                                {

                                    SemanticPropertyModel propFile = propertyFile.RelatedEntity.GetPropertyByPath("http://museodelprado.es/ontologia/pradomuseum.owl#file");
                                    string fileName = propertyFile.RelatedEntity.GetFirstValuePropertyByPath("http://museodelprado.es/ontologia/pradomuseum.owl#fileName");
                                    string nombreDescarga = string.Empty;
                                    string extension = "PDF";
                                    string urlDescarga = string.Empty;
                                    if (propFile != null && propFile.PropertyValues != null && propFile.PropertyValues.Count > 0)
                                    {
                                        File file = new File();
                                        file.file = propFile.PropertyValues[0].DownloadUrl;
                                        file.fileName = propFile.PropertyValues[0].Value;
                                        if (file.fileName.Contains("."))
                                        {
                                            file.extension = file.fileName.Substring(file.fileName.LastIndexOf(".") + 1).ToUpper();
                                        }
                                        if (!string.IsNullOrEmpty(fileName))
                                        {
                                            file.fileName = fileName;
                                        }
                                        resource.files.Add(file);
                                    }
                                }
                            }
                        }
                        resources.Add(resource);
                    }
                }
            }
            return resources;
            #endregion
        }
        public static DateTime? GetDate(string pDate)
        {
            if (pDate != null)
            {
                DateTime? fecha = null;
                try
                {
                    int anio = 0; ;
                    int mes = 0; ;
                    int dia = 0;
                    int hora = 0;
                    int minuto = 0;
                    int segundo = 0;
                    if (pDate.Length == 14)
                    {
                        anio = int.Parse(pDate.Substring(0, 4));
                        mes = int.Parse(pDate.Substring(4, 2));
                        dia = int.Parse(pDate.Substring(6, 2));
                        hora = int.Parse(pDate.Substring(8, 2));
                        minuto = int.Parse(pDate.Substring(10, 2));
                        segundo = int.Parse(pDate.Substring(12, 2));
                    }
                    else if (pDate.Length >= 10 && pDate.Contains("/"))
                    {
                        anio = int.Parse(pDate.Substring(6, 4));
                        mes = int.Parse(pDate.Substring(3, 2));
                        dia = int.Parse(pDate.Substring(0, 2));
                        if (pDate.Length > 10)
                        {
                            hora = int.Parse(pDate.Substring(11, 2));
                            minuto = int.Parse(pDate.Substring(14, 2));
                            segundo = int.Parse(pDate.Substring(17, 2));
                        }
                    }


                    fecha = new DateTime(anio, mes, dia, hora, minuto, segundo);
                }
                catch
                {
                }

                return fecha;
            }
            else
            {
                return null;
            }
        }
    }

    public class RDFPropertyAttribute : Attribute
    {
        public RDFPropertyAttribute(string pRDFA)
        {
            mRDFA = pRDFA;
        }
        protected string mRDFA;
        public string RDFProperty
        {
            get { return mRDFA; }
        }
    }

    [AttributeUsage(AttributeTargets.All, AllowMultiple = true)]
    public class LABELAttribute : Attribute
    {
        private GnossOCBase.LanguageEnum IdiomaDefecto = GnossOCBase.LanguageEnum.es;
        private GnossOCBase.LanguageEnum midioma;
        private string mlabel;
        public LABELAttribute(GnossOCBase.LanguageEnum idioma, string label)
        {
            mlabel = label;
            midioma = idioma;
        }
        public string LABEL(GnossOCBase.LanguageEnum pLang)
        {
            if (midioma.Equals(pLang))
            {
                return mlabel;
            }
            return "";
        }
    }


    public class GnossOCBase
    {
        public enum LanguageEnum
        {
            es,
        }
        internal List<string> prefList = new List<string>();
        internal string mGNOSSID;
        internal string mURL;
        public GnossOCBase()
        {
            prefList.Add("xmlns:date=\"http://museodelprado.es/ontologia/edate.owl#\"");
            prefList.Add("xmlns:cidoc=\"http://www.cidoc-crm.org/cidoc-crm#\"");
            prefList.Add("xmlns:ecidoc=\"http://museodelprado.es/ontologia/ecidoc.owl#\"");
            prefList.Add("xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"");
            prefList.Add("xmlns:xsd=\"http://www.w3.org/2001/XMLSchema#\"");
            prefList.Add("xmlns:rdfs=\"http://www.w3.org/2000/01/rdf-schema#\"");
            prefList.Add("xmlns:owl=\"http://www.w3.org/2002/07/owl#\"");
            prefList.Add("xmlns:dc=\"http://purl.org/dc/elements/1.1/\"");
            prefList.Add("xmlns:pm=\"http://museodelprado.es/ontologia/pradomuseum.owl#\"");
        }

        public string GNOSSID
        {
            get { return mGNOSSID; }
        }
        public string URL
        {
            get { return mURL; }
        }
        public static string GetPropertyValueSemCms(SemanticPropertyModel pProperty)
        {
            if (pProperty != null && pProperty.PropertyValues.Count > 0)
            {
                return pProperty.PropertyValues[0].Value;
            }
            return "";
        }
        public static List<string> GetMultiplePropertyValueSemCms(SemanticPropertyModel pProperty)
        {
            List<string> listString = new List<string>();
            if (pProperty != null && pProperty.PropertyValues.Count > 0)
            {
                foreach (SemanticPropertyModel.PropertyValue propValue in pProperty.PropertyValues)
                {
                    listString.Add(propValue.Value);
                }
            }
            return listString;
        }

        public static int? GetNumberIntPropertyValueSemCms(SemanticPropertyModel pProperty)
        {
            if (pProperty != null && pProperty.PropertyValues.Count > 0 && !string.IsNullOrEmpty(pProperty.PropertyValues[0].Value))
            {
                return int.Parse(pProperty.PropertyValues[0].Value);
            }
            return 0;
        }
        public static List<int> GetMultipleNumberIntPropertyValueSemCms(SemanticPropertyModel pProperty)
        {
            List<int> listNumbers = new List<int>();
            if (pProperty != null && pProperty.PropertyValues.Count > 0)
            {
                foreach (SemanticPropertyModel.PropertyValue propValue in pProperty.PropertyValues)
                {
                    listNumbers.Add(int.Parse(propValue.Value));
                }
            }
            return listNumbers;
        }

        public static float? GetNumberFloatPropertyValueSemCms(SemanticPropertyModel pProperty)
        {
            if (pProperty != null && pProperty.PropertyValues.Count > 0 && !string.IsNullOrEmpty(pProperty.PropertyValues[0].Value))
            {
                return float.Parse(pProperty.PropertyValues[0].Value.Replace('.', ','));
            }
            return 0;
        }
        public static List<float> GetMultipleNumberFloatPropertyValueSemCms(SemanticPropertyModel pProperty)
        {
            List<float> listNumbers = new List<float>();
            if (pProperty != null && pProperty.PropertyValues.Count > 0)
            {
                foreach (SemanticPropertyModel.PropertyValue propValue in pProperty.PropertyValues)
                {
                    listNumbers.Add(float.Parse(propValue.Value));
                }
            }
            return listNumbers;
        }

        public static DateTime? GetDateValuePropertySemCms(SemanticPropertyModel pProperty)
        {
            string stringDate = GetPropertyValueSemCms(pProperty);
            if (!string.IsNullOrEmpty(stringDate))
            {
                int year = 0;
                int month = 0;
                int day = 0;
                if (stringDate.Contains('/'))
                {
                    day = int.Parse(stringDate.Split('/')[0]);
                    month = int.Parse(stringDate.Split('/')[1]);
                    year = int.Parse(stringDate.Split('/')[2]);
                }
                else
                {
                    year = int.Parse(stringDate.Substring(0, 4));
                    month = int.Parse(stringDate.Substring(4, 2));
                    day = int.Parse(stringDate.Substring(6, 2));
                }
                if (stringDate.Length == 14)
                {
                    if (month == 0 || day == 0)
                    {
                        return new DateTime(year);
                    }
                    else
                    {
                        return new DateTime(year, month, day, int.Parse(stringDate.Substring(7, 2)), int.Parse(stringDate.Substring(9, 2)), int.Parse(stringDate.Substring(11, 2)));
                    }
                }
                else
                {
                    return new DateTime(year, month, day);
                }
            }
            return null;
        }

        public static bool GetBooleanPropertyValueSemCms(SemanticPropertyModel pProperty)
        {
            if (pProperty != null && pProperty.PropertyValues.Count > 0 && !string.IsNullOrEmpty(pProperty.PropertyValues[0].Value))
            {
                return bool.Parse(pProperty.PropertyValues[0].Value);
            }
            return false;
        }
        public string GetPropertyURI(string nombrePropiedad)
        {
            Type type = this.GetType();
            PropertyInfo mInfo = type.GetProperty(nombrePropiedad);
            if (mInfo != null)
            {
                Attribute attr = Attribute.GetCustomAttribute(mInfo, typeof(RDFPropertyAttribute));
                if (attr != null)
                {
                    return ((RDFPropertyAttribute)attr).RDFProperty;
                }
            }
            return "";
        }



        public string GetLabel(string nombrePropiedad, LanguageEnum pLang)
        {
            Type type = this.GetType();
            PropertyInfo mInfo = type.GetProperty(nombrePropiedad);

            if (mInfo != null)
            {
                Attribute[] attr = Attribute.GetCustomAttributes(mInfo, typeof(LABELAttribute));
                {
                    foreach (Attribute atributo in attr)
                    {
                        if (atributo != null)
                        {
                            if (!((LABELAttribute)atributo).LABEL(pLang).Equals(""))
                            {
                                return ((LABELAttribute)atributo).LABEL(pLang);
                            }
                        }
                    }
                }
            }

            return "";
        }
    }
    public class E38_Image : GnossOCBase
    {
        public E38_Image() : base() { }

        public string caption { get; set; }
        public string imagen { get; set; }
        public int orden { get; set; }

        [LABEL(LanguageEnum.es, "Orden:")]
        [RDFProperty("http://museodelprado.es/ontologia/pradomuseum.owl#order")]
        public int Pm_order { get; set; }

        [LABEL(LanguageEnum.es, "Pie de foto:")]
        [RDFProperty("http://museodelprado.es/ontologia/pradomuseum.owl#caption")]
        public string Pm_caption { get; set; }

        [LABEL(LanguageEnum.es, "URL imagen:")]
        [RDFProperty("http://museodelprado.es/ontologia/ecidoc.owl#p65_E36_shows_visual_item")]
        public string Ecidoc_p65_E36_shows_visual_item { get; set; }

        public E38_Image(SemanticEntityModel pSemCmsModel, string idiomaUsuario) : base()
        {
            this.mGNOSSID = pSemCmsModel.Entity.Uri;
            this.mURL = pSemCmsModel.Properties.FirstOrDefault(p => p.PropertyValues.Any(prop => prop.DownloadUrl != null))?.FirstPropertyValue.DownloadUrl;
            this.Pm_order = GetNumberIntPropertyValueSemCms(pSemCmsModel.GetPropertyByPath("http://museodelprado.es/ontologia/pradomuseum.owl#order")).Value;
            this.Pm_caption = GetPropertyValueSemCms(pSemCmsModel.GetPropertyByPath("http://museodelprado.es/ontologia/pradomuseum.owl#caption"));
            this.Ecidoc_p65_E36_shows_visual_item = GetPropertyValueSemCms(pSemCmsModel.GetPropertyByPath("http://museodelprado.es/ontologia/ecidoc.owl#p65_E36_shows_visual_item"));
        }

    }

    public class Resource
    {
        public string title { get; set; }
        public string description { get; set; }
        public List<File> files { get; set; }
    }

    public class File
    {
        public string file { get; set; }
        public string fileName { get; set; }
        public string extension { get; set; }
    }
}
