@using System.Data;
@using System.Reflection;
@using System.Drawing;
@using Newtonsoft.Json;
@model ResourceViewModel
@try
{

    SemanticResourceModel semCmsModel = Model.SemanticFrom;
    CommunityModel Comunidad = Html.GetComunidad();
    // Idioma de navegación del usuario
    string idiomaNav = ViewBag.UtilIdiomas.LanguageCode;

    // # region ObtenerInfoAutores

    //Crea un DataTable que contendrá los datos de todos los autores y autorías de la obra

    List<autorVista> listaAutores = new List<autorVista>();

    Boolean autorAnonimo = false;

    SemanticPropertyModel propObraAutores = semCmsModel.GetPropertyByPath("http://www.cidoc-crm.org/cidoc-crm#p14_carried_out_by");

    if (propObraAutores != null && propObraAutores.PropertyValues != null && propObraAutores.PropertyValues.Count > 0)
    {
        // Recorre todos los autores de la obra comprobando si es un autor o una autoría y los añade a dTAutoresObra
        foreach (SemanticPropertyModel.PropertyValue obraAutor in propObraAutores.PropertyValues)
        {
            if (obraAutor != null && obraAutor.Value != null)
            {
                autorAnonimo = aniadirAutorListado(listaAutores, obraAutor);
            }
        }
    }

    //# endRegion ObtenerInfoAutores

    // Obra de arte
    string tituloObra = semCmsModel.GetFirstValuePropertyByPath("http://museodelprado.es/ontologia/ecidoc.owl#p102_E35_p3_has_title");
    string tituloObraAumentado = semCmsModel.GetFirstValuePropertyByPath("http://museodelprado.es/ontologia/ecidoc.owl#p102_E35_p3_has_title_augmented");

    string numeroCatalogo = semCmsModel.GetFirstValuePropertyByPath("http://www.cidoc-crm.org/cidoc-crm#p48_has_preferred_identifier@@@http://www.cidoc-crm.org/cidoc-crm#p102_has_title");

    SemanticPropertyModel enciclopediaEnlazada = semCmsModel.GetPropertyByPath("http://museodelprado.es/ontologia/pradomuseum.owl#i_artwork_encyclopediaEntry@@@http://museodelprado.es/ontologia/pradomuseum.owl#encyclopediaEntryName");

    List<Tuple<string, string, string>> listaImagenesObraAnchoAlto = new List<Tuple<string, string, string>>();
    SemanticPropertyModel propimagenes = semCmsModel.GetPropertyByPath("http://www.cidoc-crm.org/cidoc-crm#p65_shows_visual_item");



    string urlImagenObra = semCmsModel.GetFirstValuePropertyByPath("http://www.cidoc-crm.org/cidoc-crm#p65_shows_visual_item@@@http://museodelprado.es/ontologia/ecidoc.owl#p3_has_note");
    string urlImagenPrincipal = semCmsModel.GetFirstValuePropertyByPath("http://museodelprado.es/ontologia/pradomuseum.owl#main_image");

    if (propimagenes != null)
    {
        foreach (SemanticPropertyModel.PropertyValue propImagen in propimagenes.PropertyValues)
        {
            string urlImagenObraAux = propImagen.RelatedEntity.GetFirstValuePropertyByPath("http://museodelprado.es/ontologia/ecidoc.owl#p3_has_note");

            //Si los tres tienen valores y la imagen coincide con la captura es que se trata de la imagen principal
            if (!string.IsNullOrEmpty(urlImagenObraAux) && urlImagenPrincipal != null && urlImagenPrincipal.ToLower().Contains(urlImagenObraAux.ToLower().Replace(".jpg", "")))
            {
                urlImagenObra = urlImagenObraAux;
            }
        }
    }



    string letra = string.Empty;
    if (!string.IsNullOrEmpty(numeroCatalogo))
    {
        System.Text.RegularExpressions.Regex re = new System.Text.RegularExpressions.Regex(@"^[a-zA-Z]+");
        System.Text.RegularExpressions.MatchCollection mc = re.Matches(numeroCatalogo);

        if (mc != null)
        {
            letra = mc[0].Groups[0].Value;
        }
    }

    SemanticPropertyModel propProductosTienda = semCmsModel.GetPropertyByPath("http://museodelprado.es/ontologia/pradomuseum.owl#i_artwork_product");
    bool editorEntidades = false;
    if (((List<KeyValuePair<string, string>>)(ViewBag.ListaInputHidden)).Exists(x => x.Key == "inpt_nombreGruposPerfilID"))
    {
        List<string> nombresCortos = new List<string>(((List<KeyValuePair<string, string>>)(ViewBag.ListaInputHidden)).Find(x => x.Key == "inpt_nombreGruposPerfilID").Value.Split(new string[] { "," }, StringSplitOptions.RemoveEmptyEntries));
        if (nombresCortos.Contains("editores-de-"))
        {
            editorEntidades = true;
        }
    }


    ResourceModel FichaDocumento = Model.Resource;
    UserIdentityModel IdentidadActual = Html.GetIdentidadActual();

    string urlPersonalizacion = ViewBag.BaseURLContent + "/imagenes/proyectos/personalizacion/" + ViewBag.Comunidad.Key.ToString();

    ViewBag.ListaJS.Add(urlPersonalizacion + "/ElPrado/js/openseadragon.js?v=" + ViewBag.Version.ToString());
    ViewBag.ListaJS.Add(urlPersonalizacion + "/ElPrado/js/audiojs/audio.min.js?v=" + ViewBag.Version.ToString());
    ViewBag.ListaJS.Add(urlPersonalizacion + "/ElPrado/js/jquery.facedetection.min.js?v=" + ViewBag.Version.ToString());
    ViewBag.ListaJS.Add("defer/" + urlPersonalizacion + "/ElPrado/js/templates/visor_openseadragon.js?v=" + ViewBag.Version.ToString());


    ViewBag.ListaJS.Add(urlPersonalizacion + "/ElPrado/js/tooltips/html5tooltips.js?v=" + ViewBag.Version.ToString());
    ViewBag.ListaCSS.Add(urlPersonalizacion + "/ElPrado/js/tooltips/html5tooltips.animation.css?v=" + ViewBag.Version.ToString());
    ViewBag.ListaCSS.Add(urlPersonalizacion + "/ElPrado/js/tooltips/html5tooltips.css?v=" + ViewBag.Version.ToString());

    if (semCmsModel.AdminGenerationError != null)
    {
        <p>@semCmsModel.AdminGenerationError</p>
    }

    string urlAgnadirRecorrido = ViewBag.Comunidad.Url + "/cmspagina?ComponentName=operativaRecorridoListado";

    if (IdentidadActual.IsGuestUser)
    {
        urlAgnadirRecorrido = ViewBag.Comunidad.Url + "/cmspagina?ComponentName=operativaLogin";
    }

    urlAgnadirRecorrido += "&titulo=" + System.Net.WebUtility.UrlEncode(FichaDocumento.Title) + "&imagen=" + System.Net.WebUtility.UrlEncode(FichaDocumento.UrlPreview) + "&idobra=" + FichaDocumento.Key;

    string autorDescarga = "";
    foreach (autorVista autor in listaAutores)
    {
        if (!string.IsNullOrEmpty(autor.nombreAutor))
        {
            autorDescarga += autor.nombreAutor + ",";
        }
        if (autorDescarga.EndsWith(","))
        {
            autorDescarga = autorDescarga.Substring(0, autorDescarga.Length - 1);
        }

        if (autor.tipoAutor.Count > 0)
        {
            foreach (string profesion in autor.tipoAutor)
            {
                if (autorDescarga.EndsWith("-"))
                {
                    autorDescarga += profesion + "-";
                }
                else
                {
                    autorDescarga += "-" + profesion + "-";
                }

            }
        }

        if (!string.IsNullOrEmpty(autor.tipoAutoria) && AutoriaPrimero(autor.tipoAutoria) && autor.autoria.Count == 0)
        {
            autorDescarga = " " + autor.tipoAutoria + " " + autorDescarga;
        }
        else
        {
            if (!string.IsNullOrEmpty(autor.tipoAutoria))
            {

                autorDescarga += " " + autor.tipoAutoria + "";
            }
        }

        if (autor.autoria.Count > 0)
        {
            foreach (KeyValuePair<string, List<string>> autoriaAutor in autor.autoria)
            {


                autorDescarga += "(" + autoriaAutor.Key + ": ";//+ autoriaAutor.Value + ")";
                if (autorDescarga.EndsWith("(: "))
                {
                    autorDescarga = autorDescarga.Substring(0, autorDescarga.Length - 2);
                }
                foreach (string nombreAutor in autoriaAutor.Value)
                {
                    autorDescarga += nombreAutor + ",";
                }
                if (autorDescarga.EndsWith(","))
                {
                    autorDescarga = autorDescarga.Substring(0, autorDescarga.Length - 1);
                }

                autorDescarga += ")";

            }

        }
        autorDescarga += ";";
    }
    if (autorDescarga.EndsWith(";"))
    {
        autorDescarga = autorDescarga.Substring(0, autorDescarga.Length - 1);
    }


    string urlDescargaPersonal = ViewBag.Comunidad.Url + "/cmspagina?ComponentName=operativaDescargaPersonal";
    urlDescargaPersonal += "&titulo=" + System.Net.WebUtility.UrlEncode(FichaDocumento.Title) + "&imagen=" + System.Net.WebUtility.UrlEncode(FichaDocumento.UrlPreview) + "&urlDescarga=" + System.Net.WebUtility.UrlEncode(FichaDocumento.UrlPreview.Replace("_268", "")) + "&autor=" + System.Net.WebUtility.UrlEncode(autorDescarga);

    string urlDescargaComercial = ViewBag.Comunidad.Url + "/cmspagina?ComponentName=operativaDescargaComercial";
    urlDescargaComercial += "&titulo=" + System.Net.WebUtility.UrlEncode(FichaDocumento.Title) + "&imagen=" + System.Net.WebUtility.UrlEncode(FichaDocumento.UrlPreview) + "&urlDescarga=" + System.Net.WebUtility.UrlEncode(FichaDocumento.UrlPreview.Replace("_268", "")) + "&autor=" + System.Net.WebUtility.UrlEncode(autorDescarga);

    SemanticPropertyModel propNumCatalogo = semCmsModel.GetPropertyByPath("http://www.cidoc-crm.org/cidoc-crm#p48_has_preferred_identifier");
    SemanticPropertyModel propAutor = semCmsModel.GetPropertyByPath("http://www.cidoc-crm.org/cidoc-crm#p14_carried_out_by@@@http://museodelprado.es/ontologia/pradomuseum.owl#author");
    SemanticPropertyModel propTitulo = semCmsModel.GetPropertyByPath("http://museodelprado.es/ontologia/ecidoc.owl#p102_E35_p3_has_title");
    SemanticPropertyModel propFecha = semCmsModel.GetPropertyByPath("http://museodelprado.es/ontologia/edate.owl#textDate");
    SemanticPropertyModel propTecnica = semCmsModel.GetPropertyByPath("http://museodelprado.es/ontologia/ecidoc.owl#p108i_E12_p32_used_general_technique");
    SemanticPropertyModel propSoporte = semCmsModel.GetPropertyByPath("http://museodelprado.es/ontologia/ecidoc.owl#p108i_E12_p126_employed_support");
    SemanticPropertyModel propMateria = semCmsModel.GetPropertyByPath("http://museodelprado.es/ontologia/ecidoc.owl#p108i_E12_p126_employed_medium");
    SemanticPropertyModel propMedidas = semCmsModel.GetPropertyByPath("http://museodelprado.es/ontologia/ecidoc.owl#p43_E54_has_dimension");
    SemanticPropertyModel propSerie = semCmsModel.GetPropertyByPath("http://museodelprado.es/ontologia/ecidoc.owl#p46i_E78_p102_forms_part_of");
    SemanticPropertyModel propLugarProduccionCeca = semCmsModel.GetPropertyByPath("http://www.cidoc-crm.org/cidoc-crm#p7_took_place_at_ceca");
    SemanticPropertyModel propLugarProduccion = semCmsModel.GetPropertyByPath("http://www.cidoc-crm.org/cidoc-crm#p7_took_place_at");
    SemanticPropertyModel propEdicionEstado = semCmsModel.GetPropertyByPath("http://museodelprado.es/ontologia/ecidoc.owl#p108_edition_state");

    SemanticPropertyModel propProcedencia = semCmsModel.GetPropertyByPath("http://www.cidoc-crm.org/cidoc-crm#p27_moved_from");
    SemanticPropertyModel propBiblio = semCmsModel.GetMainProperty("http://www.cidoc-crm.org/cidoc-crm#p70i_is_documented_in");
    SemanticPropertyModel propInventario = semCmsModel.GetMainProperty("http://www.cidoc-crm.org/cidoc-crm#p1_is_identified_by");
    SemanticPropertyModel propInscripciones = semCmsModel.GetMainProperty("http://museodelprado.es/ontologia/ecidoc.owl#p65_E34_has_inscription");
    SemanticPropertyModel propTranscripciones = semCmsModel.GetMainProperty("http://museodelprado.es/ontologia/ecidoc.owl#p3_E22_has_transcription");
    SemanticPropertyModel propFechaModificacion = semCmsModel.GetMainProperty("http://museodelprado.es/ontologia/pradomuseum.owl#updateDate");
    SemanticPropertyModel propFechaPublicacion = semCmsModel.GetMainProperty("http://museodelprado.es/ontologia/pradomuseum.owl#publicationDate");
    SemanticPropertyModel propObrasRelacionadas = semCmsModel.GetMainProperty("http://www.cidoc-crm.org/cidoc-crm#p130i_features_are_also_found_on");
    SemanticPropertyModel propMarcoRelacionado = semCmsModel.GetMainProperty("http://museodelprado.es/ontologia/pradomuseum.owl#relatedFrame");
    SemanticPropertyModel multimediaEnlazado = semCmsModel.GetPropertyByPath("http://museodelprado.es/ontologia/pradomuseum.owl#i_artwork_multimediaresource");
    SemanticPropertyModel propExposicionesInternas = semCmsModel.GetPropertyByPath("http://museodelprado.es/ontologia/pradomuseum.owl#i_artwork_exhibitionactivity");
    SemanticPropertyModel propExposicionesExternas = semCmsModel.GetPropertyByPath("http://museodelprado.es/ontologia/pradomuseum.owl#relatedExhibition");
    SemanticPropertyModel propMasObras = semCmsModel.GetPropertyByPath("http://museodelprado.es/ontologia/pradomuseum.owl#i_author_artwork");
    SemanticPropertyModel propAudioguia = semCmsModel.GetPropertyByPath("http://museodelprado.es/ontologia/pradomuseum.owl#i_audioguide_artwork");
    SemanticPropertyModel propSignoguia = semCmsModel.GetPropertyByPath("http://museodelprado.es/ontologia/pradomuseum.owl#i_signguide_artwork");
    SemanticPropertyModel propEntityWiki = semCmsModel.GetPropertyByPath("http://museodelprado.es/ontologia/pradomuseum.owl#entityWikipedia");

    //Obtener el título multiidioma configurado para una entidad:

    string titularMarcoRelacionado = string.Empty;
    string titularNumCatalogo = string.Empty;
    string titularAutor = string.Empty;
    string titularTitulo = string.Empty;
    string titularFecha = string.Empty;
    string titularTecnica = string.Empty;
    string titularSoporte = string.Empty;
    string titularMateria = string.Empty;
    string titularMedidas = string.Empty;
    string titularSerie = string.Empty;
    string titularLugarProduccionCeca = string.Empty;
    string titularLugarProduccion = string.Empty;
    string titularEdicionEstado = string.Empty;
    string titularProcedencia = string.Empty;
    string titularBibliografia = string.Empty;
    string titularInventarios = string.Empty;
    string titularInscripciones = string.Empty;
    string titularTranscripciones = string.Empty;
    string titularFechaPublicacion = string.Empty;
    string titularFechaModificacion = string.Empty;
    string titularExposiciones = string.Empty;
    List<string> enlacesWiki = new List<string>();
    string enlaceWikipedia = string.Empty;

    if (propMarcoRelacionado != null)
    {
        titularMarcoRelacionado = propMarcoRelacionado.OntologyPropInfo.LabelTitle;
    }

    if (propNumCatalogo != null)
    {
        titularNumCatalogo = propNumCatalogo.OntologyPropInfo.LabelTitle;
    }

    if (propAutor != null)
    {
        titularAutor = propAutor.OntologyPropInfo.LabelTitle;
    }
    if (propTitulo != null)
    {
        titularTitulo = propTitulo.OntologyPropInfo.LabelTitle;
    }
    if (propFecha != null)
    {
        titularFecha = propFecha.OntologyPropInfo.LabelTitle;
    }
    if (propTecnica != null)
    {
        titularTecnica = propTecnica.OntologyPropInfo.LabelTitle;
    }
    if (propSoporte != null)
    {
        titularSoporte = propSoporte.OntologyPropInfo.LabelTitle;
    }
    if (propMateria != null)
    {
        titularMateria = propMateria.OntologyPropInfo.LabelTitle;
    }
    if (propMedidas != null)
    {
        titularMedidas = propMedidas.OntologyPropInfo.LabelTitle;
    }
    if (propSerie != null)
    {
        titularSerie = propSerie.OntologyPropInfo.LabelTitle;
    }
    if (propLugarProduccionCeca != null)
    {
        titularLugarProduccionCeca = propLugarProduccionCeca.OntologyPropInfo.LabelTitle;
    }
    if (propLugarProduccion != null)
    {
        titularLugarProduccion = propLugarProduccion.OntologyPropInfo.LabelTitle;
    }
    if (propEdicionEstado != null)
    {
        titularEdicionEstado = propEdicionEstado.OntologyPropInfo.LabelTitle;
    }
    if (propProcedencia != null)
    {
        titularProcedencia = propProcedencia.OntologyPropInfo.LabelTitle;
    }
    if (propBiblio != null)
    {
        titularBibliografia = propBiblio.OntologyPropInfo.LabelTitle;
    }
    if (propInventario != null)
    {
        titularInventarios = propInventario.OntologyPropInfo.LabelTitle;
    }
    if (propInscripciones != null)
    {
        titularInscripciones = propInscripciones.OntologyPropInfo.LabelTitle;
    }
    if (propTranscripciones != null)
    {
        titularTranscripciones = propTranscripciones.OntologyPropInfo.LabelTitle;
    }
    if (propFechaModificacion != null)
    {
        titularFechaModificacion = propFechaModificacion.OntologyPropInfo.LabelTitle;
    }
    if (propFechaPublicacion != null)
    {
        titularFechaPublicacion = propFechaPublicacion.OntologyPropInfo.LabelTitle;
    }
    if (propExposicionesInternas != null)
    {
        titularExposiciones = propExposicionesInternas.OntologyPropInfo.LabelTitle;
    }

    //Exposiciones a Objeto Exposición
    List<Exposicion> listaExposiciones = new List<Exposicion>();
    List<string> listaExpInternas = new List<string>();

    //Exposiciones Internas
    if (propExposicionesInternas != null && propExposicionesInternas.PropertyValues != null && propExposicionesInternas.PropertyValues.Count > 0)
    {
        foreach (SemanticPropertyModel.PropertyValue propExposicion in propExposicionesInternas.PropertyValues)
        {

            SemanticPropertyModel titulo = propExposicion.RelatedEntity.GetPropertyByPath("http://www.cidoc-crm.org/cidoc-crm#p3_has_note");

            string enlaceExposicion = string.Empty;
            string tituloExposicion = string.Empty;
            string tipoExposicion = propExposicion.RelatedEntity.GetFirstValuePropertyByPath("http://www.cidoc-crm.org/cidoc-crm#p2_has_type");
            string sedeExposicion = propExposicion.RelatedEntity.GetFirstValuePropertyByPath("http://www.cidoc-crm.org/cidoc-crm#p7_took_place_at");
            string edificioExposicion = propExposicion.RelatedEntity.GetFirstValuePropertyByPath("http://museodelprado.es/ontologia/ecidoc.owl#p7_took_place_at_headquarters");
            string ciudadExposicion = propExposicion.RelatedEntity.GetFirstValuePropertyByPath("http://museodelprado.es/ontologia/ecidoc.owl#p7_took_place_at_city");
            string fechaInicioExposicion = propExposicion.RelatedEntity.GetFirstValuePropertyByPath("http://museodelprado.es/ontologia/ecidoc.owl#p4_p79_has_time-span_beginning");
            string fechaFinExposicion = propExposicion.RelatedEntity.GetFirstValuePropertyByPath("http://museodelprado.es/ontologia/ecidoc.owl#p4_p80_has_time-span_end");

            if (titulo != null && titulo.PropertyValues.Count > 0)
            {
                tituloExposicion = titulo.PropertyValues[0].Value;
                enlaceExposicion = titulo.PropertyValues[0].DownloadUrl;
            }

            Exposicion expo = new Exposicion(tituloExposicion, enlaceExposicion, tipoExposicion, "", sedeExposicion, edificioExposicion, ciudadExposicion, fechaInicioExposicion, fechaFinExposicion);
            listaExposiciones.Add(expo);

            SemanticPropertyModel propExpoIntRel = propExposicion.RelatedEntity.GetPropertyByPath("http://museodelprado.es/ontologia/pradomuseum.owl#relatedInternalExhibition");
            if (propExpoIntRel != null && propExpoIntRel.PropertyValues != null && propExpoIntRel.PropertyValues.Count > 0)
            {
                string idExpoInt = propExpoIntRel.FirstPropertyValue.Value;
                listaExpInternas.Add(idExpoInt);
            }

        }
    }

    //Exposiciones Externas
    if (propExposicionesExternas != null && propExposicionesExternas.PropertyValues != null && propExposicionesExternas.PropertyValues.Count > 0)
    {
        foreach (SemanticPropertyModel.PropertyValue propExposicion in propExposicionesExternas.PropertyValues)
        {
            string idSujetoExpo = propExposicion.Value;

            string tituloExposicion = propExposicion.RelatedEntity.GetFirstValuePropertyByPath("http://www.cidoc-crm.org/cidoc-crm#p3_has_note");
            string tipoExposicion = propExposicion.RelatedEntity.GetFirstValuePropertyByPath("http://www.cidoc-crm.org/cidoc-crm#p2_has_type");
            string museoExposicion = propExposicion.RelatedEntity.GetFirstValuePropertyByPath("http://museodelprado.es/ontologia/pradomuseum.owl#venue");
            string ciudadExposicion = propExposicion.RelatedEntity.GetFirstValuePropertyByPath("http://museodelprado.es/ontologia/pradomuseum.owl#city");
            string fechaInicioExposicion = propExposicion.RelatedEntity.GetFirstValuePropertyByPath("http://museodelprado.es/ontologia/ecidoc.owl#p62_E52_p79_has_time-span_beginning");
            string fechaFinExposicion = propExposicion.RelatedEntity.GetFirstValuePropertyByPath("http://museodelprado.es/ontologia/ecidoc.owl#p62_E52_p80_has_time-span_end");

            if (!listaExpInternas.Contains(idSujetoExpo))
            {
                Exposicion expo = new Exposicion(tituloExposicion, "", tipoExposicion, museoExposicion, "", "", ciudadExposicion, fechaInicioExposicion, fechaFinExposicion);
                listaExposiciones.Add(expo);
            }
        }
    }

    if (propEntityWiki != null && propEntityWiki.PropertyValues != null && propEntityWiki.PropertyValues.Count > 0)
    {
        foreach (SemanticPropertyModel.PropertyValue propWiki in propEntityWiki.PropertyValues)
        {
            enlacesWiki.AddRange(ObtenerValoresPropiedadSemCms(propWiki.RelatedEntity.GetPropertyByPath("http://museodelprado.es/ontologia/pradomuseum.owl#sameAs")));
        }

    }
    if (idiomaNav == "es" && enlacesWiki.Exists(x => x.StartsWith("http://es.dbpedia.org/resource/")))
    {
        enlaceWikipedia = enlacesWiki.First(x => x.StartsWith("http://es.dbpedia.org/resource/")).Replace("http://es.dbpedia.org/resource/", "https://es.wikipedia.org/wiki/");
    }
    else if (idiomaNav == "en" && enlacesWiki.Exists(x => x.StartsWith("http://dbpedia.org/resource/")))
    {
        enlaceWikipedia = enlacesWiki.First(x => x.StartsWith("http://dbpedia.org/resource/")).Replace("http://dbpedia.org/resource/", "https://en.wikipedia.org/wiki/");
    }




    string tecnica = string.Empty;
    string tecnicas = string.Empty;

    string materia = string.Empty;
    string materias = string.Empty;

    string soporte = string.Empty;
    string soportes = string.Empty;

    if (!string.IsNullOrEmpty(titularTecnica))
    {
        SemanticPropertyModel propTechniquePath = semCmsModel.GetPropertyByPath("http://museodelprado.es/ontologia/ecidoc.owl#p108i_E12_p32_used_general_technique");

        if (propTechniquePath != null && propTechniquePath.PropertyValues != null && propTechniquePath.PropertyValues.Count() > 0)
        {
            foreach (SemanticPropertyModel.PropertyValue techniquePath in propTechniquePath.PropertyValues)
            {
                SemanticPropertyModel propTechniqueNode = techniquePath.RelatedEntity.GetPropertyByPath("http://museodelprado.es/ontologia/pradomuseum.owl#techniqueNode");

                if (propTechniqueNode != null && propTechniqueNode.PropertyValues != null && propTechniqueNode.PropertyValues.Count() > 0)
                {
                    string tecnicaObra = propTechniqueNode.PropertyValues.Last().RelatedEntity.GetFirstValuePropertyByPath("http://www.w3.org/2008/05/skos#prefLabel");

                    if (!string.IsNullOrEmpty(tecnicaObra))
                    {
                        string htmlTecnica = "<span " + semCmsModel.GetRDFAProperty(techniquePath.Property) + "><span " + semCmsModel.GetRDFAEntity(techniquePath.RelatedEntity) + "><span " + semCmsModel.GetRDFAProperty(propTechniqueNode) + "><span " + semCmsModel.GetRDFAEntity(propTechniqueNode.PropertyValues.Last().RelatedEntity) + "><span " + semCmsModel.GetRDFAProperty(propTechniqueNode.PropertyValues.Last().RelatedEntity.GetPropertyByPath("http://www.w3.org/2008/05/skos#prefLabel")) + ">" + tecnicaObra + "</span></span></span></span></span>";
                        if (!techniquePath.Equals(propTechniquePath.PropertyValues.Last()))
                        {
                            tecnicas = string.Concat(tecnicas, htmlTecnica, "; ");
                            tecnica = string.Concat(tecnica, tecnicaObra, ", ");
                        }
                        else
                        {
                            tecnicas = string.Concat(tecnicas, htmlTecnica);
                            tecnica = string.Concat(tecnica, tecnicaObra);
                        }

                    }
                }
            }
        }
    }



    SemanticPropertyModel propMediumPath = semCmsModel.GetPropertyByPath("http://museodelprado.es/ontologia/ecidoc.owl#p108i_E12_p126_employed_medium");

    if (propMediumPath != null && propMediumPath.PropertyValues != null && propMediumPath.PropertyValues.Count() > 0)
    {
        foreach (SemanticPropertyModel.PropertyValue mediumPath in propMediumPath.PropertyValues)
        {
            SemanticPropertyModel propMediumNode = mediumPath.RelatedEntity.GetPropertyByPath("http://museodelprado.es/ontologia/pradomuseum.owl#mediumNode");

            if (propMediumNode != null && propMediumNode.PropertyValues != null && propMediumNode.PropertyValues.Count() > 0)
            {
                string materiaObra = propMediumNode.PropertyValues.Last().RelatedEntity.GetFirstValuePropertyByPath("http://www.w3.org/2008/05/skos#prefLabel");

                if (!string.IsNullOrEmpty(materiaObra))
                {
                    string htmlMateria = "<span " + semCmsModel.GetRDFAProperty(mediumPath.Property) + "><span " + semCmsModel.GetRDFAEntity(mediumPath.RelatedEntity) + "><span " + semCmsModel.GetRDFAProperty(propMediumNode) + "><span " + semCmsModel.GetRDFAEntity(propMediumNode.PropertyValues.Last().RelatedEntity) + "><span " + semCmsModel.GetRDFAProperty(propMediumNode.PropertyValues.Last().RelatedEntity.GetPropertyByPath("http://www.w3.org/2008/05/skos#prefLabel")) + ">" + materiaObra + "</span></span></span></span></span>";
                    string nombreMateria = materiaObra;

                    if (!string.IsNullOrEmpty(htmlMateria))
                    {
                        if (!mediumPath.Equals(propMediumPath.PropertyValues.Last()))
                        {
                            materias = string.Concat(materias, htmlMateria, "; ");
                            materia = string.Concat(materia, nombreMateria, ", ");
                        }
                        else
                        {
                            materias = string.Concat(materias, htmlMateria);
                            materia = string.Concat(materia, nombreMateria);
                        }
                    }
                }
            }
        }
    }

    if (!string.IsNullOrEmpty(titularSoporte))
    {
        SemanticPropertyModel propSupportPath = semCmsModel.GetPropertyByPath("http://museodelprado.es/ontologia/ecidoc.owl#p108i_E12_p126_employed_support");

        if (propSupportPath != null && propSupportPath.PropertyValues != null && propSupportPath.PropertyValues.Count() > 0)
        {
            var resultadoSupportPath = propSupportPath.PropertyValues.Select(x => x.RelatedEntity).OrderBy(x => x.GetFirstValuePropertyByPath("http://museodelprado.es/ontologia/pradomuseum.owl#order"));
            string soportePrincipal = string.Empty;
            string segundoSoporte = string.Empty;
            foreach (SemanticEntityModel supportPath in resultadoSupportPath)
            {
                SemanticPropertyModel propSupportNode = supportPath.GetPropertyByPath("http://museodelprado.es/ontologia/pradomuseum.owl#supportNode");
                string orden = supportPath.GetFirstValuePropertyByPath("http://museodelprado.es/ontologia/pradomuseum.owl#order");
                if (string.IsNullOrEmpty(orden))
                {
                    orden = "1";
                }
                if (propSupportNode != null && propSupportNode.PropertyValues != null && propSupportNode.PropertyValues.Count() > 0)
                {
                    string soporteObra = propSupportNode.PropertyValues.Last().RelatedEntity.GetFirstValuePropertyByPath("http://www.w3.org/2008/05/skos#prefLabel");

                    if (!string.IsNullOrEmpty(soporteObra))
                    {
                        string htmlSoporte = "<span " + semCmsModel.GetRDFAProperty(propSupportPath) + "><span " + semCmsModel.GetRDFAEntity(supportPath) + "><span " + semCmsModel.GetRDFAProperty(propSupportNode) + "><span " + semCmsModel.GetRDFAEntity(propSupportNode.PropertyValues.Last().RelatedEntity) + "><span " + semCmsModel.GetRDFAProperty(propSupportNode.PropertyValues.Last().RelatedEntity.GetPropertyByPath("http://www.w3.org/2008/05/skos#prefLabel")) + ">" + soporteObra + "</span></span></span></span></span>";
                        if (!string.IsNullOrEmpty(htmlSoporte))
                        {
                            if (orden == "1")
                            {
                                if (!string.IsNullOrEmpty(soportePrincipal))
                                {
                                    soportePrincipal += "; ";
                                }
                                soportePrincipal = string.Concat(soportePrincipal, htmlSoporte);
                            }
                            else
                            {
                                if (!string.IsNullOrEmpty(segundoSoporte))
                                {
                                    segundoSoporte += "; ";
                                }
                                segundoSoporte = string.Concat(segundoSoporte, htmlSoporte);

                            }
                            if (orden == "1")
                            {
                                if (!string.IsNullOrEmpty(soporte))
                                {
                                    soporte += ", ";
                                }
                                soporte = string.Concat(soporte, soporteObra);
                            }
                        }
                    }
                }
            }
            soportes += soportePrincipal;
            if (!string.IsNullOrEmpty(segundoSoporte))
            {
                soportes += "<br/>" + Html.Translate("SEGUNDOSOPORTE") + ": " + segundoSoporte;
            }
        }
    }

    //Filigrana
    GnossOCBase.LanguageEnum idiomaUsuario = (GnossOCBase.LanguageEnum)Enum.Parse(typeof(GnossOCBase.LanguageEnum), Html.GetUtilIdiomas().LanguageCode.ToLower());
    SemanticPropertyModel propPmHasFiligree = semCmsModel.GetPropertyByPath("http://museodelprado.es/ontologia/pradomuseum.owl#hasFiligree");
    string titularFiligrana = string.Empty;
    List<E37_Mark> Pm_hasFiligree = new List<E37_Mark>();
    if (propPmHasFiligree != null && propPmHasFiligree.PropertyValues.Count > 0)
    {
        titularFiligrana = propPmHasFiligree.OntologyPropInfo.LabelTitle;
        foreach (SemanticPropertyModel.PropertyValue propValue in propPmHasFiligree.PropertyValues)
        {
            E37_Mark PmHasFiligree = new E37_Mark(propValue.RelatedEntity, idiomaUsuario);
            Pm_hasFiligree.Add(PmHasFiligree);
        }
    }
    Pm_hasFiligree = Pm_hasFiligree.OrderBy(x => x.Pm_order).ToList();

    //Datos Marco
    SemanticPropertyModel propPmframeData = semCmsModel.GetPropertyByPath("http://museodelprado.es/ontologia/pradomuseum.owl#frameData");
    SemanticPropertyModel propObraPrincipalMarco = null;
    string titularMarco = string.Empty;
    string titularObraPrincipalMarco = string.Empty;
    FrameData Pm_frame = null;
    if (propPmframeData != null && propPmframeData.PropertyValues.Count > 0)
    {
        titularMarco = propPmframeData.OntologyPropInfo.LabelTitle;
        foreach (SemanticPropertyModel.PropertyValue propValue in propPmframeData.PropertyValues)
        {
            Pm_frame = new FrameData(propValue.RelatedEntity, idiomaUsuario);
            propObraPrincipalMarco = propValue.RelatedEntity.GetPropertyByPath("http://www.cidoc-crm.org/cidoc-crm#p130i_features_are_also_found_on");
            titularObraPrincipalMarco = propObraPrincipalMarco.SpecificationProperty.Nombre;
        }
    }


    string fechaTextual = semCmsModel.GetFirstValuePropertyByPath("http://museodelprado.es/ontologia/edate.owl#textDate");
    string fechaTextualFichaTecnica = "";

    SemanticPropertyModel propFechaAux = semCmsModel.GetPropertyByPath("http://museodelprado.es/ontologia/ecidoc.owl#p4_has_time-span");
    if (propFechaAux != null && propFechaAux.PropertyValues != null && propFechaAux.PropertyValues.Count() > 0)
    {
        foreach (SemanticPropertyModel.PropertyValue fecha in propFechaAux.PropertyValues)
        {
            string textoFecha = fecha.RelatedEntity.GetFirstValuePropertyByPath("http://museodelprado.es/ontologia/edate.owl#textDate");
            string observacionFecha = fecha.RelatedEntity.GetFirstValuePropertyByPath("http://www.cidoc-crm.org/cidoc-crm#p3_has_note");
            if (!string.IsNullOrEmpty(textoFecha))
            {
                if (!string.IsNullOrEmpty(fechaTextualFichaTecnica))
                {
                    fechaTextualFichaTecnica += "; ";
                }
                fechaTextualFichaTecnica += textoFecha;
                if (!string.IsNullOrEmpty(observacionFecha))
                {
                    fechaTextualFichaTecnica += " (" + observacionFecha + ")";
                }
            }
        }
    }
    if (string.IsNullOrEmpty(fechaTextualFichaTecnica))
    {
        fechaTextualFichaTecnica = fechaTextual;
    }
    string unidadMedida = semCmsModel.GetFirstValuePropertyByPath("http://museodelprado.es/ontologia/ecidoc.owl#p43_E54_has_dimension@@@http://museodelprado.es/ontologia/ecidoc.owl#p91_E58_has_unit");
    string descripcionObra = semCmsModel.GetFirstValuePropertyByPath("http://www.cidoc-crm.org/cidoc-crm#p3_has_note");
    string descripcionObraAumentado = semCmsModel.GetFirstValuePropertyByPath("http://www.cidoc-crm.org/cidoc-crm#p3_has_note_augmented");
    string textoExtractado = semCmsModel.GetFirstValuePropertyByPath("http://museodelprado.es/ontologia/efrbrer.owl#p3020_has_title_of_the_manifestation");
    string fechaCreacionRecurso = ObtenerFechaFormateada(semCmsModel.GetFirstValuePropertyByPath("http://museodelprado.es/ontologia/pradomuseum.owl#publicationDate"), "-");
    string fechaModificacionRecurso = ObtenerFechaFormateada(semCmsModel.GetFirstValuePropertyByPath("http://museodelprado.es/ontologia/pradomuseum.owl#updateDate"), "-");
    string ubicacionObra = semCmsModel.GetFirstValuePropertyByPath("http://www.cidoc-crm.org/cidoc-crm#p55_has_current_location");
    string salaObra = semCmsModel.GetFirstValuePropertyByPath("http://museodelprado.es/ontologia/ecidoc.owl#p55_has_current_location_type");
    if (string.IsNullOrEmpty(salaObra))
    {
        salaObra = string.Empty;
    }
    string expuesto = semCmsModel.GetFirstValuePropertyByPath("http://museodelprado.es/ontologia/ecidoc.owl#p55_has_current_location_exposed");
    string ubicacionIdObra = semCmsModel.GetFirstValuePropertyByPath("http://museodelprado.es/ontologia/ecidoc.owl#p55_has_current_location_id");
    string ubicacionLatitudObra = semCmsModel.GetFirstValuePropertyByPath("http://www.w3.org/2003/01/geo/wgs84_pos#lat");
    string ubicacionLongitudbra = semCmsModel.GetFirstValuePropertyByPath("http://www.w3.org/2003/01/geo/wgs84_pos#long");
    SemanticPropertyModel propObjetosRepresentados = semCmsModel.GetPropertyByPath("http://museodelprado.es/ontologia/ecidoc.owl#p65_E36_p138_represents_object");
    SemanticPropertyModel propDimensiones = semCmsModel.GetPropertyByPath("http://museodelprado.es/ontologia/ecidoc.owl#p43_E54_has_dimension");
    SemanticPropertyModel propSoportes = semCmsModel.GetPropertyByPath("http://museodelprado.es/ontologia/ecidoc.owl#p108i_E12_p126_employed_support");

    string alto = string.Empty;
    string ancho = string.Empty;
    string profundidad = string.Empty;

    if (propDimensiones != null)
    {
        foreach (SemanticPropertyModel.PropertyValue propDimension in propDimensiones.PropertyValues)
        {
            SemanticPropertyModel propTipo = propDimension.RelatedEntity.GetProperty("http://museodelprado.es/ontologia/ecidoc.owl#p2_E55_has_type");
            SemanticPropertyModel propValor = propDimension.RelatedEntity.GetProperty("http://museodelprado.es/ontologia/ecidoc.owl#p90_E60_has_value");
            SemanticPropertyModel propFactorConversion = propDimension.RelatedEntity.GetPropertyByPath("http://museodelprado.es/ontologia/pradomuseum.owl#conversion_factor");

            float factorConversion = 0;

            if (propTipo.PropertyValues.Count > 0 && propValor.PropertyValues.Count > 0)
            {
                if (propFactorConversion != null)
                {

                    string factorConv = propFactorConversion.FirstPropertyValue.Value;

                    if (!string.IsNullOrEmpty(factorConv))
                    {
                        factorConversion = float.Parse(factorConv);
                    }
                }

                if (propTipo.FirstPropertyValue.Value == "Alto" || propTipo.FirstPropertyValue.Value == "High/Height")
                {
                    float altoFloat = float.Parse(propValor.FirstPropertyValue.Value) / factorConversion;
                    alto = altoFloat.ToString();
                }
                else if (propTipo.FirstPropertyValue.Value == "Ancho" || propTipo.FirstPropertyValue.Value == "Width")
                {
                    float anchoFloat = float.Parse(propValor.FirstPropertyValue.Value) / factorConversion;
                    ancho = anchoFloat.ToString();
                }
                else if (propTipo.FirstPropertyValue.Value == "Fondo" || propTipo.FirstPropertyValue.Value == "Base/bottom")
                {
                    float profundidadFloat = float.Parse(propValor.FirstPropertyValue.Value) / factorConversion;
                    profundidad = profundidadFloat.ToString();
                }
            }
        }
    }

    string textoCabecera = string.Empty;
    // Fecha de inicio
    if (!string.IsNullOrEmpty(fechaTextual))
    {
        textoCabecera = string.Concat(fechaTextual, ". ");
    }
    // Materia/Técnica sobre soporte
    SemanticPropertyModel tesauroTecnica = semCmsModel.GetPropertyByPath("http://museodelprado.es/ontologia/ecidoc.owl#p108i_E12_p32_used_general_technique@@@http://museodelprado.es/ontologia/pradomuseum.owl#techniqueNode");

    if (tesauroTecnica != null && tesauroTecnica.PropertyValues.Count > 0)
    {
        if (letra.Equals("E") || letra.Equals("O"))
        {
            if (!string.IsNullOrEmpty(materia))
            {
                textoCabecera = string.Concat(textoCabecera, materia);
            }
        }
        else
        {
            if (!string.IsNullOrEmpty(tecnica))
            {
                textoCabecera = string.Concat(textoCabecera, tecnica);
            }

            if (!string.IsNullOrEmpty(soporte))
            {
                if (!string.IsNullOrEmpty(tecnica))
                {
                    textoCabecera = string.Concat(textoCabecera, " ", @Html.Translate("SOBRE"), " ", soporte.ToLower());
                }
                else
                {
                    textoCabecera = string.Concat(textoCabecera, @Html.Translate("SOBRE"), " ", soporte.ToLower());
                }
            }
        }
    }
    // Dimensiones
    if (!string.IsNullOrEmpty(alto) && !string.IsNullOrEmpty(ancho) && !string.IsNullOrEmpty(unidadMedida))
    {
        textoCabecera = string.Concat(textoCabecera, ", ", alto, " x ", ancho, " ", unidadMedida);
    }
    else
    {
        if (!textoCabecera.EndsWith(". "))
        {
            textoCabecera = string.Concat(textoCabecera, ". ");
        }
    }

    if (!string.IsNullOrEmpty(urlImagenObra))
    {
        <section id="visor">
            <div class="metadata">
                <div class="artwork-name">@tituloObra</div>
                @{PintarAutorImagen(listaAutores);}
            </div>
            <div id="nav-content">
                <span class="botones">
                    <a id="visor-zoomin">@Html.Translate("ACERCAR")</a><a id="visor-zoomout">@Html.Translate("ALEJAR")</a>
                </span>
            </div>
            <a class="cerrar-audio">@Html.Translate("CERRAR")</a>
            <nav id="visor-barrainf">
                @if (propAudioguia != null && propAudioguia.PropertyValues != null && propAudioguia.PropertyValues.Count > 0)
                {
                    string urlAudioguia = ViewBag.BaseUrlContent + "/" + propAudioguia.FirstPropertyValue.RelatedEntity.GetFirstValuePropertyByPath("http://museodelprado.es/ontologia/pradomuseum.owl#audioFile");

                    if (!string.IsNullOrEmpty(urlAudioguia))
                    {
                        <div class="audioplayer">
                            <audio src="@urlAudioguia" preload="none" />
                        </div>
                    }
                }
                <ul>
                    <li class="miprado">
                        <a class="modal-popup activo" href="@urlAgnadirRecorrido"><span>@Html.Translate("MIPRADO")</span></a>
                    </li>
                    @if (propSignoguia != null && propSignoguia.PropertyValues != null && propSignoguia.PropertyValues.Count > 0)
                    {
                        string urlSignoguia = propSignoguia.FirstPropertyValue.RelatedEntity.GetFirstValuePropertyByPath("http://museodelprado.es/ontologia/pradomuseum.owl#url");

                        if (!string.IsNullOrEmpty(urlSignoguia))
                        {
                            <li class="signoguia">
                                <a href="@urlSignoguia" class="modal-videoPlayer"><span>@Html.Translate("SIGNOGUIA")</span></a>
                            </li>
                        }
                    }
                    @if (propAudioguia != null && propAudioguia.PropertyValues != null && propAudioguia.PropertyValues.Count > 0)
                    {
                        string urlAudioguia = propAudioguia.FirstPropertyValue.RelatedEntity.GetFirstValuePropertyByPath("http://museodelprado.es/ontologia/pradomuseum.owl#audioFile");

                        if (!string.IsNullOrEmpty(urlAudioguia))
                        {
                            <li class="audioguia"><span>@Html.Translate("AUDIOGUIA")</span></li>
                        }
                    }
                    <li class="descargar">
                        <a href="#descarga-modal" class="open-popup-link activo">
                            <span>Descargar</span>
                        </a>
                    </li>
                </ul>
            </nav>
            <!-- <a class="anclaInit">@Html.Translate("BAJAR")</a> -->
            <a href="#ficha-obra" class="scroll-to" title="Continuar a ficha de la obra">Continuar a ficha de la obra</a>
         <a href="#ficha-obra" class="scroll-to" title="Continuar a ficha de la obra">Continuar a ficha de la obra</a>
              <div id="descarga-modal" class="menu-modal mfp-hide">
                <div class="menu-modal-heading">Descargar</div>
                <div><a onclick="goMenuModal('@urlDescargaPersonal')"><p>@Html.Translate("USOPERSONAL")</p></a></div>
                <div><a onclick="goMenuModal('@urlDescargaComercial')"><p>@Html.Translate("USOCOMERCIAL")</p></a></div>
                <button title="Close (Esc)" type="button" class="mfp-close">×</button>
            </div>
        </section>
        <!-- Fin Visor Zoom -->
    }

    <!-- No tiene RDFa -->
    <section class="menu-nav">
        <nav>
            <div>
                @if (!string.IsNullOrEmpty(urlImagenObra))
                {
                    string urlImagenObraCompleta = ViewBag.BaseUrlContent + "/" + urlImagenObra;

                    <a href="javascript:irAScroll('visor');">
                        <img style="height:30px" src="@Html.ObtenerImagenConTamano(urlImagenObraCompleta, 93)" alt="Miniatura obra" />
                    </a>
                }
                <ul class="menu-normal">
                    <li class="menu-ficha-obra"><a>@Html.Translate("INICIO")</a></li>
                    @if (multimediaEnlazado != null && multimediaEnlazado.PropertyValues.Count > 0)
                    {
                        <li class="menu-multimedia"><a>@Html.Translate("MULTIMEDIA")</a></li>
                    }
                    <li class="menu-ficha"><a>@Html.Translate("FICHATECNICA")</a></li>
                    @if (propMasObras != null && propMasObras.PropertyValues != null && propMasObras.PropertyValues.Count > 0)
                    {
                        <li class="menu-mas-obras"><a>@Html.Translate("MASOBRAS")</a></li>
                    }
                    @if (propProductosTienda != null && propProductosTienda.PropertyValues != null && propProductosTienda.PropertyValues.Count > 0)
                    {
                        <li class="menu-tienda-prado"><a>@Html.Translate("TIENDAPRADO")</a></li>
                    }
                </ul>
                <div class="menu-small">
                    <select class="select-custom">
                        <option value="menu-visor">@Html.Translate("INICIO")</option>
                        @if (multimediaEnlazado != null && multimediaEnlazado.PropertyValues.Count > 0)
                        {
                            <option value="menu-multimedia">@Html.Translate("MULTIMEDIA")</option>
                        }
                        <option value="menu-ficha">@Html.Translate("FICHATECNICA")</option>
                        @if (propMasObras != null && propMasObras.PropertyValues != null && propMasObras.PropertyValues.Count > 0)
                        {
                            <option value="menu-mas-obras">@Html.Translate("MASOBRAS")</option>
                        }
                        @if (propProductosTienda != null && propProductosTienda.PropertyValues != null && propProductosTienda.PropertyValues.Count > 0)
                        {
                            <option value="menu-tienda-prado">@Html.Translate("TIENDAPRADO")</option>
                        }
                    </select>
                </div>
            </div>
        </nav>
    </section>
    <section @Html.Raw(semCmsModel.GetRDFANamespaces()) @Html.Raw(semCmsModel.GetRDFAEntity(semCmsModel.RootEntities[0]))>
        <!-- Si tiene RDFa -->
        <section class="ficha-obra" id="ficha-obra">
            @{
                PintarAutorLateral2(listaAutores, idiomaNav);
            }

            <div class="obra">
                <article>
                    @if (!string.IsNullOrEmpty(tituloObraAumentado))
                    {
                        <h1 @Html.Raw(semCmsModel.GetRDFAPropertyByPath("http://museodelprado.es/ontologia/ecidoc.owl#p102_E35_p3_has_title"))>@Html.Raw(tituloObraAumentado)</h1>
                    }
                    else
                    {
                        <h1 @Html.Raw(semCmsModel.GetRDFAPropertyByPath("http://museodelprado.es/ontologia/ecidoc.owl#p102_E35_p3_has_title"))>@tituloObra</h1>
                    }
                    @{
                        if (!string.IsNullOrEmpty(textoCabecera))
                        {
                                    <strong class="subtitulo">
                                        @Html.Raw(textoCabecera)     <br />
                                        @if (expuesto == "Expuesto" || expuesto == "On display")
                                {
                                    if (!string.IsNullOrEmpty(ubicacionObra))
                                    {
                                        if (idiomaNav.Equals("en"))
                                        {
                                            if (ubicacionObra.Contains("Sala"))
                                            {
                                                        <a href="@FichaDocumento.UrlSearch?cidoc:p55_has_current_location=@ubicacionObra&ordenarPor=pm:relevance">@ubicacionObra.Replace("Sala", "Room").Trim()</a>}
                                            else
                                            {
                                                        <a href="@FichaDocumento.UrlSearch?cidoc:p55_has_current_location=@ubicacionObra&ordenarPor=pm:relevance">@ubicacionObra</a>}
                                        }
                                        else
                                        {
                                                    <a href="@FichaDocumento.UrlSearch?cidoc:p55_has_current_location=@ubicacionObra&ordenarPor=pm:relevance">@ubicacionObra</a>}

                                    }
                                }
                                else
                                {
                                    switch (salaObra.ToLower())
                                    {
                                        case "depósito":
                                                    <span>@Html.Translate("DEPOSITO_OTRA_INSTITUCION")</span>
                                            break;
                                        case "exposición temporal":
                                                    <span>@Html.Translate("EN_EXPOSICION_TEMPORAL")</span>
                                            break;
                                        default:
                                                    <span>@Html.Translate("NO_EXPUESTO")</span>
                                            break;
                                    }

                                }
                                    </strong>
                        }

                        if (!string.IsNullOrEmpty(descripcionObra))
                        {

                            if (!string.IsNullOrEmpty(descripcionObraAumentado))
                            {
                                        <div class="colapsado normal" @Html.Raw(semCmsModel.GetRDFAPropertyByPath("http://www.cidoc-crm.org/cidoc-crm#p3_has_note"))>
                                            @Html.Raw(descripcionObraAumentado)
                                            @if (!string.IsNullOrEmpty(textoExtractado))
                                    {
                                                <p class="extract">@Html.Raw(textoExtractado)</p>}
                                        </div> }
                            else
                            {
                                        <div class="colapsado normal" @Html.Raw(semCmsModel.GetRDFAPropertyByPath("http://www.cidoc-crm.org/cidoc-crm#p3_has_note"))>
                                            @Html.Raw(descripcionObra)
                                            @if (!string.IsNullOrEmpty(textoExtractado))
                                    {
                                                <p class="extract">@Html.Raw(textoExtractado)</p>}
                                        </div> }
                        }

                                @*if (!string.IsNullOrEmpty(tituloObraAumentado) || !string.IsNullOrEmpty(descripcionObraAumentado))
                            {
                                <div class="switch red-blue">
                                    <input type="checkbox" class="switch-check" id="switchAnotacion" style="border: 0px; padding: 0px; margin-top: 0px;" checked>
                                    <label class="switch-label" for="switchAnotacion">
                                        <div class="op1">Marcar anotación</div>
                                        <div class="op2">Desmarcar anotación</div>
                                        <span></span>
                                    </label>
                                </div>    }*@

                        string inicio = semCmsModel.GetFirstValuePropertyByPath("http://museodelprado.es/ontologia/ecidoc.owl#p62_E52_p79_has_time-span_beginning");
                        string fin = semCmsModel.GetFirstValuePropertyByPath("http://museodelprado.es/ontologia/ecidoc.owl#p62_E52_p80_has_time-span_end");

                        HashSet<string> tipos = new HashSet<string>();
                        SemanticPropertyModel propTypePath = semCmsModel.GetPropertyByPath("http://www.cidoc-crm.org/cidoc-crm#p2_has_type");

                        if (propTypePath != null && propTypePath.PropertyValues != null && propTypePath.PropertyValues.Count() > 0)
                        {
                            foreach (SemanticPropertyModel.PropertyValue typePath in propTypePath.PropertyValues)
                            {
                                tipos.Add(typePath.RelatedEntity.GetFirstValuePropertyByPath("http://museodelprado.es/ontologia/pradomuseum.owl#objectTypeNode"));
                            }
                        }
                        bool estaEnCronoscopio = false;
                        if ((tipos.Contains("http://museodelprado.es/items/objecttype_6") ||
                        tipos.Contains("http://museodelprado.es/items/objecttype_8") ||
                        tipos.Contains("http://museodelprado.es/items/objecttype_20") ||
                        tipos.Contains("http://museodelprado.es/items/objecttype_155"))
                        && inicio != null && inicio.Length == 14 && int.Parse(inicio.Substring(0, 4)) >= 1100
                        && fin != null && fin.Length == 14 && int.Parse(fin.Substring(0, 4)) <= 1987)
                        {
                            estaEnCronoscopio = true;
                        }



                        if ((enciclopediaEnlazada != null && enciclopediaEnlazada.PropertyValues != null && enciclopediaEnlazada.PropertyValues.Count > 0) || (estaEnCronoscopio))
                        {
                                    <ul class="enlaces-pag">
                                        @if (enciclopediaEnlazada != null && enciclopediaEnlazada.PropertyValues != null && enciclopediaEnlazada.PropertyValues.Count > 0)
                                {
                                    string enlaceRecEnciclopedia = enciclopediaEnlazada.FirstPropertyValue.DownloadUrl;
                                            @*<li><a href="@enlaceRecEnciclopedia" class="enlace-pag">@Html.Translate("VERVOZDELAENCICLOPEDIA")</a></li>*@
                                            <li><a href="@enlaceRecEnciclopedia">@Html.Translate("VERVOZDELAENCICLOPEDIA")</a></li>
                                }
                                        @if (estaEnCronoscopio)
                                {
                                            <li><a target="_blank" class="cronoscopio" href="@Html.GetComunidad().Url/@Html.Translate("URL_CRONOSCOPIO")?search=@semCmsModel.RootEntities[0].Entity.Uri"><span>@Html.Translate("VER_OBRA_EN_LINEA_DEL_TIEMPO")</span></a></li>
                                }
                                    </ul>
                        }
                    }
                </article>
            </div>
            <div class="side-der">
                @{
                    if (editorEntidades)
                    {
                                <a class="botones-centrados bc-estandar hv-estandar sherlockAnotateArtwork" style="display:none">
                                    <span class="txt">Anotar</span>
                                </a>
                                <a class="botones-centrados bc-estandar hv-estandar sherlockDeleteAnotateArtwork" style="display:none">
                                    <span class="txt">Eliminar anotación</span>
                                </a>
                        string revised = "true";
                        string nerRevisedEs = semCmsModel.GetFirstValuePropertyByPath("http://museodelprado.es/ontologia/pradomuseum.owl#nerRevisedEs");
                        string nerRevisedEn = semCmsModel.GetFirstValuePropertyByPath("http://museodelprado.es/ontologia/pradomuseum.owl#nerRevisedEn");

                        if (((idiomaNav == "es" && nerRevisedEs != null && (nerRevisedEs == Html.GetText("COMMON", "NO") || nerRevisedEs.ToLower() == "false"))) ||
                           ((idiomaNav == "en" && nerRevisedEn != null && (nerRevisedEn == Html.GetText("COMMON", "NO") || nerRevisedEn.ToLower() == "false"))))
                        {
                            revised = "false";
                        }
                                <a revised="@revised" class="botones-centrados bc-estandar hv-estandar hh sherlockSaveAnotateArtwork" style="display:none">
                                    <span class="txt">Guardar/Revisar</span>
                                </a>

                                <script>
                                    $(document).ready(function () {
                                    @if (!string.IsNullOrEmpty(tituloObra))
                            {
                                    @Html.Raw("comportamientoAnotacion.title=\"" + tituloObra.Replace("\"", "\\\"") + "\";");
                            }
                                    @if (!string.IsNullOrEmpty(descripcionObra))
                            {
                                    @Html.Raw("comportamientoAnotacion.description=\"" + descripcionObra.Replace("\"", "\\\"") + "\";");
                            }
                                    @if (!string.IsNullOrEmpty(tituloObraAumentado))
                            {
                                    @Html.Raw("comportamientoAnotacion.titleAugmented=\"" + tituloObraAumentado.Replace("\"", "\\\"") + "\";");
                            }
                                    @if (!string.IsNullOrEmpty(descripcionObraAumentado))
                            {
                                    @Html.Raw("comportamientoAnotacion.descriptionAugmented=\"" + descripcionObraAumentado.Replace("\"", "\\\"") + "\";");
                            }
                                });
                                </script>

                    }
                }
                @{
                    SemanticPropertyModel propTags = semCmsModel.GetPropertyByPath("http://purl.org/muto/core#tagLabel");

                    if (propTags != null && propTags.PropertyValues != null && propTags.PropertyValues.Count > 0)
                    {
                                <h1>@Html.Translate("ETIQUETAS")</h1>
                                <div class="tags">
                                    @{int numTag = 0;
                                foreach (SemanticPropertyModel.PropertyValue propTag in propTags.PropertyValues)
                                {
                                    if (numTag < 6)
                                    {
                                                        <span @Html.Raw(semCmsModel.GetRDFAPropertyByPath("http://purl.org/muto/core#tagLabel"))><a href="@FichaDocumento.UrlSearch?search=@propTag.Value.ToLower()&ordenarPor=pm:relevance">@propTag.Value</a></span>
                                    }
                                    numTag++;
                                }
                                if (numTag > 6)
                                {
                                    numTag = 0;
                                                    <div class="oculto">
                                                        @foreach (SemanticPropertyModel.PropertyValue propTag in propTags.PropertyValues)
                                        {
                                            if (numTag >= 6)
                                            {
                                                                <span @Html.Raw(semCmsModel.GetRDFAPropertyByPath("http://purl.org/muto/core#tagLabel"))><a href="@FichaDocumento.UrlSearch?search=@propTag.Value.ToLower()&ordenarPor=pm:relevance">@propTag.Value</a></span>
                                            }
                                            numTag++;
                                        }
                                                    </div>
                                                    <span class="mas-info"><a onclick="muestraTags()">+</a></span>
                                }
                                    }
                                </div> }
                            <h2>@Html.Translate("RDF")</h2>
                            <p><a class="ico-rdf" href="@Html.GetURLRDF()">RDF</a></p>

                }
            </div>
        </section>
        @{
            SemanticPropertyModel propRecursosMultimedia = semCmsModel.GetPropertyByPath("http://museodelprado.es/ontologia/pradomuseum.owl#i_artwork_multimediaresource");
            List<object> recMultimediaJsonLD = null;

            if (propRecursosMultimedia != null && propRecursosMultimedia.PropertyValues != null && propRecursosMultimedia.PropertyValues.Count > 0)
            {
                recMultimediaJsonLD = new List<object>();

                        <section class="multimedia" id="multimedia">
                            <h2 class="heading">@Html.Translate("MULTIMEDIA")</h2>
                            <div class="carousel inactive">
                                @foreach (SemanticPropertyModel.PropertyValue recursoMultimedia in propRecursosMultimedia.PropertyValues)
                        {
                            string tituloRM = "";
                            string urlInteractivo = "";
                            SemanticPropertyModel propTituloInteractivo = recursoMultimedia.RelatedEntity.GetPropertyByPath("http://purl.org/vocab/frbr/core#p3020_has_title_of_the_manifestation");
                            if (propTituloInteractivo != null && propTituloInteractivo.PropertyValues.Count > 0)
                            {
                                tituloRM = propTituloInteractivo.FirstPropertyValue.Value;
                                urlInteractivo = propTituloInteractivo.FirstPropertyValue.DownloadUrl;
                            }

                            string descripcionRM = recursoMultimedia.RelatedEntity.GetFirstValuePropertyByPath("http://purl.org/vocab/frbr/core#p3016_has_summarization_of_content");
                            string duracionRM = recursoMultimedia.RelatedEntity.GetFirstValuePropertyByPath("http://museodelprado.es/ontologia/pradomuseum.owl#duration");
                            string urlRM = recursoMultimedia.RelatedEntity.GetFirstValuePropertyByPath("http://museodelprado.es/ontologia/pradomuseum.owl#url");
                            string imagenRM = recursoMultimedia.RelatedEntity.GetFirstValuePropertyByPath("http://museodelprado.es/ontologia/pradomuseum.owl#image");
                            string tipo = recursoMultimedia.RelatedEntity.GetFirstValuePropertyByPath("http://www.w3.org/1999/02/22-rdf-syntax-ns#type");

                            string tipoRM = string.Empty;

                            if (!string.IsNullOrEmpty(tipo) && tipo.Contains('#'))
                            {
                                tipoRM = tipo.Split(new Char[] { '#' }).Last();
                            }

                            Dictionary<string, List<object>> recMultiJsonLD = new Dictionary<string, List<object>>();
                            if (tipoRM.Equals("Audio") || tipoRM.Equals("Audioguide"))
                            {
                                recMultiJsonLD.Add("@type", new List<object>(new string[] { "AudioObject" }));
                            }
                            else if (tipoRM.Equals("Video") || tipoRM.Equals("Signguide"))
                            {
                                recMultiJsonLD.Add("@type", new List<object>(new string[] { "VideoObject" }));

                                if (!string.IsNullOrEmpty(urlRM))
                                {
                                    recMultiJsonLD.Add("embedUrl", new List<object>(new string[] { urlRM }));
                                }
                            }
                            else
                            {
                                recMultiJsonLD.Add("@type", new List<object>(new string[] { "MediaObject" }));
                            }


                            if (!string.IsNullOrEmpty(tituloRM))
                            {
                                recMultiJsonLD.Add("name", new List<object>(new string[] { tituloRM }));
                            }

                            if (!string.IsNullOrEmpty(imagenRM))
                            {
                                recMultiJsonLD.Add("thumbnailUrl", new List<object>(new string[] { ViewBag.BaseUrlContent + "/" + imagenRM }));
                            }

                            if (!string.IsNullOrEmpty(descripcionRM))
                            {
                                recMultiJsonLD.Add("description", new List<object>(new string[] { descripcionRM }));
                            }

                            if (FichaDocumento.PublishDate != null)
                            {
                                recMultiJsonLD.Add("uploadDate", new List<object>(new string[] { FichaDocumento.PublishDate.ToString("yyyy/MM/dd") }));
                            }

                            recMultimediaJsonLD.Add(recMultiJsonLD);

                            if (tipoRM.Equals("Interactive"))
                            {
                                        <div class="slide">
                                            <figure>
                                                @if (string.IsNullOrEmpty(imagenRM))
                                        {
                                                    <div class="thumb imgwrap">
                                                        <a href="@urlInteractivo">
                                                            <div class="no-img">
                                                                <div class="outer">
                                                                    <span>@Html.Translate("IMAGENNODISPONIBLE")</span>
                                                                </div>
                                                            </div>
                                                        </a>
                                                    </div>
                                        }
                                        else
                                        {
                                                    <a href="@urlInteractivo">
                                                        @if (!string.IsNullOrEmpty(imagenRM))
                                                {
                                                            <img alt="@tituloRM" src="@ViewBag.BaseURLContent/@imagenRM" />
                                                }
                                                    </a>
                                        }
                                                <figcaption>
                                                    @if (!string.IsNullOrEmpty(tipoRM))
                                            {
                                                        <div class="media-type">@Html.Translate("INTERACTIVO")</div>
                                            }
                                                    @if (!string.IsNullOrEmpty(tituloRM))
                                            {
                                                        <h3 class="name"><a href="@urlInteractivo">@tituloRM</a></h3>
                                            }
                                                </figcaption>
                                            </figure>
                                        </div>
                            }
                            else if (urlRM.ToLower().Contains("instagram")|| urlRM.ToLower().Contains("tiktok"))
                            {
                                        <div class="slide video">
                                            <figure>
                                                <a href="@urlInteractivo">
                                                    @if (!string.IsNullOrEmpty(duracionRM))
                                            {
                                                        <span class="duracion">@duracionRM</span>
                                            }
                                                    @if (!string.IsNullOrEmpty(imagenRM))
                                            {
                                                string imagenRMUrlCompleta = string.Concat(ViewBag.BaseUrlContent, "/", imagenRM);
                                                        <img alt="" src="@Html.ObtenerImagenConTamano(imagenRMUrlCompleta, 300)" onclick="" />
                                            }
                                            else
                                            {
                                                        <img alt="" src="img/provisionales/miniatura_multimedia.png" onclick="" />
                                            }
                                                </a>
                                                <figcaption>
                                                    @if (!string.IsNullOrEmpty(tipoRM))
                                            {
                                                        <div class="media-type">@tipoRM</div>
                                            }
                                                    @if (!string.IsNullOrEmpty(tituloRM))
                                            {
                                                        <h3 class="name"><a href="@urlInteractivo">@tituloRM</a></h3>
                                            }
                                                </figcaption>
                                            </figure>
                                        </div>
                            }
                            else if (!string.IsNullOrEmpty(urlRM))
                            {
                                        <div class="slide video">
                                            <figure>
                                                <a href="@urlRM" class="modal-videoPlayer">
                                                    @if (!string.IsNullOrEmpty(duracionRM))
                                            {
                                                        <span class="duracion">@duracionRM</span>
                                            }
                                                    @if (!string.IsNullOrEmpty(imagenRM))
                                            {
                                                string imagenRMUrlCompleta = string.Concat(ViewBag.BaseUrlContent, "/", imagenRM);
                                                        <img alt="" src="@Html.ObtenerImagenConTamano(imagenRMUrlCompleta, 300)" onclick="" />
                                            }
                                            else
                                            {
                                                        <img alt="" src="img/provisionales/miniatura_multimedia.png" onclick="" />
                                            }
                                                </a>
                                                <figcaption>
                                                    @if (!string.IsNullOrEmpty(tipoRM))
                                            {
                                                        <div class="media-type">@tipoRM</div>
                                            }
                                                    @if (!string.IsNullOrEmpty(tituloRM))
                                            {
                                                        <h3 class="name"><a href="@urlRM" class="modal-videoPlayer">@tituloRM</a></h3>
                                            }
                                                </figcaption>
                                            </figure>
                                        </div>
                            }
                        }
                            </div>
                            <div class="ver-mas-multimedia"><a href="@Html.GetComunidad().Url/@Html.Translate("URLBUSQUEDACONTENIDOCOLECCION")?rdf:type=multimediaresource">@Html.Translate("VERMASMULTIMEDIA")</a></div>
                        </section>
            }
        }
        <!-- Si tiene RDFa -->
        <section class="ficha" id="ficha">
            <h1><span>@Html.Translate("FICHATECNICA")</span></h1>
            <div class="stick-container">
                <div class="imagenes">
                    @{
                        // RDFa de la entidad Visual_Item
                        string rdfaEntidadVisualItem = string.Empty;

                        if (propimagenes != null && propimagenes.FirstPropertyValue != null)
                        {
                            rdfaEntidadVisualItem = propimagenes.FirstPropertyValue.RelatedEntity.GetRDFA();
                        }


                        if (!string.IsNullOrEmpty(urlImagenObra))
                        {
                                    <!-- section-viewer -->
                                    <div class="section-viewer">
                                        @{

                                    if (propimagenes != null && propimagenes.PropertyValues != null && propimagenes.PropertyValues.Count > 0)
                                    {
                                        //Primero agregamos la principal
                                        foreach (SemanticPropertyModel.PropertyValue propImagen in propimagenes.PropertyValues)
                                        {
                                            string urlImagen = propImagen.RelatedEntity.GetFirstValuePropertyByPath("http://museodelprado.es/ontologia/ecidoc.owl#p3_has_note");
                                            if (urlImagen == urlImagenPrincipal)
                                            {
                                                string anchoImagen = propImagen.RelatedEntity.GetFirstValuePropertyByPath("http://museodelprado.es/ontologia/pradomuseum.owl#imageWidth");
                                                string altoImagen = propImagen.RelatedEntity.GetFirstValuePropertyByPath("http://museodelprado.es/ontologia/pradomuseum.owl#imageHeight");

                                                if (!string.IsNullOrEmpty(urlImagen))
                                                {
                                                    string urlAux = ViewBag.BaseUrlContent + "/" + urlImagen;
                                                    listaImagenesObraAnchoAlto.Add(new Tuple<string, string, string>(urlAux, anchoImagen, altoImagen));
                                                }
                                            }
                                        }
                                        //Luego el resto
                                        foreach (SemanticPropertyModel.PropertyValue propImagen in propimagenes.PropertyValues)
                                        {
                                            string urlImagen = propImagen.RelatedEntity.GetFirstValuePropertyByPath("http://museodelprado.es/ontologia/ecidoc.owl#p3_has_note");
                                            if (urlImagen != urlImagenPrincipal)
                                            {
                                                string anchoImagen = propImagen.RelatedEntity.GetFirstValuePropertyByPath("http://museodelprado.es/ontologia/pradomuseum.owl#imageWidth");
                                                string altoImagen = propImagen.RelatedEntity.GetFirstValuePropertyByPath("http://museodelprado.es/ontologia/pradomuseum.owl#imageHeight");

                                                if (!string.IsNullOrEmpty(urlImagen))
                                                {
                                                    string urlAux = ViewBag.BaseUrlContent + "/" + urlImagen;
                                                    listaImagenesObraAnchoAlto.Add(new Tuple<string, string, string>(urlAux, anchoImagen, altoImagen));
                                                }
                                            }
                                        }
                                    }
                                        }
                                        @if (listaImagenesObraAnchoAlto.Count > 0)
                                {
                                            <!-- main -->
                                            <div class="main">
                                                @{
                                            int numObra = 0;
                                            foreach (Tuple<string, string, string> imagen in listaImagenesObraAnchoAlto)
                                            {
                                                                <div class="slide">
                                                                    <a onclick="javascript:muestraImagen(@numObra);">
                                                                        <img data-lazy="@Html.ObtenerImagenConTamano(imagen.Item1, 832)" data-pyr="@imagen.Item1.Replace(".jpg", "/")" class="img_cache" data-width="@imagen.Item2" data-height="@imagen.Item3">
                                                                        <noscript><img alt=" " src="@Html.ObtenerImagenConTamano(imagen.Item1, 832)"></noscript>
                                                                        <span class="help">@Html.Translate("CLICKPARAAMPLIAR")</span>
                                                                    </a>
                                                                </div>
                                                numObra++;
                                            }
                                                }
                                            </div>
                                            <!-- /main -->
                                            <script>
                                                $(document).ready(function () {
                                                    $('.help').addClass('off');
                                                    $('.section-viewer .main').on('afterChange', function (event, slick, currentSlide) {
                                                        $('.help').removeClass('off');
                                                        var timeoutHelp = window.setTimeout(function () {
                                                            $('.help').addClass('off');
                                                        }, 2000);
                                                    });
                                                });
                                            </script>

                                }
                                        <!--Sólo se muestra el carrusel si la obra tiene más de una imagen-->
                                        @if (listaImagenesObraAnchoAlto.Count > 1)
                                {
                                            <!-- thumbnails -->
                                            <div class="thumbnails">
                                                @foreach (Tuple<string, string, string> imagen in listaImagenesObraAnchoAlto)
                                        {
                                                    <div class="slide">
                                                        <img src="@Html.ObtenerImagenConTamano(imagen.Item1, 268)">
                                                    </div>
                                        }
                                            </div>
                                            <!-- /thumbnails -->
                                }
                                    </div>
                                    <!-- section-viewer -->
                        }
                        else
                        {
                                    <div class="no-img">
                                        <div class="outer">
                                            <span>@Html.Translate("IMAGENNODISPONIBLE")</span>
                                        </div>
                                    </div>
                        }
                        if (propMarcoRelacionado != null && propMarcoRelacionado.PropertyValues != null && propMarcoRelacionado.PropertyValues.Count > 0)
                        {
                            string extraHtmlPagObrasRelacionadas = "";
                            if (propMarcoRelacionado.OntologyPropInfo.NumEntitiesForPage > 0)
                            {
                                extraHtmlPagObrasRelacionadas = "aux=\"" + propMarcoRelacionado.EntityParent.SemanticResourceModel.MvcActionsUrl + "/load-more-entities-selector|" + propMarcoRelacionado.EntityParent.Key + "|" + propMarcoRelacionado.Element.Propiedad.Nombre + "|" + propMarcoRelacionado.OntologyPropInfo.NumEntitiesForPage + "|" + propMarcoRelacionado.OntologyPropInfo.TotalEntitiesPagination + "\"";
                            }
                                    <div class="obras-relacionadas" @Html.Raw(extraHtmlPagObrasRelacionadas)>
                                        <h2>@titularMarcoRelacionado</h2>
                                        @Html.PartialView(propMarcoRelacionado.SpecificationProperty.VistaPersonalizadaPaginacion, propMarcoRelacionado)
                                        @if (propMarcoRelacionado.OntologyPropInfo.NumEntitiesForPage > 0)
                                {
                                            <div class="ver-mas-general"><a>@Html.Translate("VERMAS")</a></div>
                                }
                                    </div>
                        }
                        if (propObraPrincipalMarco != null && propObraPrincipalMarco.PropertyValues != null && propObraPrincipalMarco.PropertyValues.Count > 0)
                        {
                            string extraHtmlPagObrasRelacionadas = "";
                            if (propObraPrincipalMarco.OntologyPropInfo.NumEntitiesForPage > 0)
                            {
                                extraHtmlPagObrasRelacionadas = "aux=\"" + propObraPrincipalMarco.EntityParent.SemanticResourceModel.MvcActionsUrl + "/load-more-entities-selector|" + propObraPrincipalMarco.EntityParent.Key + "|" + propObraPrincipalMarco.Element.Propiedad.Nombre + "|" + propObraPrincipalMarco.OntologyPropInfo.NumEntitiesForPage + "|" + propObraPrincipalMarco.OntologyPropInfo.TotalEntitiesPagination + "\"";
                            }
                                    <div class="obras-relacionadas" @Html.Raw(extraHtmlPagObrasRelacionadas)>
                                        <h2>@titularObraPrincipalMarco</h2>
                                        @foreach (SemanticPropertyModel.PropertyValue propObra in propObraPrincipalMarco.PropertyValues)
                                {

                                    SemanticPropertyModel obraRelacionada = propObra.RelatedEntity.GetPropertyByPath("http://museodelprado.es/ontologia/pradomuseum.owl#art_work");
                                            @Html.PartialView(propObraPrincipalMarco.SpecificationProperty.VistaPersonalizadaPaginacion, obraRelacionada)
                                }

                                        @if (propObraPrincipalMarco.OntologyPropInfo.NumEntitiesForPage > 0)
                                {
                                            <div class="ver-mas-general"><a>@Html.Translate("VERMAS")</a></div>
                                }
                                    </div>
                        }

                        if (propObrasRelacionadas != null && propObrasRelacionadas.PropertyValues != null && propObrasRelacionadas.PropertyValues.Count > 0)
                        {
                            string extraHtmlPagObrasRelacionadas = "";
                            if (propObrasRelacionadas.OntologyPropInfo.NumEntitiesForPage > 0)
                            {
                                extraHtmlPagObrasRelacionadas = "aux=\"" + propObrasRelacionadas.EntityParent.SemanticResourceModel.MvcActionsUrl + "/load-more-entities-selector|" + propObrasRelacionadas.EntityParent.Key + "|" + propObrasRelacionadas.Element.Propiedad.Nombre + "|" + propObrasRelacionadas.OntologyPropInfo.NumEntitiesForPage + "|" + propObrasRelacionadas.OntologyPropInfo.TotalEntitiesPagination + "\"";
                            }
                                    <div class="obras-relacionadas" @Html.Raw(extraHtmlPagObrasRelacionadas)>
                                        <h2>@Html.Translate("OBRASRELACIONADAS")</h2>
                                        @foreach (SemanticPropertyModel.PropertyValue propObra in propObrasRelacionadas.PropertyValues)
                                {

                                    SemanticPropertyModel obraRelacionada = propObra.RelatedEntity.GetPropertyByPath("http://museodelprado.es/ontologia/pradomuseum.owl#art_work");
                                            @Html.PartialView(propObrasRelacionadas.SpecificationProperty.VistaPersonalizadaPaginacion, obraRelacionada)
                                }
                                        @if (propObrasRelacionadas.OntologyPropInfo.NumEntitiesForPage > 0)
                                {
                                            <div class="ver-mas-general"><a>@Html.Translate("VERMAS")</a></div>
                                }
                                    </div>
                        }

                    }
                </div>
                <div class="ficha-tecnica">
                    <dl>
                        @{
                            //RDFa entidad Identifier
                            SemanticPropertyModel propIdentifier = semCmsModel.GetPropertyByPath("http://www.cidoc-crm.org/cidoc-crm#p48_has_preferred_identifier");
                            string rdfaEntidadIdentifier = string.Empty;
                            if (propIdentifier != null && propIdentifier.FirstPropertyValue != null)
                            {
                                rdfaEntidadIdentifier = propIdentifier.FirstPropertyValue.RelatedEntity.GetRDFA();
                            }


                                    <dt>@titularNumCatalogo</dt>
                                    <dd @Html.Raw(semCmsModel.GetRDFAPropertyByPath("http://www.cidoc-crm.org/cidoc-crm#p48_has_preferred_identifier"))>
                                        <span @Html.Raw(rdfaEntidadIdentifier)>
                                            <span @Html.Raw(semCmsModel.GetRDFAPropertyByPath("http://www.cidoc-crm.org/cidoc-crm#p48_has_preferred_identifier@@@http://www.cidoc-crm.org/cidoc-crm#p102_has_title"))>@numeroCatalogo</span>
                                        </span>
                                    </dd>
                        }
                        @if (!string.IsNullOrEmpty(titularAutor))
                        {

                            if (listaAutores.Count > 1)
                            {
                                <dt>@Html.Translate("AUTORES")</dt>
                            }
                            else if (listaAutores.Count > 0 && listaAutores[0].generoAutor == "http://museodelprado.es/items/gender_female")
                            {
                                <dt>@Html.Translate("AUTORA")</dt>
                            }
                            else
                            {
                                <dt>@titularAutor</dt>
                            }
                            PintarAutorFichaTecnica(listaAutores, semCmsModel);

                        }
                        @if (!string.IsNullOrEmpty(titularTitulo) && !string.IsNullOrEmpty(tituloObra))
                        {
                            <dt>@titularTitulo</dt>
                            <dd><em>@tituloObra</em></dd>
                        }
                        @if (!string.IsNullOrEmpty(titularFecha) && !string.IsNullOrEmpty(fechaTextualFichaTecnica))
                        {
                            <dt>@titularFecha</dt>
                            <dd @Html.Raw(semCmsModel.GetRDFAPropertyByPath("http://museodelprado.es/ontologia/edate.owl#textDate"))>@fechaTextualFichaTecnica</dd>
                        }
                        @if (!string.IsNullOrEmpty(titularTecnica) && !string.IsNullOrEmpty(tecnicas))
                        {
                            <dt>@titularTecnica</dt>
                            <dd>@Html.Raw(tecnicas)</dd>
                        }
                        @{

                            if (!string.IsNullOrEmpty(titularMateria) && !string.IsNullOrEmpty(materias))
                            {
                                        <dt>@titularMateria</dt>
                                        <dd>@Html.Raw(materias)</dd>
                            }

                            if (!string.IsNullOrEmpty(titularSoporte) && !string.IsNullOrEmpty(soportes))
                            {

                                        <dt>@titularSoporte</dt>
                                        <dd>@Html.Raw(soportes)</dd>
                            }

                        }
                        @{
                            // # region Medidas

                            if (propDimensiones != null && propDimensiones.PropertyValues != null && propDimensiones.PropertyValues.Count() > 0)
                            {
                                        <dt>@titularMedidas</dt>
                                        <dd>
                                            @{
                                        foreach (SemanticPropertyModel.PropertyValue propDimension in propDimensiones.PropertyValues)
                                        {
                                            E54_Dimension dimension = new E54_Dimension(propDimension.RelatedEntity, idiomaUsuario);
                                            string textoMedida = GetHtmlDimension(dimension, false);
                                            if (!propDimension.Equals(propDimensiones.PropertyValues.Last()))
                                            {
                                                textoMedida = textoMedida + ";";
                                            }

                                            if (!string.IsNullOrEmpty(textoMedida))
                                            {
                                                                <span @Html.Raw(semCmsModel.GetRDFAProperty(propDimension.Property))>
                                                                    <span @Html.Raw(semCmsModel.GetRDFAEntity(propDimension.RelatedEntity))>
                                                                        <span>@Html.Raw(textoMedida)</span>
                                                                    </span>
                                                                </span>
                                            }
                                        }
                                            }
                                        </dd>

                                // #endregion medidas
                            }
                        }
                        @{
                            string serie = semCmsModel.GetFirstValuePropertyByPath("http://museodelprado.es/ontologia/ecidoc.owl#p46i_E78_p102_forms_part_of");
                            string numSerie = semCmsModel.GetFirstValuePropertyByPath("http://museodelprado.es/ontologia/ecidoc.owl#p46i_E78_p102_number");

                            if (!string.IsNullOrEmpty(serie) && !string.IsNullOrEmpty(titularSerie))
                            {
                                if (!string.IsNullOrEmpty(numSerie))
                                {
                                    serie += ", " + numSerie;
                                }
                                        <dt>@titularSerie</dt>
                                        <dd @Html.Raw(semCmsModel.GetRDFAPropertyByPath("http://museodelprado.es/ontologia/ecidoc.owl#p46i_E78_p102_forms_part_of"))>@serie</dd>
                            }
                        }
                        @{
                            string lugarProduccionCeca = string.Empty;
                            if (!string.IsNullOrEmpty(titularLugarProduccionCeca))
                            {
                                SemanticPropertyModel propLugarProduccionCecaPath = semCmsModel.GetPropertyByPath("http://www.cidoc-crm.org/cidoc-crm#p7_took_place_at_ceca");
                                if (propLugarProduccionCecaPath != null && propLugarProduccionCecaPath.PropertyValues != null && propLugarProduccionCecaPath.PropertyValues.Count() > 0)
                                {
                                    foreach (SemanticPropertyModel.PropertyValue placePath in propLugarProduccionCecaPath.PropertyValues)
                                    {
                                        SemanticPropertyModel propProdPlaceCecaNode = placePath.RelatedEntity.GetPropertyByPath("http://museodelprado.es/ontologia/pradomuseum.owl#prodPlaceCecaNode");
                                        if (propProdPlaceCecaNode != null && propProdPlaceCecaNode.PropertyValues != null && propProdPlaceCecaNode.PropertyValues.Count() > 0)
                                        {
                                            lugarProduccionCeca = propProdPlaceCecaNode.PropertyValues.Last().RelatedEntity.GetFirstValuePropertyByPath("http://www.w3.org/2008/05/skos#prefLabel");
                                        }
                                    }
                                }
                            }
                        }
                        @{
                            string lugarProduccion = string.Empty;
                            if (!string.IsNullOrEmpty(titularLugarProduccion))
                            {
                                SemanticPropertyModel propLugarProduccionPath = semCmsModel.GetPropertyByPath("http://www.cidoc-crm.org/cidoc-crm#p7_took_place_at");
                                if (propLugarProduccionPath != null && propLugarProduccionPath.PropertyValues != null && propLugarProduccionPath.PropertyValues.Count() > 0)
                                {
                                    foreach (SemanticPropertyModel.PropertyValue placePath in propLugarProduccionPath.PropertyValues)
                                    {
                                        SemanticPropertyModel propProdPlaceNode = placePath.RelatedEntity.GetPropertyByPath("http://museodelprado.es/ontologia/pradomuseum.owl#prodPlaceNode");
                                        if (propProdPlaceNode != null && propProdPlaceNode.PropertyValues != null && propProdPlaceNode.PropertyValues.Count() > 0)
                                        {
                                            lugarProduccion = propProdPlaceNode.PropertyValues.Last().RelatedEntity.GetFirstValuePropertyByPath("http://www.w3.org/2008/05/skos#prefLabel");
                                        }
                                    }
                                }
                            }
                        }
                        @{


                            if (!string.IsNullOrEmpty(lugarProduccionCeca) && !string.IsNullOrEmpty(titularLugarProduccionCeca))
                            {
                                        <dt>@titularLugarProduccionCeca</dt>
                                        <dd @Html.Raw(semCmsModel.GetRDFAPropertyByPath("http://www.cidoc-crm.org/cidoc-crm#p7_took_place_at"))>@lugarProduccionCeca</dd>
                            }
                        }
                        @{
                            if (!string.IsNullOrEmpty(lugarProduccion) && !string.IsNullOrEmpty(titularLugarProduccion))
                            {
                                        <dt>@titularLugarProduccion</dt>
                                        <dd @Html.Raw(semCmsModel.GetRDFAPropertyByPath("http://www.cidoc-crm.org/cidoc-crm#p7_took_place"))>@lugarProduccion</dd>
                            }
                        }
                        @{
                            string edicionEstado = semCmsModel.GetFirstValuePropertyByPath("http://museodelprado.es/ontologia/ecidoc.owl#p108_edition_state");

                            if (!string.IsNullOrEmpty(edicionEstado) && !string.IsNullOrEmpty(titularEdicionEstado))
                            {
                                        <dt>@titularEdicionEstado</dt>
                                        <dd @Html.Raw(semCmsModel.GetRDFAPropertyByPath("http://museodelprado.es/ontologia/ecidoc.owl#p108_edition_state"))>@edicionEstado</dd>
                            }
                        }
                        @{
                            string procedencia = semCmsModel.GetFirstValuePropertyByPath("http://www.cidoc-crm.org/cidoc-crm#p27_moved_from");

                            if (!string.IsNullOrEmpty(procedencia) && !string.IsNullOrEmpty(titularProcedencia))
                            {
                                        <dt>@titularProcedencia</dt>
                                        <dd @Html.Raw(semCmsModel.GetRDFAPropertyByPath("http://www.cidoc-crm.org/cidoc-crm#p27_moved_from"))>@procedencia</dd>
                            }
                        }
                        @if (Pm_frame != null && !string.IsNullOrEmpty(Pm_frame.Ecidoc_p15_was_influenced_by))
                        {
                            <dt>@Pm_frame.GetLabel(nameof(Pm_frame.Ecidoc_p15_was_influenced_by), idiomaUsuario)</dt>
                            <dd @Html.Raw(Pm_frame.GetPropertyURI(nameof(Pm_frame.Ecidoc_p15_was_influenced_by)))>@Pm_frame.Ecidoc_p15_was_influenced_by</dd>
                        }
                        @if (Pm_frame != null && !string.IsNullOrEmpty(Pm_frame.Pm_structure))
                        {
                            <dt>@Pm_frame.GetLabel(nameof(Pm_frame.Pm_structure), idiomaUsuario)</dt>
                            <dd @Html.Raw(Pm_frame.GetPropertyURI(nameof(Pm_frame.Pm_structure)))>@Pm_frame.Pm_structure</dd>
                        }
                        @if (Pm_frame != null && !string.IsNullOrEmpty(Pm_frame.Cidoc_p32_used_general_technique))
                        {
                            <dt>@Pm_frame.GetLabel(nameof(Pm_frame.Cidoc_p32_used_general_technique), idiomaUsuario)</dt>
                            <dd @Html.Raw(Pm_frame.GetPropertyURI(nameof(Pm_frame.Cidoc_p32_used_general_technique)))>@Pm_frame.Cidoc_p32_used_general_technique</dd>
                        }
                        @if (Pm_frame != null && Pm_frame.Pm_decoration.Any())
                        {
                            <dt>@Pm_frame.GetLabel(nameof(Pm_frame.Pm_decoration), idiomaUsuario)</dt>
                            <dd @Html.Raw(Pm_frame.GetPropertyURI(nameof(Pm_frame.Pm_decoration)))>
                                @foreach (List<ConceptNode> listaNodos in Pm_frame.Pm_decoration)
                                {
                                    string textoDeco = "";
                                    //foreach (ConceptNode concept in listaNodos)
                                    //{
                                    //    if (listaNodos.IndexOf(concept) == 1)
                                    //    {
                                    //        textoDeco += " (";
                                    //    }
                                    //    if (listaNodos.IndexOf(concept) > 1)
                                    //    {
                                    //        textoDeco += "; ";
                                    //    }
                                    //    textoDeco += concept.Skos_prefLabel;
                                    //    if (listaNodos.Last() == concept && listaNodos.First() != concept)
                                    //    {
                                    //        textoDeco += ")";
                                    //    }

                                    //}
                                    textoDeco += listaNodos.Last().Skos_prefLabel;
                                    if (Pm_frame.Pm_decoration.Last() != listaNodos)
                                    {
                                        textoDeco += "</br>";
                                    }

                                    @Html.Raw(textoDeco);
                                }

                            </dd>

                        }

                    </dl>
                    @{
                        // #region Catalogacion marco

                        if (Pm_frame != null && (Pm_frame.Cidoc_p65_shows_visual_item.Count > 0 || !string.IsNullOrEmpty(Pm_frame.Pm_modelType)))
                        {
                                    <div class="dsp">
                                        @{
                                                    <h2>@Pm_frame.GetLabel(nameof(Pm_frame.Pm_modelType), idiomaUsuario) <span class='ico'>+</span></h2>
                                                    <p class="mostrable">
                                                        @{

                                            if (!string.IsNullOrEmpty(Pm_frame.Pm_modelType))
                                            {
                                                                        <span about="@Pm_frame.GNOSSID" property="@Pm_frame.GetPropertyURI(nameof(Pm_frame.Pm_modelType))">
                                                                            @Pm_frame.Pm_modelType
                                                                        </span>
                                            }
                                                        }
                                                    </p>
                                    if (Pm_frame.Cidoc_p65_shows_visual_item.Count > 0)
                                    {
                                                        <div class="section-viewer-marco mostrable oculto" style="margin-top:-13px;">
                                                            <div class="thumbnails">
                                                                @foreach (Tuple<string, string, string> imagenTamagno in listaImagenesObraAnchoAlto)
                                                {
                                                    E36_Visual_Item imagen = Pm_frame.Cidoc_p65_shows_visual_item.Where(x => imagenTamagno.Item1 == ViewBag.BaseUrlContent + "/" + x.Ecidoc_p3_has_note).FirstOrDefault();
                                                    if (imagen != null)
                                                    {
                                                                        <div class="slide">
                                                                            <a onclick="javascript: muestraImagen(@listaImagenesObraAnchoAlto.IndexOf(imagenTamagno));"><img src="@ViewBag.BaseUrlContent/@Html.ObtenerImagenConTamano(imagen.Ecidoc_p3_has_note, 268)" width="@imagenTamagno.Item2" height="@imagenTamagno.Item3" alt=""></a>
                                                                        </div>
                                                    }
                                                }
                                                            </div>
                                                        </div>
                                    }
                                        }
                                        <script>
                                            $(document).ready(function () {
                                                function filiGalleryInit(e) {
                                                    var $filithumbs = $(e);
                                                    $filithumbs.each(function () {
                                                        this.count = $(this).find('> .slide').length;
                                                        var limite = ($(this).parent().parent().outerWidth()) / 118;
                                                        if (this.count >= limite) {
                                                            $(this).slick({
                                                                infinite: false,
                                                                arrows: true,
                                                                centerMode: false,
                                                                variableWidth: true,
                                                                dots: false,
                                                                focusOnSelect: true,
                                                                lazyLoad: 'ondemand',
                                                                swipe: false
                                                            });
                                                        }
                                                    });
                                                }
                                                filiGalleryInit('.section-viewer-marco .thumbnails');
                                            });
                                        </script>
                                    </div>
                        }

                        // #region Catalogacion marco
                    }
                    @{
                        // #region Bibliografía

                        if (propBiblio != null && propBiblio.PropertyValues != null && propBiblio.PropertyValues.Count > 0)
                        {
                                    <div class="dsp">
                                        <h2>@titularBibliografia <span class="ico">+</span></h2>
                                        @{
                                    SortedDictionary<int, List<SemanticPropertyModel.PropertyValue>> listaPropiedadesBibliografia = new SortedDictionary<int, List<SemanticPropertyModel.PropertyValue>>();

                                    //Creamos un diccionario ordenado cuya clave es el año (o 3000 si el año no tiene el formato correcto para que se pongan al final)
                                    foreach (SemanticPropertyModel.PropertyValue biblio in propBiblio.PropertyValues)
                                    {
                                        int anio = 0;
                                        if (biblio.RelatedEntity.GetPropertyByPath("http://museodelprado.es/ontologia/efrbrer.owl#P3055_has_date_of_publication_or_distribution") != null)
                                        {
                                            string fecha = biblio.RelatedEntity.GetPropertyByPath("http://museodelprado.es/ontologia/efrbrer.owl#P3055_has_date_of_publication_or_distribution").FirstPropertyValue.Value;

                                            System.Text.RegularExpressions.Regex regex = new System.Text.RegularExpressions.Regex(@"\d{4}");
                                            System.Text.RegularExpressions.Match match = regex.Match(fecha);
                                            if (match.Success)
                                            {
                                                anio = int.Parse(match.Value);
                                            }
                                            else
                                            {
                                                anio = 3000;
                                            }
                                        }
                                        else
                                        {
                                            anio = 3000;
                                        }
                                        if (!listaPropiedadesBibliografia.ContainsKey(anio))
                                        {
                                            listaPropiedadesBibliografia.Add(anio, new List<SemanticPropertyModel.PropertyValue>());
                                        }

                                        listaPropiedadesBibliografia[anio].Add(biblio);
                                    }

                                    foreach (List<SemanticPropertyModel.PropertyValue> listaBiblioPorAnio in listaPropiedadesBibliografia.Values)
                                    {
                                        foreach (SemanticPropertyModel.PropertyValue biblio in listaBiblioPorAnio)
                                        {
                                            C1003_Manifestation documento = new C1003_Manifestation(biblio.RelatedEntity, idiomaUsuario);
                                            string htmlTextoDocumento = GetHtmlDocumentosBiblio(documento);
                                            if (!string.IsNullOrEmpty(htmlTextoDocumento))
                                            {
                                                                <p class="mostrable" @Html.Raw(semCmsModel.GetRDFAProperty(biblio.Property))>
                                                                    <span @Html.Raw(semCmsModel.GetRDFAEntity(biblio.RelatedEntity))>@Html.Raw(string.Concat(Html.Raw(htmlTextoDocumento), "."))</span>
                                                                </p>
                                            }
                                        }
                                    }
                                        }
                                    </div>
                        }

                        // #region Bibliografía
                    }
                    @{
                        // #region Filigrana

                        if (Pm_hasFiligree != null && Pm_hasFiligree.Count > 0)
                        {
                                    <div class="dsp">
                                        @foreach (E37_Mark filigrana in Pm_hasFiligree)
                                {
                                    int numFiligrana = Pm_hasFiligree.IndexOf(filigrana) + 1;
                                            <h2 @Html.Raw(numFiligrana != 1 ? "class='mostrable oculto'" : "")>@titularFiligrana @Html.Raw(numFiligrana != 1 ? $"{numFiligrana}" : "<span class='ico'>+</span>")</h2>
                                            <p class="mostrable">
                                                @{
                                            bool anyadirBr = false;
                                            if (!string.IsNullOrEmpty(filigrana.Cidoc_p3_has_note))
                                            {
                                                anyadirBr = true;
                                                                <span about="@filigrana.GNOSSID" property="@filigrana.GetPropertyURI(nameof(filigrana.Cidoc_p3_has_note))">
                                                                    <strong> @filigrana.GetLabel(nameof(filigrana.Cidoc_p3_has_note), idiomaUsuario) </strong> @filigrana.Cidoc_p3_has_note
                                                                </span>
                                            }
                                                }
                                            </p>
                                    if (filigrana.Cidoc_p130i_has_representation.Count > 0)
                                    {
                                        anyadirBr = false;
                                                <div class="section-viewer-filigrana mostrable oculto" style="margin-top:-13px;">
                                                    <div class="thumbnails">
                                                        @foreach (E36_Visual_Item imagenTamagno in filigrana.Cidoc_p130i_has_representation)
                                                {

                                                            <div class="slide">
                                                                <a><img src="@ViewBag.BaseUrlContent/@Html.ObtenerImagenConTamano(imagenTamagno.Ecidoc_p3_has_note, 268)"></a>
                                                            </div>

                                                }
                                                    </div>
                                                </div>
                                    }
                                            <p class="mostrable">
                                                @{
                                            if (filigrana.Ecidoc_p43_E54_has_dimension.Count > 0)
                                            {
                                                if (anyadirBr)
                                                {
                                                                    <br />
                                                }
                                                string textoMedida = string.Empty;
                                                foreach (E54_Dimension dimension in filigrana.Ecidoc_p43_E54_has_dimension)
                                                {

                                                    textoMedida += dimension.Ecidoc_p90_E60_has_value;
                                                    if (dimension.Equals(filigrana.Ecidoc_p43_E54_has_dimension.Last()))
                                                    {
                                                        textoMedida = textoMedida + " " + dimension.Ecidoc_p91_E58_has_unit;
                                                    }
                                                    else
                                                    {
                                                        textoMedida = textoMedida + " x ";
                                                    }

                                                    anyadirBr = true;

                                                }
                                                if (!string.IsNullOrEmpty(textoMedida))
                                                {
                                                                    <span about="@filigrana.GNOSSID" rel="@filigrana.GetPropertyURI(nameof(filigrana.Ecidoc_p43_E54_has_dimension))">
                                                                        <strong> @filigrana.GetLabel(nameof(filigrana.Ecidoc_p43_E54_has_dimension), idiomaUsuario) </strong><span>@Html.Raw(textoMedida)</span>
                                                                    </span>
                                                }
                                            }

                                            if (!string.IsNullOrEmpty(filigrana.Ecidoc_p2_E55_has_type))
                                            {
                                                if (anyadirBr)
                                                {
                                                                    <br />
                                                }
                                                anyadirBr = true;
                                                                <span about="@filigrana.GNOSSID" property="@filigrana.GetPropertyURI(nameof(filigrana.Ecidoc_p2_E55_has_type))">
                                                                    <strong> @filigrana.GetLabel(nameof(filigrana.Ecidoc_p2_E55_has_type), idiomaUsuario) </strong> @Html.Raw(filigrana.Ecidoc_p2_E55_has_type)
                                                                </span>
                                            }
                                            if (filigrana.Pm_isFragment.HasValue && filigrana.Pm_isFragment.Value)
                                            {
                                                if (anyadirBr)
                                                {
                                                                    <br />
                                                }
                                                anyadirBr = true;
                                                                <span about="@filigrana.GNOSSID" property="@filigrana.GetPropertyURI(nameof(filigrana.Pm_isFragment))">
                                                                    <strong> @filigrana.GetLabel(nameof(filigrana.Pm_isFragment), idiomaUsuario) </strong>@Html.GetText("COMMON", "SI")
                                                                </span>
                                            }
                                            if (filigrana.Pm_corondelesNumber.HasValue || !string.IsNullOrEmpty(filigrana.Pm_corondelesPosition))
                                            {
                                                if (anyadirBr)
                                                {
                                                                    <br />
                                                }
                                                anyadirBr = true;
                                                                <span about="@filigrana.GNOSSID" property="@filigrana.GetPropertyURI(nameof(filigrana.Pm_corondelesNumber))">
                                                                    <strong> @filigrana.GetLabel(nameof(filigrana.Pm_corondelesNumber), idiomaUsuario) </strong>
                                                                    @filigrana.Pm_corondelesNumber
                                                                    @if (filigrana.Pm_corondelesNumber.HasValue && !string.IsNullOrEmpty(filigrana.Pm_corondelesPosition))
                                                    {
                                                                        @Html.Raw("-")
                                                    }
                                                                    @filigrana.Pm_corondelesPosition
                                                                </span>
                                            }
                                            if (filigrana.Pm_corondelesTramo.HasValue)
                                            {
                                                if (anyadirBr)
                                                {
                                                                    <br />
                                                }
                                                anyadirBr = true;
                                                                <span about="@filigrana.GNOSSID" property="@filigrana.GetPropertyURI(nameof(filigrana.Pm_corondelesTramo))">
                                                                    <strong> @filigrana.GetLabel(nameof(filigrana.Pm_corondelesTramo), idiomaUsuario) </strong>
                                                                    @Html.Raw(filigrana.Pm_corondelesTramo.Value + " mm.")
                                                                </span>
                                            }
                                            if (!string.IsNullOrEmpty(filigrana.Pm_corondelesOtherMeasure))
                                            {
                                                if (anyadirBr)
                                                {
                                                                    <br />
                                                }
                                                anyadirBr = true;
                                                                <span about="@filigrana.GNOSSID" property="@filigrana.GetPropertyURI(nameof(filigrana.Pm_corondelesOtherMeasure))">
                                                                    <strong> @filigrana.GetLabel(nameof(filigrana.Pm_corondelesOtherMeasure), idiomaUsuario) </strong>
                                                                    @Html.Raw(filigrana.Pm_corondelesOtherMeasure)
                                                                </span>
                                            }
                                            if (!string.IsNullOrEmpty(filigrana.Pm_corondelesLocation))
                                            {
                                                if (anyadirBr)
                                                {
                                                                    <br />
                                                }
                                                anyadirBr = true;
                                                                <span about="@filigrana.GNOSSID" property="@filigrana.GetPropertyURI(nameof(filigrana.Pm_corondelesLocation))">
                                                                    <strong> @filigrana.GetLabel(nameof(filigrana.Pm_corondelesLocation), idiomaUsuario) </strong>
                                                                    @Html.Raw(filigrana.Pm_corondelesLocation)
                                                                </span>
                                            }
                                            if (!string.IsNullOrEmpty(filigrana.Pm_caraPapel))
                                            {
                                                if (anyadirBr)
                                                {
                                                                    <br />
                                                }
                                                anyadirBr = true;
                                                                <span about="@filigrana.GNOSSID" property="@filigrana.GetPropertyURI(nameof(filigrana.Pm_caraPapel))">
                                                                    <strong> @filigrana.GetLabel(nameof(filigrana.Pm_caraPapel), idiomaUsuario) </strong>
                                                                    @Html.Raw(filigrana.Pm_caraPapel)
                                                                </span>
                                            }
                                            if (!string.IsNullOrEmpty(filigrana.Pm_modelTitle))
                                            {
                                                if (anyadirBr)
                                                {
                                                                    <br />
                                                }
                                                anyadirBr = true;
                                                                <span about="@filigrana.GNOSSID" property="@filigrana.GetPropertyURI(nameof(filigrana.Pm_modelTitle))">
                                                                    <strong> @filigrana.GetLabel(nameof(filigrana.Pm_modelTitle), idiomaUsuario) </strong>
                                                                    @Html.Raw(filigrana.Pm_modelTitle)
                                                                </span>
                                            }
                                            if (!string.IsNullOrEmpty(filigrana.Pm_modelDescription))
                                            {
                                                if (anyadirBr)
                                                {
                                                                    <br />
                                                }
                                                anyadirBr = true;
                                                                <span about="@filigrana.GNOSSID" property="@filigrana.GetPropertyURI(nameof(filigrana.Pm_modelDescription))">
                                                                    <strong> @filigrana.GetLabel(nameof(filigrana.Pm_modelDescription), idiomaUsuario) </strong>
                                                                    @Html.Raw(filigrana.Pm_modelDescription)
                                                                </span>
                                            }
                                            if (!string.IsNullOrEmpty(filigrana.Cidoc_p190_has_symbolic_content))
                                            {
                                                if (anyadirBr)
                                                {
                                                                    <br />
                                                }
                                                                <span about="@filigrana.GNOSSID" property="@filigrana.GetPropertyURI(nameof(filigrana.Cidoc_p190_has_symbolic_content))">
                                                                    @Html.Raw(filigrana.Cidoc_p190_has_symbolic_content)
                                                                </span>
                                            }


                                                }
                                            </p>

                                    if (filigrana.Cidoc_p65_shows_visual_item.Count > 0)
                                    {
                                                <div class="section-viewer-filigrana mostrable oculto" style="margin-top:-13px;">
                                                    <div class="thumbnails">
                                                        @foreach (Tuple<string, string, string> imagenTamagno in listaImagenesObraAnchoAlto)
                                                {
                                                    E36_Visual_Item imagen = filigrana.Cidoc_p65_shows_visual_item.Where(x => imagenTamagno.Item1 == ViewBag.BaseUrlContent + "/" + x.Ecidoc_p3_has_note).FirstOrDefault();
                                                    if (imagen != null)
                                                    {
                                                                <div class="slide">
                                                                    <a onclick="javascript: muestraImagen(@listaImagenesObraAnchoAlto.IndexOf(imagenTamagno));"><img src="@ViewBag.BaseUrlContent/@Html.ObtenerImagenConTamano(imagen.Ecidoc_p3_has_note, 268)" width="@imagenTamagno.Item2" height="@imagenTamagno.Item3" alt=""></a>
                                                                </div>
                                                    }
                                                }
                                                    </div>
                                                </div>
                                    }
                                    if (filigrana.Cidoc_p70i_is_documented_in.Count > 0)
                                    {

                                                <p class="mostrable">
                                                    <strong>@titularBibliografia</strong>
                                                    @foreach (C1003_Manifestation documento in filigrana.Cidoc_p70i_is_documented_in)
                                            {
                                                string htmlTextoDocumento = GetHtmlDocumentosBiblio(documento);
                                                if (!string.IsNullOrEmpty(htmlTextoDocumento))
                                                {
                                                            <br>
                                                            <span about="@documento.GNOSSID" typeof="efrbrer:C1003_Manifestation">@Html.Raw(string.Concat(Html.Raw(htmlTextoDocumento), "."))</span>

                                                }
                                            }

                                                </p>
                                    }
                                }
                                        <script>
                                            $(document).ready(function () {
                                                function filiGalleryInit(e) {
                                                    var $filithumbs = $(e);
                                                    $filithumbs.each(function () {
                                                        this.count = $(this).find('> .slide').length;
                                                        var limite = ($(this).parent().parent().outerWidth()) / 118;
                                                        if (this.count >= limite) {
                                                            $(this).slick({
                                                                infinite: false,
                                                                arrows: true,
                                                                centerMode: false,
                                                                variableWidth: true,
                                                                dots: false,
                                                                focusOnSelect: true,
                                                                lazyLoad: 'ondemand',
                                                                swipe: false
                                                            });
                                                        }
                                                    });
                                                }
                                                filiGalleryInit('.section-viewer-filigrana .thumbnails');
                                            });
                                        </script>
                                    </div>
                        }

                        // #region Filigrana
                    }

                    @{
                        // #region Otros inventarios

                        if (propInventario != null && propInventario.PropertyValues != null && propInventario.PropertyValues.Count > 0)
                        {

                            //RDFa entidad Identifier
                            SemanticPropertyModel propIdentifierOtrosInventarios = semCmsModel.GetPropertyByPath("http://www.cidoc-crm.org/cidoc-crm#p1_is_identified_by");
                            string rdfaEntidadIdentifierOtrosInventarios = string.Empty;
                            if (propIdentifierOtrosInventarios != null && propIdentifierOtrosInventarios.FirstPropertyValue != null)
                            {
                                rdfaEntidadIdentifierOtrosInventarios = propIdentifierOtrosInventarios.FirstPropertyValue.RelatedEntity.GetRDFA();
                            }

                            Dictionary<SemanticPropertyModel.PropertyValue, int> diccionarioIdentifiers = new Dictionary<SemanticPropertyModel.PropertyValue, int>();
                            string anioInv = string.Empty;
                            int numAnioInv = 1;

                            foreach (SemanticPropertyModel.PropertyValue identifier in propInventario.PropertyValues)
                            {
                                anioInv = identifier.RelatedEntity.GetFirstValuePropertyByPath("http://www.cidoc-crm.org/cidoc-crm#p4_has_time-span");

                                if (!string.IsNullOrEmpty(anioInv))
                                {
                                    string anioInvCorto = string.Empty;
                                    if (anioInv.Length >= 4)
                                    {
                                        anioInvCorto = anioInv.Substring(0, 4);
                                    }

                                    try
                                    {
                                        if (!string.IsNullOrEmpty(anioInvCorto))
                                        {
                                            numAnioInv = Int32.Parse(anioInvCorto);
                                        }
                                        else
                                        {
                                            numAnioInv = 1;
                                        }
                                    }
                                    catch (FormatException e)
                                    {
                                        numAnioInv = 1;
                                    }
                                }
                                else
                                {
                                    numAnioInv = 1;
                                }

                                diccionarioIdentifiers.Add(identifier, numAnioInv);
                            }

                            if (diccionarioIdentifiers != null && diccionarioIdentifiers.Count > 0)
                            {
                                        <div class="dsp">
                                            <h2>@titularInventarios <span class="ico">+</span></h2>
                                            @foreach (KeyValuePair<SemanticPropertyModel.PropertyValue, int> par in diccionarioIdentifiers.OrderBy(p => p.Value))
                                    {
                                        SemanticPropertyModel.PropertyValue inventario = par.Key;

                                        if (inventario != null)
                                        {
                                            SemanticPropertyModel propTituloInv = inventario.RelatedEntity.GetPropertyByPath("http://www.cidoc-crm.org/cidoc-crm#p102_has_title");
                                            string tituloInv = string.Empty;

                                            if (propTituloInv != null && propTituloInv.FirstPropertyValue != null)
                                            {
                                                tituloInv = propTituloInv.FirstPropertyValue.Value;
                                            }


                                            SemanticPropertyModel propNumeroInv = inventario.RelatedEntity.GetPropertyByPath("http://www.cidoc-crm.org/cidoc-crm#p139_has_alternative_form");
                                            string numeroInv = string.Empty;

                                            if (propNumeroInv != null && propNumeroInv.FirstPropertyValue != null)
                                            {
                                                numeroInv = propNumeroInv.FirstPropertyValue.Value;
                                            }


                                            SemanticPropertyModel propTextoInv = inventario.RelatedEntity.GetPropertyByPath("http://museodelprado.es/ontologia/ecidoc.owl#p3_has_note_id");
                                            string textoInv = string.Empty;

                                            if (propTextoInv != null && propTextoInv.FirstPropertyValue != null)
                                            {
                                                textoInv = propTextoInv.FirstPropertyValue.Value;
                                            }


                                                    <p class="mostrable" @Html.Raw(semCmsModel.GetRDFAProperty(inventario.Property))>
                                                        <span @Html.Raw(semCmsModel.GetRDFAEntity(inventario.RelatedEntity))>
                                                            @if (!string.IsNullOrEmpty(tituloInv))
                                                    {
                                                                <strong @Html.Raw(propTituloInv.GetRDFA())>@tituloInv.</strong>
                                                    }
                                                            @if (!string.IsNullOrEmpty(numeroInv))
                                                    {
                                                                <span @Html.Raw(propNumeroInv.GetRDFA())>Núm. @numeroInv.</span>
                                                    }
                                                            @if (!string.IsNullOrEmpty(textoInv))
                                                    {
                                                                <br />
                                                                <span @Html.Raw(propTextoInv.GetRDFA())>@textoInv</span>
                                                    }
                                                        </span>
                                                    </p>
                                        }
                                    }
                                        </div>
                            }
                        }

                        // #endregion otros inventarios
                    }
                    @{
                        // #region Inscripciones

                        if (propInscripciones != null && propInscripciones.PropertyValues != null && propInscripciones.PropertyValues.Count > 0)
                        {
                                    <div class="dsp">
                                        <h2>@titularInscripciones <span class="ico">+</span></h2>
                                        @foreach (SemanticPropertyModel.PropertyValue inscripcion in propInscripciones.PropertyValues)
                                {
                                    if (inscripcion != null)
                                    {
                                        SemanticPropertyModel propDescripcion = inscripcion.RelatedEntity.GetPropertyByPath("http://www.cidoc-crm.org/cidoc-crm#p3_has_note");
                                        string descripcion = string.Empty;
                                        if (propDescripcion != null && propDescripcion.FirstPropertyValue != null)
                                        {
                                            descripcion = propDescripcion.FirstPropertyValue.Value;
                                        }
                                        SemanticPropertyModel propRealizado = inscripcion.RelatedEntity.GetPropertyByPath("http://www.cidoc-crm.org/cidoc-crm#p32_used_general_technique");
                                        string realizado = string.Empty;
                                        if (propRealizado != null && propRealizado.FirstPropertyValue != null)
                                        {
                                            realizado = propRealizado.FirstPropertyValue.Value;
                                        }
                                        SemanticPropertyModel propLocalizacion = inscripcion.RelatedEntity.GetPropertyByPath("http://www.cidoc-crm.org/cidoc-crm#p54_has_current_permanent_location");
                                        string localizacion = string.Empty;
                                        if (propLocalizacion != null && propLocalizacion.FirstPropertyValue != null)
                                        {
                                            localizacion = propLocalizacion.FirstPropertyValue.Value;
                                        }
                                        SemanticPropertyModel propIdentificador = inscripcion.RelatedEntity.GetPropertyByPath("http://museodelprado.es/ontologia/ecidoc.owl#p48_E34_has_preferred_identifier");
                                        string identificador = string.Empty;
                                        if (propIdentificador != null && propIdentificador.FirstPropertyValue != null)
                                        {
                                            identificador = propIdentificador.FirstPropertyValue.Value;
                                        }

                                                <p class="mostrable" @Html.Raw(semCmsModel.GetRDFAProperty(inscripcion.Property))>
                                                    <span @Html.Raw(semCmsModel.GetRDFAEntity(inscripcion.RelatedEntity))>
                                                        @if (!string.IsNullOrEmpty(descripcion))
                                                {
                                                    descripcion = descripcion.Replace("<p>", "").Replace("</p>", "<br>");
                                                            <strong @Html.Raw(propDescripcion.GetRDFA())>@Html.Raw(descripcion)</strong>
                                                }
                                                        @if (!string.IsNullOrEmpty(realizado))
                                                {
                                                            <span @Html.Raw(propRealizado.GetRDFA())>@realizado.</span>
                                                }
                                                        @if (!string.IsNullOrEmpty(localizacion))
                                                {
                                                            <span @Html.Raw(propLocalizacion.GetRDFA())>@localizacion</span>
                                                }
                                                    </span>
                                                </p>
                                    }


                                }
                                    </div>
                        }
                        // #endregion Inscripciones
                    }
                    @{
                        // #region Transcripciones

                        if (propTranscripciones != null && propTranscripciones.PropertyValues != null && propTranscripciones.PropertyValues.Count > 0)
                        {
                            string trancripciones = string.Empty;
                            if (propTranscripciones != null && propTranscripciones.FirstPropertyValue != null)
                            {
                                trancripciones = propTranscripciones.FirstPropertyValue.Value;
                            }

                                    <div class="dsp">
                                        <h2>@titularTranscripciones <span class="ico">+</span></h2>


                                        @if (!string.IsNullOrEmpty(trancripciones))
                                {
                                    trancripciones = trancripciones.Replace("<p>", "<p class=\"mostrable\">");
                                            @Html.Raw(trancripciones)

                                }



                                    </div>
                        }
                        // #endregion Transcripciones
                    }

                    @{
                        // #region Exposiciones

                        listaExposiciones = listaExposiciones.OrderBy(x => x.fechaInicio).ToList();
                        listaExposiciones.Reverse();

                        if (listaExposiciones != null && listaExposiciones.Count > 0)
                        {
                                    <div class="dsp">
                                        <h2>@Html.Translate("EXPOSICIONES") <span class="ico">+</span></h2>
                                        @foreach (Exposicion expo in listaExposiciones)
                                {

                                    string lugarExposicion = string.Empty;
                                    if (!string.IsNullOrEmpty(expo.ciudad))
                                    {
                                        lugarExposicion = expo.ciudad;
                                    }

                                    string fechasExposicion = string.Empty;
                                    if (!string.IsNullOrEmpty(expo.fechaInicio))
                                    {
                                        fechasExposicion = ObtenerFechaFormateada(expo.fechaInicio, ".");
                                    }

                                    if (!string.IsNullOrEmpty(expo.fechaFin))
                                    {
                                        if (!string.IsNullOrEmpty(fechasExposicion))
                                        {
                                            if (ObtenerFechaFormateada(expo.fechaFin, "/").Equals(@Html.Translate("FECHAEXPOSICIONINDEFINIDA")))
                                            {
                                                fechasExposicion = string.Concat(fechasExposicion, " - ", Html.Translate("VALOREXPOSICIONINDEFINIDA"));
                                            }
                                            else
                                            {
                                                fechasExposicion = string.Concat(fechasExposicion, " - ", ObtenerFechaFormateada(expo.fechaFin, "."));
                                            }

                                        }
                                        else
                                        {
                                            fechasExposicion = expo.fechaFin;
                                        }
                                    }

                                            <p class="mostrable">
                                                @if (!string.IsNullOrEmpty(expo.titulo))
                                        {
                                            if (!string.IsNullOrEmpty(expo.enlace))
                                            {
                                                        <a href="@expo.enlace">@expo.titulo</a><br />
                                            }
                                            else
                                            {
                                                        @expo.titulo<br />
                                            }
                                        }
                                                @if (!string.IsNullOrEmpty(lugarExposicion))
                                        {
                                                    @lugarExposicion<br />
                                        }
                                                @if (!string.IsNullOrEmpty(fechasExposicion))
                                        {
                                                    @fechasExposicion
                                        }
                                            </p>

                                }
                                    </div>
                        }

                        // #endregion Exposiciones
                    }
                    @{
                        //#region ubicación en sala

                        if (!string.IsNullOrEmpty(ubicacionObra) && (!string.IsNullOrEmpty(salaObra) && ((salaObra.Equals("Depósito") || salaObra.Equals("Expuesto") || salaObra.Equals("Exposición Temporal")))))
                        {
                            string htmlUbicacionObra = string.Empty;
                            string htmlSalaObra = string.Empty;

                            if (idiomaNav.Equals("en"))
                            {
                                if (ubicacionObra.Contains("Sala"))
                                {
                                    htmlUbicacionObra = "<span " + semCmsModel.GetRDFAPropertyByPath("http://www.cidoc-crm.org/cidoc-crm#p55_has_current_location") + ">" + ubicacionObra.Replace("Sala", "Room").Trim() + "</span>";
                                }
                                else
                                {
                                    htmlUbicacionObra = "<span " + semCmsModel.GetRDFAPropertyByPath("http://www.cidoc-crm.org/cidoc-crm#p55_has_current_location") + ">" + ubicacionObra.Trim() + "</span>";
                                }
                                if (salaObra.Contains("Expuesto"))
                                {
                                    htmlSalaObra = "<span " + semCmsModel.GetRDFAPropertyByPath("http://museodelprado.es/ontologia/ecidoc.owl#p55_has_current_location_type") + ">" + salaObra.Replace("Expuesto", "On Display") + "</span>";
                                }
                                if (salaObra.Contains("Depósito"))
                                {
                                    htmlSalaObra = "<span " + semCmsModel.GetRDFAPropertyByPath("http://museodelprado.es/ontologia/ecidoc.owl#p55_has_current_location_type") + ">" + salaObra.Replace("Depósito", "Deposit").Trim() + "</span>";
                                }

                                if (salaObra.Contains("Exposición Temporal"))
                                {
                                    htmlSalaObra = "<span " + semCmsModel.GetRDFAPropertyByPath("http://museodelprado.es/ontologia/ecidoc.owl#p55_has_current_location_type") + ">" + salaObra.Replace("Exposición Temporal", "Temporary Exhibition").Trim() + "</span>";

                                }
                            }
                            else
                            {
                                if (salaObra.Contains("Expuesto"))
                                {
                                    htmlSalaObra = "<span " + semCmsModel.GetRDFAPropertyByPath("http://museodelprado.es/ontologia/ecidoc.owl#p55_has_current_location_type") + ">" + salaObra + "</span>";

                                    htmlUbicacionObra = "<span " + semCmsModel.GetRDFAPropertyByPath("http://www.cidoc-crm.org/cidoc-crm#p55_has_current_location") + ">" + ubicacionObra.Trim() + "</span>";
                                }
                                else
                                {
                                    htmlSalaObra = "<span " + semCmsModel.GetRDFAPropertyByPath("http://museodelprado.es/ontologia/ecidoc.owl#p55_has_current_location_type") + ">" + salaObra + "</span></a>";
                                    htmlUbicacionObra = "<span " + semCmsModel.GetRDFAPropertyByPath("http://www.cidoc-crm.org/cidoc-crm#p55_has_current_location") + ">" + ubicacionObra.Trim() + "</span>";
                                }
                            }

                            string ubicacionSala = string.Concat(htmlUbicacionObra, " (", htmlSalaObra, ")");

                            if (!string.IsNullOrEmpty(ubicacionSala))
                            {
                                        <div class="dsp">
                                            <h2>@Html.Translate("UBICACION") <span class="ico">+</span></h2>
                                            <p class="mostrable">@Html.Raw(ubicacionSala)</p>
                                            <script>
                                                var mapaUbik;
                                            </script>
                                            @if (!string.IsNullOrEmpty(ubicacionIdObra))
                                    {
                                        string urlImagenSala = urlPersonalizacion + "/ElPrado/salas/" + ubicacionIdObra + ".gif";
                                        //Pintamos la sala en caso de que tenga
                                                <img class="mostrable oculto" alt="@Html.Raw(salaObra)" src="@urlImagenSala?v=@Html.GetVersion()-@Comunidad.VersionCSS">
                                    }
                                    else if (!string.IsNullOrEmpty(ubicacionLatitudObra) && !string.IsNullOrEmpty(ubicacionLongitudbra))
                                    {
                                        //Pintamos la latitud y longitud si no tiene imagen pero si coordenadas
                                                <div id="map-ubicacion" class="mostrable oculto"></div>
                                                <script>
                                                $( document ).ready(function() {
                                                    if ($('#map-ubicacion').length) {
                                                        //Aquí van las COORDENADAS
                                                        var longitud=@ubicacionLatitudObra;
                                                        var latitud=@ubicacionLongitudbra;
                                                        var southWestUbik = new L.LatLng(-90,180);
                                                        var northEastUbik = new L.LatLng(90,-180);
                                                        L.Icon.Default.imagePath=$('.inpt_baseURLContent').val()+'/imagenes/proyectos/personalizacion/[%%%_PROYECTO_ID_%%%]/ElPrado/js/images/';
                                                        var bordesMapaUbik = new L.LatLngBounds(southWestUbik, northEastUbik);
                                                        mapaUbik = L.map('map-ubicacion', {
                                                            center: [longitud,latitud],
                                                            zoom: 14,
                                                            alt:'',
                                                            zoomControl:false,
                                                            maxBounds: bordesMapaUbik,
                                                            dragging:!Boolean(isMobile.any()),
                                                            tap:false,
                                                            scrollWheelZoom:false
                                                        });
                                                        var osmUrl='https://a.tile.openstreetmap.org/{z}/{x}/{y}.png';
                                                        var osmAttrib='<a href="https://www.openstreetmap.org/copyright" target="_blank">&copy; Colaboradores de OpenStreetMap</a>';
                                                        var osm = new L.TileLayer(osmUrl,{minZoom:10,maxZoom:17,attribution:osmAttrib});
                                                        var layerControlFooter = L.control.zoom({position: 'topright'});
                                                        layerControlFooter.addTo(mapaUbik);
                                                        var marcador_footer=L.marker([longitud,latitud]).addTo(mapaUbik);
                                                        mapaUbik.addLayer(osm);
                                                        $(marcador_footer).click(function(){
                                                            location.href="https://www.google.com/maps/?q="+longitud+","+latitud+"&ll="+longitud+","+latitud+"&z=15";
                                                        });
                                                    }
                                                });
                                                </script>
                                    }
                                        </div>
                            }
                        }

                        //#endregion
                    }
                    @{
                        //#region OBJETOS REPRESENTADOS

                        if (propObjetosRepresentados != null && propObjetosRepresentados.PropertyValues != null && propObjetosRepresentados.PropertyValues.Count() > 0)
                        {
                                    <div class="dsp">
                                        <h2>@Html.Translate("OBJETOSPRESENTADOS") <span class="ico">+</span></h2>
                                        @foreach (SemanticPropertyModel.PropertyValue propObjeto in propObjetosRepresentados.PropertyValues)
                                {
                                    if (propObjeto != null && propObjeto.Value != null)
                                    {
                                        SemanticPropertyModel propNodoObjeto = propObjeto.RelatedEntity.GetPropertyByPath("http://museodelprado.es/ontologia/pradomuseum.owl#objectNode");

                                        if (propNodoObjeto != null && propNodoObjeto.PropertyValues != null && propNodoObjeto.PropertyValues.Count() > 0)
                                        {

                                            SemanticPropertyModel propNombreObjeto = propNodoObjeto.PropertyValues.Last().RelatedEntity.GetPropertyByPath("http://www.w3.org/2008/05/skos#prefLabel");
                                            string nombreObjeto = propNodoObjeto.PropertyValues.Last().RelatedEntity.GetFirstValuePropertyByPath("http://www.w3.org/2008/05/skos#prefLabel");

                                            //string htmlNombreObjeto = " <span " + semCmsModel.GetRDFAProperty(propObjeto.RelatedEntity.GetPropertyByPath("http://museodelprado.es/ontologia/pradomuseum.owl#objectNode")) + ">" + nombreObjeto + "</span>";

                                            if (!string.IsNullOrEmpty(nombreObjeto))
                                            {
                                                string infoObjRepresentado = string.Empty;

                                                SemanticPropertyModel propInfoObjeto = propObjeto.RelatedEntity.GetPropertyByPath("http://museodelprado.es/ontologia/pradomuseum.owl#has_object_information");

                                                if (propInfoObjeto != null && propInfoObjeto.PropertyValues != null && propInfoObjeto.PropertyValues.Count() > 0)
                                                {
                                                    string descripcionObjeto = propInfoObjeto.PropertyValues.Last().RelatedEntity.GetFirstValuePropertyByPath("http://www.cidoc-crm.org/cidoc-crm#p3_has_note");
                                                    string particularidadesObjeto = propInfoObjeto.PropertyValues.Last().RelatedEntity.GetFirstValuePropertyByPath("http://museodelprado.es/ontologia/pradomuseum.owl#usage_particularities");
                                                    string datacionObjeto = propInfoObjeto.PropertyValues.Last().RelatedEntity.GetFirstValuePropertyByPath("http://museodelprado.es/ontologia/pradomuseum.owl#dating_text");
                                                    string lugarProduccionObjeto = propInfoObjeto.PropertyValues.Last().RelatedEntity.GetFirstValuePropertyByPath("http://museodelprado.es/ontologia/ecidoc.owl#p7_took_place_at");

                                                    string rdfaEntidadObjectInformation = propInfoObjeto.FirstPropertyValue.RelatedEntity.GetRDFA();


                                                    if (!string.IsNullOrEmpty(descripcionObjeto))
                                                    {
                                                        //infoObjRepresentado = descripcionObjeto;

                                                        string htmlDescripcion = " <span " + semCmsModel.GetRDFAProperty(propInfoObjeto.FirstPropertyValue.RelatedEntity.GetProperty("http://www.cidoc-crm.org/cidoc-crm#p3_has_note")) + ">" + descripcionObjeto + "</span>";
                                                        infoObjRepresentado = htmlDescripcion;
                                                    }

                                                    if (!string.IsNullOrEmpty(particularidadesObjeto))
                                                    {
                                                        string htmlParticularidadesObjeto = " <span " + semCmsModel.GetRDFAProperty(propInfoObjeto.FirstPropertyValue.RelatedEntity.GetProperty("http://museodelprado.es/ontologia/pradomuseum.owl#usage_particularities")) + ">" + particularidadesObjeto + "</span></span>";

                                                        if (!string.IsNullOrEmpty(infoObjRepresentado))
                                                        {
                                                            infoObjRepresentado = string.Concat(infoObjRepresentado, "<br/>", htmlParticularidadesObjeto);
                                                        }
                                                        else
                                                        {
                                                            infoObjRepresentado = htmlParticularidadesObjeto;
                                                        }
                                                    }

                                                    if (!string.IsNullOrEmpty(datacionObjeto))
                                                    {
                                                        string htmlDatacionObjeto = " <span " + semCmsModel.GetRDFAProperty(propInfoObjeto.FirstPropertyValue.RelatedEntity.GetProperty("http://museodelprado.es/ontologia/pradomuseum.owl#dating_text")) + ">" + datacionObjeto + "</span></span>";

                                                        if (!string.IsNullOrEmpty(infoObjRepresentado))
                                                        {
                                                            infoObjRepresentado = string.Concat(infoObjRepresentado, "<br/>", htmlDatacionObjeto);
                                                        }
                                                        else
                                                        {
                                                            infoObjRepresentado = htmlDatacionObjeto;
                                                        }
                                                    }

                                                    if (!string.IsNullOrEmpty(lugarProduccionObjeto))
                                                    {
                                                        string htmlLugarProduccionObjeto = " <span " + semCmsModel.GetRDFAProperty(propInfoObjeto.FirstPropertyValue.RelatedEntity.GetProperty("http://museodelprado.es/ontologia/ecidoc.owl#p7_took_place_at")) + ">" + lugarProduccionObjeto + "</span></span>";

                                                        if (!string.IsNullOrEmpty(infoObjRepresentado))
                                                        {
                                                            infoObjRepresentado = string.Concat(infoObjRepresentado, "<br/>", htmlLugarProduccionObjeto);
                                                        }
                                                        else
                                                        {
                                                            infoObjRepresentado = htmlLugarProduccionObjeto;
                                                        }
                                                    }
                                                }

                                                if (!string.IsNullOrEmpty(nombreObjeto))
                                                {
                                                            <p class="mostrable" @Html.Raw(semCmsModel.GetRDFAProperty(propObjeto.Property))>
                                                                <!-- Prop Objeto representado: http://museodelprado.es/ontologia/ecidoc.owl#p65_E36_p138_represents_object  -->
                                                                <span @Html.Raw(semCmsModel.GetRDFAEntity(propObjeto.RelatedEntity))>
                                                                    <!-- Entidad pm:ObjectPath  -->
                                                                    @if (!string.IsNullOrEmpty(infoObjRepresentado))
                                                            {
                                                                        <strong @Html.Raw(semCmsModel.GetRDFAProperty(propNodoObjeto))>
                                                                            <!-- Prop pm:objectNode -->
                                                                            <span @Html.Raw(semCmsModel.GetRDFAEntity(propNodoObjeto.PropertyValues.Last().RelatedEntity))>
                                                                                <!-- Entidad skos:Concept -->
                                                                                <span @Html.Raw(semCmsModel.GetRDFAProperty(propNombreObjeto))>@nombreObjeto:</span>
                                                                            </span>
                                                                        </strong>

                                                                        <span @Html.Raw(semCmsModel.GetRDFAProperty(propInfoObjeto))>
                                                                            <!-- Prop pm:has_object_information -->
                                                                            <span @Html.Raw(semCmsModel.GetRDFAEntity(propInfoObjeto.FirstPropertyValue.RelatedEntity))>@Html.Raw(infoObjRepresentado)</span>
                                                                        </span>
                                                            }
                                                            else
                                                            {
                                                                        <strong @Html.Raw(semCmsModel.GetRDFAProperty(propNodoObjeto))>
                                                                            <!-- Prop pm:objectNode -->
                                                                            <span @Html.Raw(semCmsModel.GetRDFAEntity(propNodoObjeto.PropertyValues.Last().RelatedEntity))>
                                                                                <!-- Entidad skos:Concept -->
                                                                                <span @Html.Raw(semCmsModel.GetRDFAProperty(propNombreObjeto))>@nombreObjeto</span>
                                                                            </span>
                                                                        </strong>
                                                            }
                                                                </span>
                                                            </p>
                                                }
                                            }
                                        }
                                    }
                                }
                                    </div>
                        }

                        //#endregion OBJETOS REPRESENTADOS
                    }
                    @if (!string.IsNullOrEmpty(titularFechaModificacion) && !string.IsNullOrEmpty(fechaModificacionRecurso) && !string.IsNullOrEmpty(titularFechaPublicacion) && !string.IsNullOrEmpty(fechaCreacionRecurso))
                    {
                        string htmlFechaModificacion = "<span " + semCmsModel.GetRDFAPropertyByPath("http://museodelprado.es/ontologia/pradomuseum.owl#updateDate") + ">" + fechaModificacionRecurso + "</span>";
                        string htmlFechaCreacion = "<span " + semCmsModel.GetRDFAPropertyByPath("http://museodelprado.es/ontologia/pradomuseum.owl#publicationDate") + ">" + fechaCreacionRecurso + "</span>";

                        string infoRecurso = string.Concat(titularFechaModificacion, ": ", htmlFechaModificacion, " | ", titularFechaPublicacion, " ", htmlFechaCreacion);

                        <span class="mod">@Html.Raw(infoRecurso)</span>
                    }
                </div>
            </div>
        </section>
        <!-- No tiene RDFa-->
        @{
            if (!autorAnonimo)
            {
                if (propMasObras != null && propMasObras.PropertyValues != null && propMasObras.PropertyValues.Count > 0)
                {

                            <section id="mas-obras" class="mas-obras selectPagMasObras">
                                @{
                            //var autoresSinAutoria = obtenerAutoresOrdenadosAlfabeticamente(dTAutoresObra).AsEnumerable().Select(autor => autor.Field<string>("nombreAutor"));

                            List<string> autoresSinAutoria = listaAutores.OrderBy(autor => autor.ordenAutor).Select(autor => autor.nombreAutor).ToList();

                            string listadoAutoresSinAutoria = string.Empty;
                            if (autoresSinAutoria != null && autoresSinAutoria.Count() > 0)
                            {
                                listadoAutoresSinAutoria = string.Join("; ", autoresSinAutoria);
                            }

                            if (listadoAutoresSinAutoria != null)
                            {
                                string extraHtmlPag = "";

                                if (propMasObras.OntologyPropInfo.EntitySelector.NumEntitiesForPage > 0)
                                {
                                    extraHtmlPag = "aux=\"" + propMasObras.EntityParent.SemanticResourceModel.MvcActionsUrl + "/load-more-entities-selector|" + propMasObras.EntityParent.Key + "|" + propMasObras.Element.Propiedad.Nombre + "|" + propMasObras.OntologyPropInfo.EntitySelector.NumEntitiesForPage + "|" + propMasObras.OntologyPropInfo.EntitySelector.TotalEntitiesPagination + "\"";
                                }
                                                <h2 class="heading">@Html.Translate("MASOBRASDE") <strong>@listadoAutoresSinAutoria</strong></h2>
                                                <div class="carousel inactive" @Html.Raw(extraHtmlPag)>
                                                    @if (!string.IsNullOrEmpty(propMasObras.SpecificationProperty.SelectorEntidad.VistaPersonalizadaPaginacion))
                                    {
                                                        @Html.PartialView(propMasObras.SpecificationProperty.SelectorEntidad.VistaPersonalizadaPaginacion, propMasObras)
                                    }
                                    else
                                    {
                                                        @Html.PartialView("SemCms/_PropiedadOntoSelectorEntidadLectura", propMasObras)
                                    }
                                                </div>
                            }
                                }
                            </section>
                }
            }
            else
            {
                string nombreCortoGadgetObrasAnonimo = "ObrasDeAnonimo";
                GadgetModel gadgetMasObrasAnonimo = null;
                if (FichaDocumento.Gadgets.Exists(gadget => gadget.ShortName == nombreCortoGadgetObrasAnonimo))
                {
                    gadgetMasObrasAnonimo = FichaDocumento.Gadgets.Find(gadget => gadget.ShortName == nombreCortoGadgetObrasAnonimo);
                }

                if (gadgetMasObrasAnonimo != null)
                {
                    GadgetResourceListModel gadgetContextoMasObras = gadgetMasObrasAnonimo as GadgetResourceListModel;

                    if (gadgetContextoMasObras != null)
                    {
                        Guid idGadgetMasObras = gadgetContextoMasObras.Key;

                        bool cargado = gadgetContextoMasObras.Resources != null && gadgetContextoMasObras.Resources.Count > 0;
                        string displayNone = "";
                        string pag = "3";
                        if (!cargado)
                        {
                            displayNone = "style=\"display:none\"";
                            pag = "1";
                        }
                                <section id="mas-obras" class="mas-obras" @Html.Raw(displayNone)>
                                    <h2 class="heading">@Html.Translate("MASOBRASDEANONIMO")</h2>
                                    <div class="carousel inactive">
                                        @if (cargado)
                                {
                                            @Html.PartialView("ControlesMVC/_FichaGadget", gadgetContextoMasObras)
                                }
                                        <div class="contenedorGadget swiper-slide" aux="mas-obras" pag="@pag" id="@idGadgetMasObras.ToString().ToLower()"></div>
                                    </div>
                                </section>
                    }
                }
                else
                {
                            <section id="mas-obras" class="mas-obras" style="display: none">
                            </section>
                }
            }

            //TIENDA EL PRADO

                    <section class="tienda-prado" id="tienda-prado">
                        @{
                    if (propProductosTienda != null && propProductosTienda.PropertyValues != null && propProductosTienda.PropertyValues.Count > 0)
                    {
                                        <h2 class="heading">@Html.Translate("TIENDAPRADO")</h2>
                                        <div class="carousel inactive">
                                            @foreach (SemanticPropertyModel.PropertyValue productoTienda in propProductosTienda.PropertyValues)
                            {
                                string nombreProd = productoTienda.RelatedEntity.GetFirstValuePropertyByPath("http://purl.org/goodrelations/v1#name");
                                string categoria = productoTienda.RelatedEntity.GetFirstValuePropertyByPath("http://purl.org/goodrelations/v1#category");
                                string oferta = productoTienda.RelatedEntity.GetFirstValuePropertyByPath("http://museodelprado.es/ontologia/egr.owl#offer");
                                string imagenProd = productoTienda.RelatedEntity.GetFirstValuePropertyByPath("http://museodelprado.es/ontologia/egr.owl#image");
                                string web = productoTienda.RelatedEntity.GetFirstValuePropertyByPath("http://museodelprado.es/ontologia/egr.owl#web");

                                                <div class="slide">
                                                    <figure>
                                                        @if (!string.IsNullOrEmpty(web))
                                        {
                                                            <a href="@web" target="_blank">
                                                                @if (!string.IsNullOrEmpty(imagenProd) && !string.IsNullOrEmpty(nombreProd))
                                                {
                                                                    <img alt="@nombreProd" src="@ViewBag.BaseUrlContent/@imagenProd">
                                                }
                                                            </a>
                                        }
                                                        <figcaption>
                                                            @if (!string.IsNullOrEmpty(oferta) && oferta.Equals("true"))
                                            {
                                                                <div class="offer">Oferta</div>
                                            }
                                                            @if (!string.IsNullOrEmpty(categoria))
                                            {
                                                                <div class="media-type">@categoria</div>
                                            }
                                                            @if (!string.IsNullOrEmpty(nombreProd) && !string.IsNullOrEmpty(web))
                                            {
                                                                <div class="name"><a href="@web" target="_blank">@nombreProd</a></div>
                                            }
                                                        </figcaption>
                                                    </figure>
                                                </div>

                            }
                                        </div>
                    }
                        }
                        <div class="impresion-a-la-carta">
                            <div>
                                @if (idiomaNav.Equals("es"))
                        {
                                    <h1><a href="http://www.tiendaprado.com/es/404-impresion-a-la-carta" target="_blank">@Html.Translate("IMPRESIONALACARTA")</a></h1>
                                    @Html.Raw(@Html.Translate("FICHA_RECURSO_OBRA_IMPRESION"))
                        }
                        else
                        {
                                    <h1><a href="http://www.tiendaprado.com/en/404-print-on-demand" target="_blank">@Html.Translate("IMPRESIONALACARTA")</a></h1>
                                    @Html.Raw(@Html.Translate("FICHA_RECURSO_OBRA_IMPRESION"))
                        }
                            </div>
                            <div>
                                <h1><a href="mailto:bimnp@museodelpradodifusion.es" target="_blank">@Html.Translate("BANCODEIMAGENES")</a></h1>
                                @Html.Raw(@Html.Translate("FICHA_RECURSO_OBRA_IMAGENES"))
                            </div>
                        </div>
                    </section>

        }
    </section>

    Dictionary<string, List<object>> propsJsonLD = new Dictionary<string, List<object>>();
    propsJsonLD.Add("@context", new List<object>(new string[] { "http://schema.org" }));
    propsJsonLD.Add("@type", new List<object>(new string[] { "VisualArtwork" }));

    if (!string.IsNullOrEmpty(tituloObra))
    {
        propsJsonLD.Add("name", new List<object>(new string[] { tituloObra }));
    }

    if (!string.IsNullOrEmpty(descripcionObra))
    {
        propsJsonLD.Add("description", new List<object>(new string[] { descripcionObra }));
    }

    if (listaAutores.Count > 0)
    {
        propsJsonLD.Add("author", new List<object>());

        foreach (autorVista autor in listaAutores)
        {
            Dictionary<string, List<object>> creator = new Dictionary<string, List<object>>();
            creator.Add("@type", new List<object>(new string[] { "Person" }));
            creator.Add("name", new List<object>(new string[] { autor.nombreAutor }));

            if (!string.IsNullOrEmpty(autor.descripcionAutor))
            {
                creator.Add("description", new List<object>(new string[] { autor.descripcionAutor }));
            }

            ((List<object>)propsJsonLD["author"]).Add(creator);
        }
    }

    if (!string.IsNullOrEmpty(numeroCatalogo))
    {
        propsJsonLD.Add("artEdition", new List<object>(new string[] { numeroCatalogo }));
    }

    if (!string.IsNullOrEmpty(urlImagenObra))
    {
        propsJsonLD.Add("image", new List<object>(new string[] { ViewBag.BaseUrlContent + "/" + urlImagenObra }));
    }

    string fechaFinObra = semCmsModel.GetFirstValuePropertyByPath("http://museodelprado.es/ontologia/ecidoc.owl#p62_E52_p80_has_time-span_end");

    if (!string.IsNullOrEmpty(fechaFinObra))
    {
        if (fechaFinObra.StartsWith("-"))
        {
            fechaFinObra = "-" + ObtenerFechaFormateadaFormAnyoMesDia(fechaFinObra.Substring(1), "/");
        }
        else
        {
            fechaFinObra = ObtenerFechaFormateadaFormAnyoMesDia(fechaFinObra, "/");
        }

        propsJsonLD.Add("dateCreated", new List<object>(new string[] { fechaFinObra }));
    }

    string fechaPubliObra = semCmsModel.GetFirstValuePropertyByPath("http://museodelprado.es/ontologia/pradomuseum.owl#publicationDate");

    if (!string.IsNullOrEmpty(fechaPubliObra))
    {
        fechaPubliObra = ObtenerFechaFormateadaFormAnyoMesDia(fechaPubliObra, "/");
        //propsJsonLD.Add("datePublished", new List<object>(new string[] { fechaPubliObra }));
    }

    string fechaModificacionObra = semCmsModel.GetFirstValuePropertyByPath("http://museodelprado.es/ontologia/pradomuseum.owl#updateDate");

    if (!string.IsNullOrEmpty(fechaModificacionObra))
    {
        fechaModificacionObra = ObtenerFechaFormateadaFormAnyoMesDia(fechaModificacionObra, "/");
        //propsJsonLD.Add("dateModified", new List<object>(new string[] { fechaModificacionObra }));
    }

    if (!string.IsNullOrEmpty(tecnica))
    {
        propsJsonLD.Add("artform", new List<object>());

        foreach (string tecIndi in tecnica.Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries))
        {
            ((List<object>)propsJsonLD["artform"]).Add(tecIndi.Trim());
        }
    }

    if (!string.IsNullOrEmpty(soporte))
    {
        propsJsonLD.Add("artworkSurface", new List<object>());

        foreach (string sopIndi in soporte.Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries))
        {
            ((List<object>)propsJsonLD["artworkSurface"]).Add(sopIndi.Trim());
        }
    }

    if (!string.IsNullOrEmpty(materia))
    {
        propsJsonLD.Add("artMedium", new List<object>());

        foreach (string matIndi in materia.Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries))
        {
            ((List<object>)propsJsonLD["artMedium"]).Add(matIndi.Trim());
        }
    }

    if (!string.IsNullOrEmpty(alto))
    {
        Dictionary<string, List<object>> height = new Dictionary<string, List<object>>();
        height.Add("@type", new List<object>(new string[] { "QuantitativeValue" }));
        height.Add("value", new List<object>(new string[] { alto }));

        if (!string.IsNullOrEmpty(unidadMedida))
        {
            height.Add("unitText", new List<object>(new string[] { unidadMedida }));
        }

        propsJsonLD.Add("height", new List<object>(new object[] { height }));
    }

    if (!string.IsNullOrEmpty(ancho))
    {
        Dictionary<string, List<object>> width = new Dictionary<string, List<object>>();
        width.Add("@type", new List<object>(new string[] { "QuantitativeValue" }));
        width.Add("value", new List<object>(new string[] { ancho }));

        if (!string.IsNullOrEmpty(unidadMedida))
        {
            width.Add("unitText", new List<object>(new string[] { unidadMedida }));
        }

        propsJsonLD.Add("width", new List<object>(new object[] { width }));
    }

    if (!string.IsNullOrEmpty(profundidad))
    {
        Dictionary<string, List<object>> depth = new Dictionary<string, List<object>>();
        depth.Add("@type", new List<object>(new string[] { "QuantitativeValue" }));
        depth.Add("value", new List<object>(new string[] { profundidad }));

        if (!string.IsNullOrEmpty(unidadMedida))
        {
            depth.Add("unitText", new List<object>(new string[] { unidadMedida }));
        }

        propsJsonLD.Add("depth", new List<object>(new object[] { depth }));
    }

    if (recMultimediaJsonLD != null)
    {
        propsJsonLD.Add("associatedMedia", recMultimediaJsonLD);
    }


    @Html.PartialView("_scriptJsonLD", propsJsonLD)

        @functions{

    public void  PintarAutorFichaTecnica(List<autorVista> pListaAutores, SemanticResourceModel pSemCmsModel)
    {
        if (pListaAutores != null && pListaAutores.Count > 0)
        {
            List<autorVista> autoresOrdenados = pListaAutores.OrderBy(autor => autor.ordenAutor).ToList();

            if (autoresOrdenados != null && autoresOrdenados.Count > 0)
            {
    <dd>
                            @foreach (autorVista autor in autoresOrdenados)
                    {
                        string htmlAutor = "";

                        if (autor != null)
                        {
                            string nombreAutor = autor.nombreAutor;
                            //string nombreAutorAutoria = autor.nombreAutorAutoria;
                            string tipoAutoria = autor.tipoAutoria;
                            string enlaceAutor = autor.enlaceAutor;
                            List<string> tipoAutor = autor.tipoAutor;
                            SemanticPropertyModel.PropertyValue propObraAutor = autor.propObraAutor;
                            SemanticEntityModel entidadObraAutor = propObraAutor.RelatedEntity;
                            // Obtener RDFA de obraAutor, autorObra, tipoAutor, autoria, autorAutoria
                            string rfdaPropAutorObra = string.Empty;
                            string rfdaEntidadAutorObra = string.Empty;
                            string rfdaNombreAutorObra = string.Empty;
                            string rfdaTipoAutor = string.Empty;
                            string rdfaAutoria = string.Empty;
                            string rdfaEntidadAutoria = string.Empty;
                            string rdfaNombreAutorAutoria = string.Empty;
                            string rdfaAutorAutoria = string.Empty;
                            string rdfaEntidadAutorAutoria = string.Empty;
                            string rdfaTipoAutoria = string.Empty;

                            if (entidadObraAutor != null)
                            {
                                SemanticPropertyModel propAutorObraAutor = entidadObraAutor.GetPropertyByPath("http://museodelprado.es/ontologia/pradomuseum.owl#author");

                                if (propAutorObraAutor != null && propAutorObraAutor.FirstPropertyValue != null)
                                {
                                    rfdaPropAutorObra = pSemCmsModel.GetRDFAProperty(propAutorObraAutor);
                                    rfdaEntidadAutorObra = pSemCmsModel.GetRDFAEntity(propAutorObraAutor.FirstPropertyValue.RelatedEntity);
                                    rfdaNombreAutorObra = pSemCmsModel.GetRDFAProperty(propAutorObraAutor.FirstPropertyValue.RelatedEntity.GetPropertyByPath("http://museodelprado.es/ontologia/ecidoc.owl#p131_E82_p102_has_title"));
                                    rfdaTipoAutor = pSemCmsModel.GetRDFAProperty(entidadObraAutor.GetPropertyByPath("http://museodelprado.es/ontologia/ecidoc.owl#p2_has_author_type"));
                                    SemanticPropertyModel propAutoria = entidadObraAutor.GetPropertyByPath("http://museodelprado.es/ontologia/pradomuseum.owl#authorship");

                                    if (propAutoria != null && propAutoria.FirstPropertyValue != null)
                                    {
                                        rdfaAutoria = pSemCmsModel.GetRDFAProperty(propAutoria);
                                        rdfaEntidadAutoria = pSemCmsModel.GetRDFAEntity(propAutoria.FirstPropertyValue.RelatedEntity);
                                        SemanticPropertyModel propAutorAutoria = propAutoria.FirstPropertyValue.RelatedEntity.GetPropertyByPath("http://museodelprado.es/ontologia/pradomuseum.owl#author");

                                        if (propAutorAutoria != null && propAutorAutoria.FirstPropertyValue != null)
                                        {
                                            rdfaAutorAutoria = pSemCmsModel.GetRDFAProperty(propAutorAutoria);
                                            rdfaEntidadAutorAutoria = pSemCmsModel.GetRDFAEntity(propAutorAutoria.FirstPropertyValue.RelatedEntity);
                                            rdfaNombreAutorAutoria = pSemCmsModel.GetRDFAProperty(propAutorAutoria.FirstPropertyValue.RelatedEntity.GetPropertyByPath("http://museodelprado.es/ontologia/ecidoc.owl#p131_E82_p102_has_title"));
                                        }
                                        rdfaTipoAutoria = pSemCmsModel.GetRDFAProperty(propAutoria.FirstPropertyValue.RelatedEntity.GetPropertyByPath("http://museodelprado.es/ontologia/ecidoc.owl#p2_has_type_authorship"));
                                    }
                                }
                            }
                            htmlAutor += "<span " + Html.Raw(pSemCmsModel.GetRDFAProperty(propObraAutor.Property)) + ">";
                            htmlAutor += "<span " + Html.Raw(pSemCmsModel.GetRDFAEntity(entidadObraAutor)) + ">";
                            {
                                if (AutoriaPrimero(tipoAutoria) && autor.autoria.Count == 0)
                                {
                                    if (!string.IsNullOrEmpty(tipoAutoria))
                                    {
                                        htmlAutor += "<span " + Html.Raw(rdfaAutoria) + ">";
                                        htmlAutor += "<span " + Html.Raw(rdfaEntidadAutoria) + "> <span " + Html.Raw(rdfaTipoAutoria) + "> " + tipoAutoria + "</span> </span>";
                                        htmlAutor += "</span>";
                                    }

                                    if (!string.IsNullOrEmpty(nombreAutor) && (nombreAutor.Contains("Anónimo") || nombreAutor.Contains("Taller")))
                                    {
                                        htmlAutor += "<span " + Html.Raw(rfdaPropAutorObra) + ">";
                                        htmlAutor += "<span " + Html.Raw(rfdaEntidadAutorObra) + ">";
                                        htmlAutor += "<span " + Html.Raw(rfdaNombreAutorObra) + ">" + nombreAutor + "</span>";
                                        htmlAutor += "</span>";
                                        htmlAutor += "</span>";
                                    }
                                    else if (!string.IsNullOrEmpty(nombreAutor))
                                    {
                                        htmlAutor += "<span " + Html.Raw(rfdaPropAutorObra) + ">";
                                        htmlAutor += "<span " + Html.Raw(rfdaEntidadAutorObra) + ">";
                                        htmlAutor += "<a href=\"" + enlaceAutor + "\"><span " + Html.Raw(rfdaNombreAutorObra) + ">" + nombreAutor + "</span></a>";
                                        htmlAutor += "</span>";
                                        htmlAutor += "</span>";
                                    }

                                    if (tipoAutor != null && tipoAutor.Any())
                                    {

                                        htmlAutor += "<span> -<span " + Html.Raw(rfdaTipoAutor) + ">" + String.Join(", ", tipoAutor.ToArray()) + "</span>-</span>";
                                    }

                                }


                                else
                                {


                                    if (!string.IsNullOrEmpty(nombreAutor) && (nombreAutor.Contains("Anónimo") || nombreAutor.Contains("Taller")))
                                    {
                                        htmlAutor += "<span " + Html.Raw(rfdaPropAutorObra) + ">";
                                        htmlAutor += "<span " + Html.Raw(rfdaEntidadAutorObra) + ">";
                                        htmlAutor += "<span " + Html.Raw(rfdaNombreAutorObra) + ">" + nombreAutor + "</span>";
                                        htmlAutor += "</span>";
                                        htmlAutor += "</span>";
                                    }
                                    else if (!string.IsNullOrEmpty(nombreAutor))
                                    {
                                        htmlAutor += "<span " + Html.Raw(rfdaPropAutorObra) + ">";
                                        htmlAutor += "<span " + Html.Raw(rfdaEntidadAutorObra) + ">";
                                        htmlAutor += "<a href=\"" + enlaceAutor + "\"><span " + Html.Raw(rfdaNombreAutorObra) + ">" + nombreAutor + "</span></a>";
                                        htmlAutor += "</span>";
                                        htmlAutor += "</span>";
                                    }

                                    if (tipoAutor != null && tipoAutor.Any())
                                    {

                                        htmlAutor += "<span> -<span " + Html.Raw(rfdaTipoAutor) + ">" + String.Join(", ", tipoAutor.ToArray()) + "</span>-</span>";
                                    }

                                    if (!string.IsNullOrEmpty(tipoAutoria))
                                    {
                                        htmlAutor += "<span " + Html.Raw(rdfaAutoria) + ">";
                                        htmlAutor += "<span " + Html.Raw(rdfaEntidadAutoria) + "> <span " + Html.Raw(rdfaTipoAutoria) + ">" + tipoAutoria + "</span></span>";
                                        htmlAutor += "</span>";
                                    }
                                    if (autor.autoria != null && autor.autoria.Any())
                                    {
                                        htmlAutor += "<span " + Html.Raw(rdfaAutoria) + ">";
                                        foreach (KeyValuePair<string, List<string>> autorias in autor.autoria)
                                        {

                                            htmlAutor += "<span " + Html.Raw(rdfaEntidadAutoria) + "> (<span " + Html.Raw(rdfaTipoAutoria) + ">" + autorias.Key + ":</span> <span " + Html.Raw(rdfaAutorAutoria) + "><span " + Html.Raw(rdfaEntidadAutorAutoria) + "><span " + Html.Raw(rdfaNombreAutorAutoria) + ">" + String.Join("; ", autorias.Value.ToArray()) + "</span></span></span>)</span>";
                                        }


                                        htmlAutor += "</span>";
                                    }
                                }
                                htmlAutor += "</span>";
                                htmlAutor += "</span>";
                            }
                        }

                        if (!autoresOrdenados[autoresOrdenados.Count() - 1].Equals(autor))
                        {
                            string puntoycoma = "; ";
                            htmlAutor += puntoycoma;
                            //@puntoycoma
                        }
                                @Html.Raw(htmlAutor)
                    }
    </dd>
            }
        }
    }
      public void   PintarAutorLateral2(List<autorVista> pListaAutores, string pIdiomaNav)
    {

        if (pListaAutores != null && pListaAutores.Count > 0)
        {
            // Cuando la obra tiene sólo un autor, lo muestra tenga autoría o no.
            if (pListaAutores.Count == 1)
            {
                autorVista autor = pListaAutores[0];

                if (autor != null)
                {
                    string nombreAutor = autor.nombreAutor;
                    string tipoAutoria = autor.tipoAutoria;
                    string enlaceAutor = autor.enlaceAutor;
                    string infoAutor = autor.infoAutor;
                    string descripcionAutor = autor.descripcionAutor;
                    string fotoAutor = autor.imagenAutor;
                    List<string> tipoAutor = autor.tipoAutor;

    <div class="autor">
                                @{
                            if (autor.autoria == null || autor.autoria.Count() == 0)
                            {
                                if (string.IsNullOrEmpty(tipoAutoria))
                                {
                                                    <h2 class="borde">@nombreAutor</h2>
                                }
                                else
                                {
                                    if (AutoriaPrimero(tipoAutoria) && autor.autoria.Count == 0)
                                    {
                                                        <h2 class="borde">@tipoAutoria @nombreAutor </h2>
                                    }
                                    else
                                    {
                                                        <h2 class="borde">@nombreAutor  @tipoAutoria</h2>
                                    }
                                }

                                if (!string.IsNullOrEmpty(infoAutor))
                                {
                                                    <p>@infoAutor</p>
                                }
                                if (!string.IsNullOrEmpty(fotoAutor))
                                {
                                                    <img src="@ViewBag.BaseUrlContent/@fotoAutor" alt="@nombreAutor">
                                }
                                if (!string.IsNullOrEmpty(nombreAutor) && !nombreAutor.Contains("Anónimo") && !nombreAutor.Contains("Taller"))
                                {
                                    if (!string.IsNullOrEmpty(descripcionAutor) && !string.IsNullOrEmpty(pIdiomaNav) && pIdiomaNav.Equals("es"))
                                    {
                                                        <p>@Html.AcortarTexto(descripcionAutor, 300)</p>
                                                        <p class="pie">@Html.Translate("FUENTE_MUSEO_NACIONAL_DEL_PRADO")</p>
                                    }
                                }
                                if (!string.IsNullOrEmpty(enlaceAutor) && !string.IsNullOrEmpty(pIdiomaNav))
                                {
                                                    <a href="@enlaceAutor" class="mas-info">

                                                        @if (autor.generoAutor == "http://museodelprado.es/items/gender_female")
                                        {
                                                            @Html.Translate("VERFICHADEAUTORA")
                                        }
                                        else
                                        {
                                                            @Html.Translate("VERFICHADEAUTOR")
                                        }
                                                    </a>

                                }

                            }
                            else
                            {
                                if (!string.IsNullOrEmpty(nombreAutor))
                                {
                                    if (string.IsNullOrEmpty(tipoAutoria))
                                    {
                                        string valorAutorias = "";

                                        foreach (KeyValuePair<string, List<string>> autorias in autor.autoria)
                                        {
                                            valorAutorias += autorias.Key + ": " + String.Join("; ", autorias.Value.ToArray());
                                            if (!autor.autoria.Last().Equals(autorias))
                                            {
                                                valorAutorias += "; ";
                                            }
                                            //NOMBRE AUTOR - TIPOAUTOR1, TIPOAUTOR2 – (TIPOAUTORIA1 AUTORIA1A, AUTORIA1B; TIPOAUTORIA2 AUTORIA2A, AUTORIA2B)
                                        }
                                        if (tipoAutor != null && tipoAutor.Any())
                                        {

                                            if (nombreAutor.Contains("Anónimo") || nombreAutor.Contains("Taller"))
                                            {
                                                                <h2 class="borde"> @nombreAutor -@String.Join(", ", tipoAutor.ToArray())- (@valorAutorias)</h2>

                                            }
                                            else
                                            {

                                                                <h2 class="borde"><a href="@enlaceAutor">@nombreAutor</a> -@String.Join(", ", tipoAutor.ToArray())- (@valorAutorias)</h2>

                                            }
                                        }
                                        else
                                        {
                                            if (nombreAutor.Contains("Anónimo") || nombreAutor.Contains("Taller"))
                                            {

                                                                <h2 class="borde">@nombreAutor (@valorAutorias)</h2>

                                            }
                                            else
                                            {

                                                                <h2 class="borde"><a href="@enlaceAutor">@nombreAutor</a> (@valorAutorias)</h2>

                                            }
                                        }
                                    }
                                    else
                                    {
                                        if (tipoAutor != null && tipoAutor.Any())
                                        {
                                            if (nombreAutor.Contains("Anónimo") || nombreAutor.Contains("Taller"))
                                            {

                                                                <h2 class="borde">@nombreAutor -@String.Join(", ", tipoAutor.ToArray())- @tipoAutoria</h2>

                                            }
                                            else
                                            {

                                                                <h2 class="borde"><a href="@enlaceAutor">@nombreAutor</a> -@String.Join(", ", tipoAutor.ToArray())- @tipoAutoria</h2>

                                            }
                                        }
                                        else
                                        {
                                            if (nombreAutor.Contains("Anónimo") || nombreAutor.Contains("Taller"))
                                            {

                                                                <h2 class="borde">@nombreAutor @tipoAutoria</h2>

                                            }
                                            else
                                            {

                                                                <h2 class="borde"><a href="@enlaceAutor">@nombreAutor</a> @tipoAutoria</h2>

                                            }
                                        }
                                    }

                                }
                                else if (!string.IsNullOrEmpty(nombreAutor))
                                {

                                                    <h2 class="borde"><a href="@enlaceAutor">@nombreAutor</a></h2>
                                    if (!string.IsNullOrEmpty(infoAutor))
                                    {
                                                        <p>@infoAutor</p>
                                    }

                                }
                            }
                                }
    </div>
                }
            }
            else if (pListaAutores.Count > 1) // Cuando la obra tiene varios autores sólo muestra los que no tienen autoría
            {
                List<autorVista> autoresSinAutoria = pListaAutores.OrderBy(autor => autor.ordenAutor).ToList();

                if (autoresSinAutoria != null && autoresSinAutoria.Count > 0)
                {
    <dl class="autor">
                                @foreach (autorVista autor in autoresSinAutoria)
                        {
                            if (autor != null)
                            {
                                string nombreAutor = autor.nombreAutor;
                                string enlaceAutor = autor.enlaceAutor;
                                string infoAutor = autor.infoAutor;
                                string tipoAutoria = autor.tipoAutoria;
                                List<string> tipoAutor = autor.tipoAutor;

                                if (!string.IsNullOrEmpty(nombreAutor) && nombreAutor.Contains("Anónimo") && nombreAutor.Contains("Taller"))
                                {
                                            <dt>@nombreAutor</dt>
                                }
                                else if (!string.IsNullOrEmpty(nombreAutor) && ((autor.autoria != null && autor.autoria.Any()) || !string.IsNullOrEmpty(tipoAutoria)))
                                {
                                    if (autor.autoria != null && autor.autoria.Any())
                                    {
                                        string valorAutorias = "";

                                        foreach (KeyValuePair<string, List<string>> autorias in autor.autoria)
                                        {
                                            valorAutorias += autorias.Key + ": " + String.Join("; ", autorias.Value.ToArray());
                                            if (!autor.autoria.Last().Equals(autorias))
                                            {
                                                valorAutorias += "; ";
                                            }
                                            //NOMBRE AUTOR - TIPOAUTOR1, TIPOAUTOR2 – (TIPOAUTORIA1 AUTORIA1A, AUTORIA1B; TIPOAUTORIA2 AUTORIA2A, AUTORIA2B)
                                        }
                                        if (pIdiomaNav.Equals("es"))
                                        {
                                            if (tipoAutor != null && tipoAutor.Any())
                                            {
                                                        <dt><a href="@enlaceAutor">@nombreAutor</a> -@String.Join(", ", tipoAutor.ToArray())- (@valorAutorias)</dt>
                                            }
                                            else
                                            {
                                                        <dt><a href="@enlaceAutor">@nombreAutor</a> (@valorAutorias)</dt>
                                            }
                                        }
                                        else
                                        {
                                            if (tipoAutor != null && tipoAutor.Any())
                                            {
                                                        <dt>@nombreAutor -@String.Join(", ", tipoAutor.ToArray())- (@valorAutorias)</dt>
                                            }
                                            else
                                            {
                                                        <dt>@nombreAutor (@valorAutorias)</dt>
                                            }
                                        }
                                    }
                                    else
                                    {
                                        if (pIdiomaNav.Equals("es"))
                                        {
                                            if (tipoAutor != null && tipoAutor.Any())
                                            {
                                                        <dt><a href="@enlaceAutor">@nombreAutor</a> -@String.Join(", ", tipoAutor.ToArray()) -@tipoAutoria</dt>
                                            }
                                            else
                                            {
                                                        <dt><a href="@enlaceAutor">@nombreAutor</a> @tipoAutoria</dt>
                                            }
                                        }
                                        else
                                        {
                                            if (tipoAutor != null && tipoAutor.Any())
                                            {
                                                        <dt>@nombreAutor -@String.Join(", ", tipoAutor.ToArray())-@tipoAutoria</dt>
                                            }
                                            else
                                            {
                                                        <dt>@nombreAutor @tipoAutoria</dt>
                                            }
                                        }
                                    }

                                }
                                else if (!string.IsNullOrEmpty(nombreAutor))
                                {
                                    if (pIdiomaNav.Equals("es"))
                                    {
                                        if (tipoAutor.Count > 0)
                                        {
                                                    <dt><a href="@enlaceAutor">@nombreAutor </a> - @String.Join(", ", tipoAutor.ToArray())</dt>
                                        }
                                        else { 
                                                    <dt><a href="@enlaceAutor">@nombreAutor </a></dt>
                                        }
                                    }

                                    else
                                    {
                                        if (tipoAutor.Count > 0)
                                        {
                                                    <dt>@nombreAutor - @String.Join(", ", tipoAutor.ToArray())</dt>
                                        }
                                        else { 
                                                    <dt>@nombreAutor</dt>
                                        }
                                    }
                                    if (!string.IsNullOrEmpty(infoAutor))
                                    {
                                        if (tipoAutor.Count > 0)
                                        {
                                                    <dd>@infoAutor - @String.Join(", ", tipoAutor.ToArray())</dd>
                                        }
                                        else { 
                                                    <dd>@infoAutor</dd>
                                        }
                                    }
                                }

                            }
                        }
    </dl>
                }
            }
        }
    }
     public void   PintarAutorImagen(List<autorVista> pListaAutores)
    {
        string listadoAutoresObra = string.Empty;
        if (pListaAutores != null && pListaAutores.Count > 0)
        {
            List<autorVista> autoresOrdenados = pListaAutores.OrderBy(autor => autor.ordenAutor).ToList();


            if (autoresOrdenados != null && autoresOrdenados.Count > 0)
            {
                foreach (autorVista autor in autoresOrdenados)
                {
                    if (autor != null)
                    {
                        string nombreAutor = autor.nombreAutor;
                        string tipoAutoria = autor.tipoAutoria;
                        string enlaceAutor = autor.enlaceAutor;
                        List<string> tipoAutor = autor.tipoAutor;


                        if (autor.autoria.Count == 0 && !string.IsNullOrEmpty(tipoAutoria) && AutoriaPrimero(tipoAutoria))
                        {

                            if (!string.IsNullOrEmpty(tipoAutoria))
                            {
                                listadoAutoresObra = listadoAutoresObra + " " + tipoAutoria + " ";
                            }

                            if (!string.IsNullOrEmpty(nombreAutor))
                            {
                                listadoAutoresObra = listadoAutoresObra + nombreAutor;
                            }

                            if (tipoAutor != null && tipoAutor.Any())
                            {
                                listadoAutoresObra = listadoAutoresObra + " -" + String.Join(", ", tipoAutor.ToArray()) + "-";
                            }

                            if (!autoresOrdenados[autoresOrdenados.Count() - 1].Equals(autor))
                            {
                                listadoAutoresObra += "; ";
                            }
                        }
                        else
                        {
                            if (!string.IsNullOrEmpty(nombreAutor))
                            {
                                listadoAutoresObra = listadoAutoresObra + nombreAutor;
                            }

                            if (tipoAutor != null && tipoAutor.Any())
                            {
                                listadoAutoresObra = listadoAutoresObra + " -" + String.Join(", ", tipoAutor.ToArray()) + "-";
                            }

                            if (!string.IsNullOrEmpty(tipoAutoria))
                            {
                                listadoAutoresObra = listadoAutoresObra + " " + tipoAutoria + "";
                            }
                            else if (autor.autoria != null && autor.autoria.Any())
                            {
                                string valorAutorias = "";

                                foreach (KeyValuePair<string, List<string>> autorias in autor.autoria)
                                {
                                    valorAutorias += autorias.Key + ": " + String.Join("; ", autorias.Value.ToArray());
                                    if (!autor.autoria.Last().Equals(autorias))
                                    {
                                        valorAutorias += "; ";
                                    }
                                }

                                listadoAutoresObra = listadoAutoresObra + " (" + valorAutorias + ")";
                            }
                        }

                        if (!autoresOrdenados[autoresOrdenados.Count() - 1].Equals(autor))
                        {
                            listadoAutoresObra += "; ";
                        }
                    }
                }
            }
        }


    <div class="author">@listadoAutoresObra</div>
    }

    }


}
catch (Exception e)
{

    <div id="messageException">@e.Message</div>
    <div id="messageException">@e.InnerException.Message</div>
    <div id="messageException">@e.InnerException.StackTrace</div>
}
@functions{
    public static List<string> ObtenerValoresPropiedadSemCms(SemanticPropertyModel pPropiedad)
    {
        List<string> valores = new List<string>();
        if (pPropiedad != null && pPropiedad.PropertyValues.Count > 0)
        {
            foreach (SemanticPropertyModel.PropertyValue propValue in pPropiedad.PropertyValues)
            {
                valores.Add(propValue.Value);
            }
        }

        return valores;
    }
    private string ObtenerFechaFormateada(string pFechaNormalizada, string pSeparador)
    {
        if (!string.IsNullOrEmpty(pFechaNormalizada) && pFechaNormalizada.Length >= 8)
        {
            return string.Concat(pFechaNormalizada.Substring(6, 2), pSeparador, pFechaNormalizada.Substring(4, 2), pSeparador, pFechaNormalizada.Substring(0, 4));
        }
        else
        {
            return string.Empty;
        }

    }
    public static bool AutoriaPrimero(string pAutoria)
    {
        string pat = @"(^and.*)|(^y.*)|(.*[?].*)";
        System.Text.RegularExpressions.Regex r = new System.Text.RegularExpressions.Regex(pat, System.Text.RegularExpressions.RegexOptions.IgnoreCase);
        System.Text.RegularExpressions.Match m = r.Match(pAutoria);
        return !m.Success;
    }



    public class autorVista
    {
        public autorVista(string pNombreAutor, Dictionary<string, List<string>> pAutoria, string pTipoAutoria, string pEnlaceAutor, string pInfoAutor, string pDescripcionAutor, string pImagenAutor, int pOrdenAutor, string pGeneroAutor, List<string> pTipoAutor, SemanticPropertyModel.PropertyValue pPropObraAutor)
        {
            this.nombreAutor = pNombreAutor;
            this.autoria = pAutoria;
            this.tipoAutoria = pTipoAutoria;
            this.enlaceAutor = pEnlaceAutor;
            this.infoAutor = pInfoAutor;
            this.descripcionAutor = pDescripcionAutor;
            this.imagenAutor = pImagenAutor;
            this.ordenAutor = pOrdenAutor;
            this.tipoAutor = pTipoAutor;
            this.propObraAutor = pPropObraAutor;
            this.generoAutor = pGeneroAutor;
        }

        public string nombreAutor { get; set; }
        public Dictionary<string, List<string>> autoria { get; set; }
        //public string nombreAutorAutoria { get; set; }
        public string tipoAutoria { get; set; }
        public string enlaceAutor { get; set; }
        public string infoAutor { get; set; }
        public string descripcionAutor { get; set; }
        public string imagenAutor { get; set; }
        public string generoAutor { get; set; }
        public int ordenAutor { get; set; }
        public List<string> tipoAutor { get; set; }
        public SemanticPropertyModel.PropertyValue propObraAutor { get; set; }
    }


    public Boolean aniadirAutorListado(List<autorVista> listaAutores, SemanticPropertyModel.PropertyValue propObraAutor)
    {
        Boolean anonimo = false;

        if (listaAutores != null)
        {
            if (propObraAutor != null && propObraAutor.Value != null)
            {
                //Orden del autor

                int ordenAutor = 100;

                string orden = propObraAutor.RelatedEntity.GetFirstValuePropertyByPath("http://museodelprado.es/ontologia/ecidoc.owl#order");
                if (!string.IsNullOrEmpty(orden))
                {
                    try
                    {
                        ordenAutor = int.Parse(orden);
                    }
                    catch (Exception)
                    {
                        ordenAutor = 100;
                    }
                }


                // Tipo de autor

                List<string> tipoAutor = GetMultiplePropertyValueSemCms(propObraAutor.RelatedEntity.GetPropertyByPath("http://museodelprado.es/ontologia/ecidoc.owl#p2_has_author_type"));

                SemanticPropertyModel propDeObraAutor = propObraAutor.RelatedEntity.GetPropertyByPath("http://museodelprado.es/ontologia/pradomuseum.owl#author");

                if (propDeObraAutor != null && propDeObraAutor.PropertyValues != null && propDeObraAutor.PropertyValues.Count > 0)
                {
                    // Nombre autor

                    SemanticPropertyModel.PropertyValue propAutor = propDeObraAutor.FirstPropertyValue;
                    if (propAutor.Value.Equals("http://museodelprado.es/items/E39_Actor_99d7590d-7ec8-4da4-bc2f-92064214c76c_36f0f9ff-4ecd-405a-be0f-7d80b4b177a8"))
                    {
                        anonimo = true;
                    }

                    SemanticPropertyModel propNombreAutor = propAutor.RelatedEntity.GetPropertyByPath("http://museodelprado.es/ontologia/ecidoc.owl#p131_E82_p102_has_title");

                    string nombreAutor = string.Empty;
                    string enlaceAutor = string.Empty;

                    if (propNombreAutor != null && propNombreAutor.PropertyValues != null && propNombreAutor.PropertyValues.Count > 0)
                    {
                        nombreAutor = propNombreAutor.FirstPropertyValue.Value;
                        enlaceAutor = propNombreAutor.FirstPropertyValue.DownloadUrl;
                    }

                    //Autoría

                    Dictionary<string, List<string>> autoria = new Dictionary<string, List<string>>();
                    string tipoAutoria = string.Empty;
                    SemanticPropertyModel propAutoria = propObraAutor.RelatedEntity.GetPropertyByPath("http://museodelprado.es/ontologia/pradomuseum.owl#authorship");
                    if (propAutoria != null && propAutoria.PropertyValues.Count > 0)
                    {
                        foreach (SemanticPropertyModel.PropertyValue propValue in propAutoria.PropertyValues)
                        {
                            string nombreAutorAutoria = propValue.RelatedEntity.GetFirstValuePropertyByPath("http://museodelprado.es/ontologia/pradomuseum.owl#author@@@http://museodelprado.es/ontologia/ecidoc.owl#p131_E82_p102_has_title");
                            string tipoAutorAutoria = propValue.RelatedEntity.GetFirstValuePropertyByPath("http://museodelprado.es/ontologia/ecidoc.owl#p2_has_type_authorship");
                            if (tipoAutorAutoria == null)
                            {
                                tipoAutorAutoria = string.Empty;
                            }
                            if (nombreAutorAutoria == nombreAutor || string.IsNullOrEmpty(nombreAutorAutoria))
                            {
                                tipoAutoria = tipoAutorAutoria;
                            }
                            else
                            {
                                if (!autoria.ContainsKey(tipoAutorAutoria))
                                {
                                    autoria.Add(tipoAutorAutoria, new List<string>());
                                }
                                autoria[tipoAutorAutoria].Add(nombreAutorAutoria);
                            }

                        }
                    }

                    string lugarNacimientoAutor = propAutor.RelatedEntity.GetFirstValuePropertyByPath("http://museodelprado.es/ontologia/ecidoc.owl#p96_E67_p7_gave_birth_place");
                    string anioNacimientoAutor = propAutor.RelatedEntity.GetFirstValuePropertyByPath("http://museodelprado.es/ontologia/ecidoc.owl#p96_E67_p4_gave_birth_year");
                    string lugarDefuncionAutor = propAutor.RelatedEntity.GetFirstValuePropertyByPath("http://museodelprado.es/ontologia/ecidoc.owl#p100i_E69_p7_death_place");
                    string anioDefuncionAutor = propAutor.RelatedEntity.GetFirstValuePropertyByPath("http://museodelprado.es/ontologia/ecidoc.owl#p100i_E69_p4_death_year");

                    string descripcionAutor = propAutor.RelatedEntity.GetFirstValuePropertyByPath("http://www.cidoc-crm.org/cidoc-crm#p3_has_note");
                    string fotoAutor = propAutor.RelatedEntity.GetFirstValuePropertyByPath("http://museodelprado.es/ontologia/ecidoc.owl#p65_E36_shows_visual_item");

                    string generoAutor = propAutor.RelatedEntity.GetFirstValuePropertyByPath("http://www.cidoc-crm.org/cidoc-crm#P2_has_type");
                    // #region Tratamiento información lugar y fecha de nacimiento y defunción del autor.

                    string infoAutor = string.Empty;

                    if (!string.IsNullOrEmpty(lugarNacimientoAutor))
                    {
                        infoAutor = lugarNacimientoAutor;
                    }

                    if (!string.IsNullOrEmpty(anioNacimientoAutor))
                    {
                        if (!string.IsNullOrEmpty(infoAutor))
                        {
                            infoAutor = string.Concat(infoAutor, ", ", anioNacimientoAutor);
                        }
                        else
                        {
                            infoAutor = anioNacimientoAutor;
                        }
                    }

                    if (!string.IsNullOrEmpty(lugarDefuncionAutor))
                    {
                        if (!string.IsNullOrEmpty(infoAutor))
                        {
                            infoAutor = string.Concat(infoAutor, " - ", lugarDefuncionAutor);
                        }
                        else
                        {
                            infoAutor = lugarDefuncionAutor;
                        }
                    }

                    if (!string.IsNullOrEmpty(anioDefuncionAutor))
                    {
                        if (!string.IsNullOrEmpty(infoAutor))
                        {
                            infoAutor = string.Concat(infoAutor, ", ", anioDefuncionAutor);
                        }
                        else
                        {
                            infoAutor = anioDefuncionAutor;
                        }
                    }

                    // #endregion Tratamiento información

                    if (!string.IsNullOrEmpty(nombreAutor))
                    {
                        autorVista autor = new autorVista(nombreAutor, autoria, tipoAutoria, enlaceAutor, infoAutor, descripcionAutor, fotoAutor, ordenAutor, generoAutor, tipoAutor, propObraAutor);
                        listaAutores.Add(autor);
                    }
                }
            }
        }

        return anonimo;
    }

    public class Exposicion
    {
        public Exposicion(string pTitulo, string pEnlace, string pTipo, string pMuseo, string pSede, string pEdificio, string pCiudad, string pFechaInicio, string pFechaFin)
        {
            this.titulo = pTitulo;
            this.enlace = pEnlace;
            this.tipo = pTipo;
            this.museo = pMuseo;
            this.sede = pSede;
            this.edificio = pEdificio;
            this.ciudad = pCiudad;
            this.fechaInicio = pFechaInicio;
            this.fechaFin = pFechaFin;
        }

        public string titulo { get; set; }
        public string enlace { get; set; }
        public string tipo { get; set; }
        public string museo { get; set; }
        public string sede { get; set; }
        public string edificio { get; set; }
        public string ciudad { get; set; }
        public string fechaInicio { get; set; }
        public string fechaFin { get; set; }
    }

    public class RDFPropertyAttribute : Attribute
    {
        public RDFPropertyAttribute(string pRDFA)
        {
            mRDFA = pRDFA;
        }
        protected string mRDFA;
        public string RDFProperty
        {
            get { return mRDFA; }
        }
    }

    [AttributeUsage(AttributeTargets.All, AllowMultiple = true)]
    public class LABELAttribute : Attribute
    {
        private GnossOCBase.LanguageEnum IdiomaDefecto = GnossOCBase.LanguageEnum.es;
        private GnossOCBase.LanguageEnum midioma;
        private string mlabel;
        public LABELAttribute(GnossOCBase.LanguageEnum idioma, string label)
        {
            mlabel = label;
            midioma = idioma;
        }
        public string LABEL(GnossOCBase.LanguageEnum pLang)
        {
            if (midioma.Equals(pLang))
            {
                return mlabel;
            }
            return "";
        }
    }


    public class GnossOCBase
    {
        public enum LanguageEnum
        {
            es, en
        }
        internal List<string> prefList = new List<string>();
        internal string mGNOSSID;
        internal string mURL;
        public GnossOCBase()
        {
            prefList.Add("xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"");
            prefList.Add("xmlns:xsd=\"http://www.w3.org/2001/XMLSchema#\"");
            prefList.Add("xmlns:rdfs=\"http://www.w3.org/2000/01/rdf-schema#\"");
            prefList.Add("xmlns:owl=\"http://www.w3.org/2002/07/owl#\"");
            prefList.Add("xmlns:dc=\"http://purl.org/dc/elements/1.1/\"");
            prefList.Add("xmlns:pm=\"http://museodelprado.es/ontologia/pradomuseum.owl#\"");
        }

        public string GNOSSID
        {
            get { return mGNOSSID; }
        }
        public string URL
        {
            get { return mURL; }
        }
        public static string GetPropertyValueSemCms(SemanticPropertyModel pProperty)
        {
            if (pProperty != null && pProperty.PropertyValues.Count > 0)
            {
                return pProperty.PropertyValues[0].Value;
            }
            return "";
        }
        public static List<string> GetMultiplePropertyValueSemCms(SemanticPropertyModel pProperty)
        {
            List<string> listString = new List<string>();
            if (pProperty != null && pProperty.PropertyValues.Count > 0)
            {
                foreach (SemanticPropertyModel.PropertyValue propValue in pProperty.PropertyValues)
                {
                    listString.Add(propValue.Value);
                }
            }
            return listString;
        }

        public static int? GetNumberIntPropertyValueSemCms(SemanticPropertyModel pProperty)
        {
            if (pProperty != null && pProperty.PropertyValues.Count > 0 && !string.IsNullOrEmpty(pProperty.PropertyValues[0].Value))
            {
                return int.Parse(pProperty.PropertyValues[0].Value);
            }
            return null;
        }
        public static List<int> GetMultipleNumberIntPropertyValueSemCms(SemanticPropertyModel pProperty)
        {
            List<int> listNumbers = new List<int>();
            if (pProperty != null && pProperty.PropertyValues.Count > 0)
            {
                foreach (SemanticPropertyModel.PropertyValue propValue in pProperty.PropertyValues)
                {
                    listNumbers.Add(int.Parse(propValue.Value));
                }
            }
            return listNumbers;
        }

        public static float? GetNumberFloatPropertyValueSemCms(SemanticPropertyModel pProperty)
        {
            if (pProperty != null && pProperty.PropertyValues.Count > 0 && !string.IsNullOrEmpty(pProperty.PropertyValues[0].Value))
            {
                return float.Parse(pProperty.PropertyValues[0].Value.Replace('.', ','));
            }
            return 0;
        }
        public static List<float> GetMultipleNumberFloatPropertyValueSemCms(SemanticPropertyModel pProperty)
        {
            List<float> listNumbers = new List<float>();
            if (pProperty != null && pProperty.PropertyValues.Count > 0)
            {
                foreach (SemanticPropertyModel.PropertyValue propValue in pProperty.PropertyValues)
                {
                    listNumbers.Add(float.Parse(propValue.Value));
                }
            }
            return listNumbers;
        }

        public static DateTime? GetDateValuePropertySemCms(SemanticPropertyModel pProperty)
        {
            string stringDate = GetPropertyValueSemCms(pProperty);
            if (!string.IsNullOrEmpty(stringDate))
            {
                int year = 0;
                int month = 0;
                int day = 0;
                if (stringDate.Contains('/'))
                {
                    day = int.Parse(stringDate.Split('/')[0]);
                    month = int.Parse(stringDate.Split('/')[1]);
                    year = int.Parse(stringDate.Split('/')[2]);
                }
                else
                {
                    year = int.Parse(stringDate.Substring(0, 4));
                    month = int.Parse(stringDate.Substring(4, 2));
                    day = int.Parse(stringDate.Substring(6, 2));
                }
                if (stringDate.Length == 14)
                {
                    if (month == 0 || day == 0)
                    {
                        return new DateTime(year);
                    }
                    else
                    {
                        return new DateTime(year, month, day, int.Parse(stringDate.Substring(7, 2)), int.Parse(stringDate.Substring(9, 2)), int.Parse(stringDate.Substring(11, 2)));
                    }
                }
                else
                {
                    return new DateTime(year, month, day);
                }
            }
            return null;
        }

        public static bool? GetBooleanPropertyValueSemCms(SemanticPropertyModel pProperty)
        {
            if (pProperty != null && pProperty.PropertyValues.Count > 0 && !string.IsNullOrEmpty(pProperty.PropertyValues[0].Value))
            {
                if (pProperty.PropertyValues[0].Value.Equals("Sí") || pProperty.PropertyValues[0].Value.Equals("Si") || pProperty.PropertyValues[0].Value.Equals("Yes"))
                {
                    return true;
                }
                else
                {
                    return false;
                }

            }
            return null;
        }
        public string GetPropertyURI(string nombrePropiedad)
        {
            Type type = this.GetType();
            PropertyInfo mInfo = type.GetProperty(nombrePropiedad);
            if (mInfo != null)
            {
                Attribute attr = Attribute.GetCustomAttribute(mInfo, typeof(RDFPropertyAttribute));
                if (attr != null)
                {
                    return ((RDFPropertyAttribute)attr).RDFProperty;
                }
            }
            return "";
        }



        public string GetLabel(string nombrePropiedad, LanguageEnum pLang)
        {
            Type type = this.GetType();
            PropertyInfo mInfo = type.GetProperty(nombrePropiedad);

            if (mInfo != null)
            {
                Attribute[] attr = Attribute.GetCustomAttributes(mInfo, typeof(LABELAttribute));
                {
                    foreach (Attribute atributo in attr)
                    {
                        if (atributo != null)
                        {
                            if (!((LABELAttribute)atributo).LABEL(pLang).Equals(""))
                            {
                                return ((LABELAttribute)atributo).LABEL(pLang);
                            }
                        }
                    }
                }
            }

            return "";
        }
    }


    public class E37_Mark : GnossOCBase
    {

        public E37_Mark() : base() { }

        public E37_Mark(SemanticEntityModel pSemCmsModel, LanguageEnum idiomaUsuario) : base()
        {
            this.mGNOSSID = pSemCmsModel.Entity.Uri;
            this.mURL = pSemCmsModel.Properties.FirstOrDefault(p => p.PropertyValues.Any(prop => prop.DownloadUrl != null))?.FirstPropertyValue.DownloadUrl;

            this.Cidoc_p1_is_identified_by = GetPropertyValueSemCms(pSemCmsModel.GetPropertyByPath("http://museodelprado.es/ontologia/ecidoc.owl#p1_is_identified_by"));
            this.Cidoc_p3_has_note = GetPropertyValueSemCms(pSemCmsModel.GetPropertyByPath("http://www.cidoc-crm.org/cidoc-crm#p3_has_note"));
            this.Pm_order = GetNumberIntPropertyValueSemCms(pSemCmsModel.GetPropertyByPath("http://museodelprado.es/ontologia/pradomuseum.owl#order")).Value;
            this.Pm_otherDocumentation = GetPropertyValueSemCms(pSemCmsModel.GetPropertyByPath("http://museodelprado.es/ontologia/pradomuseum.owl#otherDocumentation"));
            this.Cidoc_p190_has_symbolic_content = GetPropertyValueSemCms(pSemCmsModel.GetPropertyByPath("http://www.cidoc-crm.org/cidoc-crm#p190_has_symbolic_content"));
            this.Pm_isFragment = GetBooleanPropertyValueSemCms(pSemCmsModel.GetPropertyByPath("http://museodelprado.es/ontologia/pradomuseum.owl#isFragment"));
            this.Ecidoc_p2_E55_has_type = GetPropertyValueSemCms(pSemCmsModel.GetPropertyByPath("http://museodelprado.es/ontologia/ecidoc.owl#p2_E55_has_type"));
            this.Pm_corondelesNumber = GetNumberIntPropertyValueSemCms(pSemCmsModel.GetPropertyByPath("http://museodelprado.es/ontologia/pradomuseum.owl#corondelesNumber"));
            this.Pm_corondelesPosition = GetPropertyValueSemCms(pSemCmsModel.GetPropertyByPath("http://museodelprado.es/ontologia/pradomuseum.owl#corondelesPosition"));
            this.Pm_corondelesTramo = GetNumberIntPropertyValueSemCms(pSemCmsModel.GetPropertyByPath("http://museodelprado.es/ontologia/pradomuseum.owl#corondelesTramo"));
            this.Pm_corondelesOtherMeasure = GetPropertyValueSemCms(pSemCmsModel.GetPropertyByPath("http://museodelprado.es/ontologia/pradomuseum.owl#corondelesOtherMeasure"));
            this.Pm_corondelesLocation = GetPropertyValueSemCms(pSemCmsModel.GetPropertyByPath("http://museodelprado.es/ontologia/pradomuseum.owl#corondelesLocation"));
            this.Pm_caraPapel = GetPropertyValueSemCms(pSemCmsModel.GetPropertyByPath("http://museodelprado.es/ontologia/pradomuseum.owl#caraPapel"));
            this.Pm_modelDescription = GetPropertyValueSemCms(pSemCmsModel.GetPropertyByPath("http://museodelprado.es/ontologia/pradomuseum.owl#modelDescription"));
            this.Pm_modelTitle = GetPropertyValueSemCms(pSemCmsModel.GetPropertyByPath("http://museodelprado.es/ontologia/pradomuseum.owl#modelTitle"));




            SemanticPropertyModel propEcidoc_p43_E54_has_dimension = pSemCmsModel.GetPropertyByPath("http://museodelprado.es/ontologia/ecidoc.owl#p43_E54_has_dimension");
            this.Ecidoc_p43_E54_has_dimension = new List<E54_Dimension>();
            if (propEcidoc_p43_E54_has_dimension != null && propEcidoc_p43_E54_has_dimension.PropertyValues.Count > 0)
            {
                foreach (SemanticPropertyModel.PropertyValue propValue in propEcidoc_p43_E54_has_dimension.PropertyValues)
                {
                    E54_Dimension ecidoc_p43_E54_has_dimension = new E54_Dimension(propValue.RelatedEntity, idiomaUsuario);
                    this.Ecidoc_p43_E54_has_dimension.Add(ecidoc_p43_E54_has_dimension);
                }
            }
            this.Ecidoc_p43_E54_has_dimension = this.Ecidoc_p43_E54_has_dimension.OrderBy(x => x.ECidoc_p2_E55_has_type[idiomaUsuario]).ToList();

            SemanticPropertyModel propCidoc_p65_shows_visual_item = pSemCmsModel.GetPropertyByPath("http://www.cidoc-crm.org/cidoc-crm#p65_shows_visual_item");
            this.Cidoc_p65_shows_visual_item = new List<E36_Visual_Item>();
            if (propCidoc_p65_shows_visual_item != null && propCidoc_p65_shows_visual_item.PropertyValues.Count > 0)
            {
                foreach (SemanticPropertyModel.PropertyValue propValue in propCidoc_p65_shows_visual_item.PropertyValues)
                {
                    E36_Visual_Item cidoc_p65_shows_visual_item = new E36_Visual_Item(propValue.RelatedEntity, idiomaUsuario);
                    this.Cidoc_p65_shows_visual_item.Add(cidoc_p65_shows_visual_item);
                }
            }
            this.Cidoc_p65_shows_visual_item = this.Cidoc_p65_shows_visual_item.OrderByDescending(x => x.Pm_isMain).ToList();

            SemanticPropertyModel propCidoc_p130i_has_representation = pSemCmsModel.GetPropertyByPath("http://www.cidoc-crm.org/cidoc-crm#p130i_has_representation");
            this.Cidoc_p130i_has_representation = new List<E36_Visual_Item>();
            if (propCidoc_p130i_has_representation != null && propCidoc_p130i_has_representation.PropertyValues.Count > 0)
            {
                foreach (SemanticPropertyModel.PropertyValue propValue in propCidoc_p130i_has_representation.PropertyValues)
                {
                    E36_Visual_Item cidoc_p65_shows_visual_item = new E36_Visual_Item(propValue.RelatedEntity, idiomaUsuario);
                    this.Cidoc_p130i_has_representation.Add(cidoc_p65_shows_visual_item);
                }
            }

            SemanticPropertyModel propCidoc_p70i_is_documented_in = pSemCmsModel.GetPropertyByPath("http://www.cidoc-crm.org/cidoc-crm#p70i_is_documented_in");
            this.Cidoc_p70i_is_documented_in = new List<C1003_Manifestation>();
            if (propCidoc_p70i_is_documented_in != null && propCidoc_p70i_is_documented_in.PropertyValues.Count > 0)
            {
                foreach (SemanticPropertyModel.PropertyValue propValue in propCidoc_p70i_is_documented_in.PropertyValues)
                {
                    C1003_Manifestation cidoc_p70i_is_documented_in = new C1003_Manifestation(propValue.RelatedEntity, idiomaUsuario);
                    this.Cidoc_p70i_is_documented_in.Add(cidoc_p70i_is_documented_in);
                }
            }
            this.Cidoc_p70i_is_documented_in = this.Cidoc_p70i_is_documented_in.OrderBy(x => x.Efrbrer_P3055_has_date_of_publication_or_distribution).ToList();
        }

        [LABEL(LanguageEnum.es, "Motivo:")]
        [LABEL(LanguageEnum.en, "Motive:")]
        [RDFProperty("http://www.cidoc-crm.org/cidoc-crm#p3_has_note")]
        public string Cidoc_p3_has_note { get; set; }

        [LABEL(LanguageEnum.es, "Código:")]
        [RDFProperty("http://museodelprado.es/ontologia/ecidoc.owl#p1_is_identified_by")]
        public string Cidoc_p1_is_identified_by { get; set; }

        [LABEL(LanguageEnum.es, "Orden:")]
        [RDFProperty("http://museodelprado.es/ontologia/pradomuseum.owl#order")]
        public int Pm_order { get; set; }

        [LABEL(LanguageEnum.es, "Otras referencias bibliográficas:")]
        [RDFProperty("http://museodelprado.es/ontologia/pradomuseum.owl#otherDocumentation")]
        public string Pm_otherDocumentation { get; set; }

        [LABEL(LanguageEnum.es, "Comentario modelo:")]
        [RDFProperty("http://www.cidoc-crm.org/cidoc-crm#p190_has_symbolic_content")]
        public string Cidoc_p190_has_symbolic_content { get; set; }

        [LABEL(LanguageEnum.es, "Es fragmento:")]
        [RDFProperty("http://museodelprado.es/ontologia/pradomuseum.owl#isFragment")]
        public bool? Pm_isFragment { get; set; }

        [LABEL(LanguageEnum.es, "Tipo filigrana:")]
        [RDFProperty("http://museodelprado.es/ontologia/ecidoc.owl#p2_E55_has_type")]
        public string Ecidoc_p2_E55_has_type { get; set; }

        [LABEL(LanguageEnum.es, "Corondeles:")]
        [RDFProperty("http://museodelprado.es/ontologia/pradomuseum.owl#corondelesNumber")]
        public int? Pm_corondelesNumber { get; set; }

        [LABEL(LanguageEnum.es, "Posición corondeles:")]
        [RDFProperty("http://museodelprado.es/ontologia/pradomuseum.owl#corondelesPosition")]
        public string Pm_corondelesPosition { get; set; }

        [LABEL(LanguageEnum.es, "Tramo entre corondeles:")]
        [RDFProperty("http://museodelprado.es/ontologia/pradomuseum.owl#corondelesTramo")]
        public int? Pm_corondelesTramo { get; set; }

        [LABEL(LanguageEnum.es, "Otras medidas:")]
        [RDFProperty("http://museodelprado.es/ontologia/pradomuseum.owl#corondelesOtherMeasure")]
        public string Pm_corondelesOtherMeasure { get; set; }

        [LABEL(LanguageEnum.es, "Localización:")]
        [RDFProperty("http://museodelprado.es/ontologia/pradomuseum.owl#corondelesLocation")]
        public string Pm_corondelesLocation { get; set; }

        [LABEL(LanguageEnum.es, "Cara del papel:")]
        [RDFProperty("http://museodelprado.es/ontologia/pradomuseum.owl#caraPapel")]
        public string Pm_caraPapel { get; set; }

        [LABEL(LanguageEnum.es, "Comentario:")]
        [RDFProperty("http://museodelprado.es/ontologia/pradomuseum.owl#modelDescription")]
        public string Pm_modelDescription { get; set; }

        [LABEL(LanguageEnum.es, "Nombre modelo:")]
        [RDFProperty("http://museodelprado.es/ontologia/pradomuseum.owl#modelTitle")]
        public string Pm_modelTitle { get; set; }

        [LABEL(LanguageEnum.es, "Medidas:")]
        [RDFProperty("http://museodelprado.es/ontologia/ecidoc.owl#p43_E54_has_dimension")]
        public List<E54_Dimension> Ecidoc_p43_E54_has_dimension { get; set; }

        [LABEL(LanguageEnum.es, "Imágenes:")]
        [RDFProperty("http://www.cidoc-crm.org/cidoc-crm#p65_shows_visual_item")]
        public List<E36_Visual_Item> Cidoc_p65_shows_visual_item { get; set; }

        [LABEL(LanguageEnum.es, "Imágenes modelo:")]
        [RDFProperty("http://www.cidoc-crm.org/cidoc-crm#p130i_has_representation")]
        public List<E36_Visual_Item> Cidoc_p130i_has_representation { get; set; }

        [LABEL(LanguageEnum.es, "Bibliografía:")]
        [RDFProperty("http://www.cidoc-crm.org/cidoc-crm#p70i_is_documented_in")]
        public List<C1003_Manifestation> Cidoc_p70i_is_documented_in { get; set; }

    }


    public class FrameData : GnossOCBase
    {

        public FrameData() : base() { }

        public FrameData(SemanticEntityModel pSemCmsModel, LanguageEnum idiomaUsuario) : base()
        {
            this.mGNOSSID = pSemCmsModel.Entity.Uri;
            this.mURL = pSemCmsModel.Properties.FirstOrDefault(p => p.PropertyValues.Any(prop => prop.DownloadUrl != null))?.FirstPropertyValue.DownloadUrl;

            this.Ecidoc_p15_was_influenced_by = GetPropertyValueSemCms(pSemCmsModel.GetPropertyByPath("http://museodelprado.es/ontologia/ecidoc.owl#p15_was_influenced_by"));
            this.Cidoc_p32_used_general_technique = GetPropertyValueSemCms(pSemCmsModel.GetPropertyByPath("http://www.cidoc-crm.org/cidoc-crm#p32_used_general_technique"));
            this.Pm_structure = GetPropertyValueSemCms(pSemCmsModel.GetPropertyByPath("http://museodelprado.es/ontologia/pradomuseum.owl#structure"));
            this.Pm_modelType = GetPropertyValueSemCms(pSemCmsModel.GetPropertyByPath("http://museodelprado.es/ontologia/pradomuseum.owl#modelType"));

            SemanticPropertyModel propCidoc_p65_shows_visual_item = pSemCmsModel.GetPropertyByPath("http://www.cidoc-crm.org/cidoc-crm#p65_shows_visual_item");
            this.Cidoc_p65_shows_visual_item = new List<E36_Visual_Item>();
            if (propCidoc_p65_shows_visual_item != null && propCidoc_p65_shows_visual_item.PropertyValues.Count > 0)
            {
                foreach (SemanticPropertyModel.PropertyValue propValue in propCidoc_p65_shows_visual_item.PropertyValues)
                {
                    E36_Visual_Item cidoc_p65_shows_visual_item = new E36_Visual_Item(propValue.RelatedEntity, idiomaUsuario);
                    this.Cidoc_p65_shows_visual_item.Add(cidoc_p65_shows_visual_item);
                }
            }
            this.Cidoc_p65_shows_visual_item = this.Cidoc_p65_shows_visual_item.OrderByDescending(x => x.Pm_isMain).ToList();

            this.Pm_decoration = new List<List<ConceptNode>>();
            SemanticPropertyModel propPm_decoration = pSemCmsModel.GetPropertyByPath("http://museodelprado.es/ontologia/pradomuseum.owl#decoration");
            if (propPm_decoration != null && propPm_decoration.PropertyValues.Count > 0)
            {
                foreach (SemanticPropertyModel.PropertyValue propValue in propPm_decoration.PropertyValues)
                {
                    SemanticEntityModel propProductPath = propValue.RelatedEntity;
                    SemanticPropertyModel propProductNode = propProductPath.GetPropertyByPath("http://museodelprado.es/ontologia/pradomuseum.owl#decorationFrameNode");
                    if (propProductNode != null && propProductNode.PropertyValues.Count > 0)
                    {
                        List<ConceptNode> listaNodos = new List<ConceptNode>();
                        foreach (SemanticPropertyModel.PropertyValue propValueNode in propProductNode.PropertyValues)
                        {
                            ConceptNode node = new ConceptNode(propValueNode.RelatedEntity, idiomaUsuario);
                            listaNodos.Add(node);
                        }
                        listaNodos = listaNodos.OrderBy(x => x.Skos_symbol).ToList();
                        this.Pm_decoration.Add(listaNodos);
                    }
                }
            }

        }

        [LABEL(LanguageEnum.es, "Estilo/modelo")]
        [LABEL(LanguageEnum.en, "Style/Model")]
        [RDFProperty("http://museodelprado.es/ontologia/ecidoc.owl#p15_was_influenced_by")]
        public string Ecidoc_p15_was_influenced_by { get; set; }

        [LABEL(LanguageEnum.es, "Estructura")]
        [LABEL(LanguageEnum.en, "Structure")]
        [RDFProperty("http://museodelprado.es/ontologia/pradomuseum.owl#structure")]
        public string Pm_structure { get; set; }

        [LABEL(LanguageEnum.es, "Perfil")]
        [LABEL(LanguageEnum.en, "Cross section")]
        [RDFProperty("http://museodelprado.es/ontologia/pradomuseum.owl#modelType")]
        public string Pm_modelType { get; set; }

        [LABEL(LanguageEnum.es, "Sistema de enmarcación")]
        [LABEL(LanguageEnum.en, "Framing system")]
        [RDFProperty("http://www.cidoc-crm.org/cidoc-crm#p32_used_general_technique")]
        public string Cidoc_p32_used_general_technique { get; set; }

        [LABEL(LanguageEnum.es, "Motivos decorativos")]
        [LABEL(LanguageEnum.en, "Decorative motifs")]
        [RDFProperty("http://museodelprado.es/ontologia/pradomuseum.owl#decoration")]
        public List<List<ConceptNode>> Pm_decoration { get; set; }

        [LABEL(LanguageEnum.es, "Imágenes")]
        [RDFProperty("http://www.cidoc-crm.org/cidoc-crm#p65_shows_visual_item")]
        public List<E36_Visual_Item> Cidoc_p65_shows_visual_item { get; set; }

    }


    public class E36_Visual_Item : GnossOCBase
    {

        public E36_Visual_Item() : base() { }

        public E36_Visual_Item(SemanticEntityModel pSemCmsModel, LanguageEnum idiomaUsuario) : base()
        {
            this.mGNOSSID = pSemCmsModel.Entity.Uri;
            this.mURL = pSemCmsModel.Properties.FirstOrDefault(p => p.PropertyValues.Any(prop => prop.DownloadUrl != null))?.FirstPropertyValue.DownloadUrl;
            bool? isMain = GetBooleanPropertyValueSemCms(pSemCmsModel.GetPropertyByPath("http://museodelprado.es/ontologia/pradomuseum.owl#isMain"));
            if (isMain.HasValue)
            {
                this.Pm_isMain = isMain.Value;
            }

            this.Ecidoc_p3_has_note = GetPropertyValueSemCms(pSemCmsModel.GetPropertyByPath("http://museodelprado.es/ontologia/ecidoc.owl#p3_has_note"));
            this.Ecidoc_p2_has_type = GetPropertyValueSemCms(pSemCmsModel.GetPropertyByPath("http://museodelprado.es/ontologia/ecidoc.owl#p2_has_type"));
        }


        [LABEL(LanguageEnum.es, "Imagen principal:")]
        [RDFProperty("http://museodelprado.es/ontologia/pradomuseum.owl#isMain")]
        public bool Pm_isMain { get; set; }

        [LABEL(LanguageEnum.es, "URL imagen:")]
        [RDFProperty("http://museodelprado.es/ontologia/ecidoc.owl#p3_has_note")]
        public string Ecidoc_p3_has_note { get; set; }

        [LABEL(LanguageEnum.es, "Tipo:")]
        [RDFProperty("http://museodelprado.es/ontologia/ecidoc.owl#p2_has_type")]
        public string Ecidoc_p2_has_type { get; set; }
    }

    public class E54_Dimension : GnossOCBase
    {

        public E54_Dimension() : base() { }

        public E54_Dimension(SemanticEntityModel pSemCmsModel, LanguageEnum idiomaUsuario) : base()
        {
            this.mGNOSSID = pSemCmsModel.Entity.Uri;
            this.mURL = pSemCmsModel.Properties.FirstOrDefault(p => p.PropertyValues.Any(prop => prop.DownloadUrl != null))?.FirstPropertyValue.DownloadUrl;
            this.Ecidoc_p90_E60_has_value = GetPropertyValueSemCms(pSemCmsModel.GetPropertyByPath("http://museodelprado.es/ontologia/ecidoc.owl#p90_E60_has_value"));
            this.Ecidoc_p91_E58_has_unit = GetPropertyValueSemCms(pSemCmsModel.GetPropertyByPath("http://museodelprado.es/ontologia/ecidoc.owl#p91_E58_has_unit"));
            this.Pm_conversion_factor = GetPropertyValueSemCms(pSemCmsModel.GetPropertyByPath("http://museodelprado.es/ontologia/pradomuseum.owl#conversion_factor"));
            if (string.IsNullOrEmpty(this.Pm_conversion_factor))
            {
                this.Pm_conversion_factor = "1";
            }
            this.ECidoc_p2_E55_has_type = new Dictionary<LanguageEnum, string>();
            this.ECidoc_p2_E55_has_type.Add(idiomaUsuario, GetPropertyValueSemCms(pSemCmsModel.GetPropertyByPath("http://museodelprado.es/ontologia/ecidoc.owl#p2_E55_has_type")));

        }
        [LABEL(LanguageEnum.es, "Valor:")]
        [RDFProperty("http://museodelprado.es/ontologia/ecidoc.owl#p90_E60_has_value")]
        public string Ecidoc_p90_E60_has_value { get; set; }

        [LABEL(LanguageEnum.es, "Unidad:")]
        [RDFProperty("http://museodelprado.es/ontologia/ecidoc.owl#p91_E58_has_unit")]
        public string Ecidoc_p91_E58_has_unit { get; set; }

        [LABEL(LanguageEnum.es, "Factor de conversión:")]
        [RDFProperty("http://museodelprado.es/ontologia/pradomuseum.owl#conversion_factor")]
        public string Pm_conversion_factor { get; set; }

        [LABEL(LanguageEnum.es, "Tipo:")]
        [RDFProperty("http://museodelprado.es/ontologia/ecidoc.owl#p2_E55_has_type")]
        public Dictionary<LanguageEnum, string> ECidoc_p2_E55_has_type { get; set; }
    }

    public class ConceptNode : GnossOCBase
    {

        public ConceptNode() : base() { }

        public ConceptNode(SemanticEntityModel pSemCmsModel, LanguageEnum idiomaUsuario) : base()
        {
            this.mGNOSSID = pSemCmsModel.Entity.Uri;
            this.mURL = pSemCmsModel.Properties.FirstOrDefault(p => p.PropertyValues.Any(prop => prop.DownloadUrl != null))?.FirstPropertyValue.DownloadUrl;
            this.Skos_symbol = GetPropertyValueSemCms(pSemCmsModel.GetPropertyByPath("http://www.w3.org/2008/05/skos#symbol"));
            this.Skos_prefLabel = GetPropertyValueSemCms(pSemCmsModel.GetPropertyByPath("http://www.w3.org/2008/05/skos#prefLabel"));


        }
        [LABEL(LanguageEnum.es, "Profundidad:")]
        [RDFProperty("http://www.w3.org/2008/05/skos#symbol")]
        public string Skos_symbol { get; set; }

        [LABEL(LanguageEnum.es, "Titulo:")]
        [RDFProperty("http://www.w3.org/2008/05/skos#prefLabel")]
        public string Skos_prefLabel { get; set; }

    }

    public class C1003_Manifestation : GnossOCBase
    {

        public C1003_Manifestation() : base() { }

        public C1003_Manifestation(SemanticEntityModel pSemCmsModel, LanguageEnum idiomaUsuario) : base()
        {
            this.mGNOSSID = pSemCmsModel.Entity.Uri;
            this.mURL = pSemCmsModel.Properties.FirstOrDefault(p => p.PropertyValues.Any(prop => prop.DownloadUrl != null))?.FirstPropertyValue.DownloadUrl;
            this.Pm_pages = GetPropertyValueSemCms(pSemCmsModel.GetPropertyByPath("http://museodelprado.es/ontologia/pradomuseum.owl#pages"));
            this.Efrbrer_P3002_has_form_of_work = GetPropertyValueSemCms(pSemCmsModel.GetPropertyByPath("http://museodelprado.es/ontologia/efrbrer.owl#P3002_has_form_of_work"));
            this.Efrbrer_p3057_has_place_of_publication_or_distribution = GetPropertyValueSemCms(pSemCmsModel.GetPropertyByPath("http://museodelprado.es/ontologia/efrbrer.owl#p3057_has_place_of_publication_or_distribution"));
            this.Efrbrer_p3056_has_publisher_or_distributor = GetPropertyValueSemCms(pSemCmsModel.GetPropertyByPath("http://museodelprado.es/ontologia/efrbrer.owl#p3056_has_publisher_or_distributor"));
            this.Efrbrer_p3020_has_title_of_the_manifestation = GetPropertyValueSemCms(pSemCmsModel.GetPropertyByPath("http://museodelprado.es/ontologia/efrbrer.owl#p3020_has_title_of_the_manifestation"));
            this.Efrbrer_p2017_is_produced_by = GetPropertyValueSemCms(pSemCmsModel.GetPropertyByPath("http://museodelprado.es/ontologia/efrbrer.owl#p2017_is_produced_by"));
            this.Efrbrer_P3055_has_date_of_publication_or_distribution = GetPropertyValueSemCms(pSemCmsModel.GetPropertyByPath("http://museodelprado.es/ontologia/efrbrer.owl#P3055_has_date_of_publication_or_distribution"));
            this.Pm_collection = GetPropertyValueSemCms(pSemCmsModel.GetPropertyByPath("http://museodelprado.es/ontologia/pradomuseum.owl#collection"));
            this.Pm_volume = GetPropertyValueSemCms(pSemCmsModel.GetPropertyByPath("http://museodelprado.es/ontologia/pradomuseum.owl#volume"));
            this.Pm_modelType = GetPropertyValueSemCms(pSemCmsModel.GetPropertyByPath("http://museodelprado.es/ontologia/pradomuseum.owl#modelType"));
        }

        [LABEL(LanguageEnum.es, "Páginas:")]
        [RDFProperty("http://museodelprado.es/ontologia/pradomuseum.owl#pages")]
        public string Pm_pages { get; set; }

        [LABEL(LanguageEnum.es, "Tipo:")]
        [RDFProperty("http://museodelprado.es/ontologia/efrbrer.owl#P3002_has_form_of_work")]
        public string Efrbrer_P3002_has_form_of_work { get; set; }

        [LABEL(LanguageEnum.es, "Lugar de edición:")]
        [RDFProperty("http://museodelprado.es/ontologia/efrbrer.owl#p3057_has_place_of_publication_or_distribution")]
        public string Efrbrer_p3057_has_place_of_publication_or_distribution { get; set; }

        [LABEL(LanguageEnum.es, "Editor:")]
        [RDFProperty("http://museodelprado.es/ontologia/efrbrer.owl#p3056_has_publisher_or_distributor")]
        public string Efrbrer_p3056_has_publisher_or_distributor { get; set; }

        [LABEL(LanguageEnum.es, "Título:")]
        [RDFProperty("http://museodelprado.es/ontologia/efrbrer.owl#p3020_has_title_of_the_manifestation")]
        public string Efrbrer_p3020_has_title_of_the_manifestation { get; set; }

        [LABEL(LanguageEnum.es, "Autor:")]
        [RDFProperty("http://museodelprado.es/ontologia/efrbrer.owl#p2017_is_produced_by")]
        public string Efrbrer_p2017_is_produced_by { get; set; }

        [LABEL(LanguageEnum.es, "Fecha de publicación:")]
        [RDFProperty("http://museodelprado.es/ontologia/efrbrer.owl#P3055_has_date_of_publication_or_distribution")]
        public string Efrbrer_P3055_has_date_of_publication_or_distribution { get; set; }

        [LABEL(LanguageEnum.es, "Colección:")]
        [RDFProperty("http://museodelprado.es/ontologia/pradomuseum.owl#collection")]
        public string Pm_collection { get; set; }

        [LABEL(LanguageEnum.es, "Volumen:")]
        [RDFProperty("http://museodelprado.es/ontologia/pradomuseum.owl#volume")]
        public string Pm_volume { get; set; }

        [LABEL(LanguageEnum.es, "Tipo modelo:")]
        [RDFProperty("http://museodelprado.es/ontologia/pradomuseum.owl#modelType")]
        public string Pm_modelType { get; set; }

    }

    private string ObtenerFechaFormateadaFormAnyoMesDia(string pFechaNormalizada, string pSeparador)
    {
        if (!string.IsNullOrEmpty(pFechaNormalizada) && pFechaNormalizada.Length >= 8)
        {
            string mes = pFechaNormalizada.Substring(4, 2);

            if (mes == "00")
            {
                mes = "01";
            }

            string dia = pFechaNormalizada.Substring(6, 2);

            if (dia == "00")
            {
                dia = "01";
            }

            return string.Concat(pFechaNormalizada.Substring(0, 4), pSeparador, mes, pSeparador, dia);
        }
        else
        {
            return string.Empty;
        }
    }
    public static List<string> GetMultiplePropertyValueSemCms(SemanticPropertyModel pProperty)
    {
        List<string> listString = new List<string>();
        if (pProperty != null && pProperty.PropertyValues.Count > 0)
        {
            foreach (SemanticPropertyModel.PropertyValue propValue in pProperty.PropertyValues)
            {
                listString.Add(propValue.Value);
            }
        }
        return listString;
    }

    public static string GetHtmlDocumentosBiblio(C1003_Manifestation documento)
    {
        string htmlTextoDocumento = string.Empty;

        if (!string.IsNullOrEmpty(documento.Efrbrer_p2017_is_produced_by))
        {
            htmlTextoDocumento = " <span about=\"" + documento.GNOSSID + "\" property=\"" + documento.GetPropertyURI(nameof(documento.Efrbrer_p2017_is_produced_by)) + "\">" + documento.Efrbrer_p2017_is_produced_by + "</span>";
        }

        // Título documento
        if (!string.IsNullOrEmpty(documento.Efrbrer_p3020_has_title_of_the_manifestation))
        {
            if (!string.IsNullOrEmpty(htmlTextoDocumento))
            {
                htmlTextoDocumento += ", ";
            }
            htmlTextoDocumento += " <span about=\"" + documento.GNOSSID + "\" property=\"" + documento.GetPropertyURI(nameof(documento.Efrbrer_p3020_has_title_of_the_manifestation)) + "\"><i>" + documento.Efrbrer_p3020_has_title_of_the_manifestation + "</i></span>";
        }

        if (!string.IsNullOrEmpty(documento.Efrbrer_P3002_has_form_of_work))
        {
            string hasFormOfWork = documento.Efrbrer_P3002_has_form_of_work;
            bool pintarEdipub = false;
            bool pintarColbib = false;

            switch (hasFormOfWork)
            {
                case "Libro":
                    pintarEdipub = true;
                    break;
                case "Ensayo":
                case "Revista":
                    pintarColbib = true;
                    break;
                case "Catálogo de exposición":
                    pintarEdipub = true;
                    pintarColbib = true;
                    break;
            }

            if (pintarColbib)
            {
                if (!string.IsNullOrEmpty(documento.Pm_collection))
                {
                    if (!string.IsNullOrEmpty(htmlTextoDocumento))
                    {
                        htmlTextoDocumento += ", ";
                    }
                    htmlTextoDocumento += " <span about=\"" + documento.GNOSSID + "\" property=\"" + documento.GetPropertyURI(nameof(documento.Pm_collection)) + "\">" + documento.Pm_collection + "</span>";
                }
            }

            if (hasFormOfWork == "Libro" || hasFormOfWork == "Revista")
            {
                if (!string.IsNullOrEmpty(documento.Pm_volume))
                {
                    if (!string.IsNullOrEmpty(htmlTextoDocumento))
                    {
                        htmlTextoDocumento += ", ";
                    }
                    htmlTextoDocumento += " <span about=\"" + documento.GNOSSID + "\" property=\"" + documento.GetPropertyURI(nameof(documento.Pm_volume)) + "\">" + documento.Pm_volume + "</span>";
                }
            }

            if (pintarEdipub)
            {
                if (!string.IsNullOrEmpty(documento.Efrbrer_p3056_has_publisher_or_distributor))
                {
                    if (!string.IsNullOrEmpty(htmlTextoDocumento))
                    {
                        htmlTextoDocumento += ", ";
                    }
                    htmlTextoDocumento += " <span about=\"" + documento.GNOSSID + "\" property=\"" + documento.GetPropertyURI(nameof(documento.Efrbrer_p3056_has_publisher_or_distributor)) + "\">" + documento.Efrbrer_p3056_has_publisher_or_distributor + "</span>";
                }
            }
        }

        // Lugar de edición del documento
        if (!string.IsNullOrEmpty(documento.Efrbrer_p3057_has_place_of_publication_or_distribution))
        {
            if (!string.IsNullOrEmpty(htmlTextoDocumento))
            {
                htmlTextoDocumento += ", ";
            }
            htmlTextoDocumento += " <span about=\"" + documento.GNOSSID + "\" property=\"" + documento.GetPropertyURI(nameof(documento.Efrbrer_p3057_has_place_of_publication_or_distribution)) + "\">" + documento.Efrbrer_p3057_has_place_of_publication_or_distribution + "</span>";
        }

        //Fecha de publicación del documento
        if (!string.IsNullOrEmpty(documento.Efrbrer_P3055_has_date_of_publication_or_distribution))
        {
            if (!string.IsNullOrEmpty(htmlTextoDocumento))
            {
                htmlTextoDocumento += ", ";
            }
            htmlTextoDocumento += " <span about=\"" + documento.GNOSSID + "\" property=\"" + documento.GetPropertyURI(nameof(documento.Efrbrer_P3055_has_date_of_publication_or_distribution)) + "\">" + documento.Efrbrer_P3055_has_date_of_publication_or_distribution + "</span>";
        }

        //Paginas
        if (!string.IsNullOrEmpty(documento.Pm_pages))
        {
            if (!string.IsNullOrEmpty(htmlTextoDocumento))
            {
                htmlTextoDocumento += ", ";
            }
            htmlTextoDocumento += "pp. <span about=\"" + documento.GNOSSID + "\" property=\"" + documento.GetPropertyURI(nameof(documento.Pm_pages)) + "\">" + documento.Pm_pages + "</span>";
        }

        return htmlTextoDocumento;
    }

    public static string GetHtmlDimension(E54_Dimension dimension, bool pNegrita)
    {
        // RDFa entidad Dimension
        string textoMedida = string.Empty;
        string tipo = string.Empty;
        if (dimension.ECidoc_p2_E55_has_type.Count > 0)
        {
            tipo = dimension.ECidoc_p2_E55_has_type.First().Value;
        }
        if (!string.IsNullOrEmpty(tipo) && pNegrita)
        {
            tipo = "<strong>" + tipo + "</strong>";
        }
        string htmlTipo = "<span  about=\"" + dimension.GNOSSID + "\" property=\"" + dimension.GetPropertyURI(nameof(dimension.ECidoc_p2_E55_has_type)) + "\">" + tipo + "</span>";
        string htmlFactorConversion = "<span about=\"" + dimension.GNOSSID + "\" property=\"" + dimension.GetPropertyURI(nameof(dimension.Pm_conversion_factor)) + "\">" + dimension.Pm_conversion_factor + "</span>";
        string htmlUnidad = "<span about=\"" + dimension.GNOSSID + "\" property=\"" + dimension.GetPropertyURI(nameof(dimension.Ecidoc_p91_E58_has_unit)) + "\">" + dimension.Ecidoc_p91_E58_has_unit + "</span>";

        float FactorConversionFloat = 1;
        float valorFloat = 0;

        if (!string.IsNullOrEmpty(tipo) && !string.IsNullOrEmpty(dimension.Ecidoc_p90_E60_has_value) && !string.IsNullOrEmpty(dimension.Ecidoc_p91_E58_has_unit) && !string.IsNullOrEmpty(dimension.Pm_conversion_factor))
        {
            try
            {
                FactorConversionFloat = float.Parse(dimension.Pm_conversion_factor);
                valorFloat = float.Parse(dimension.Ecidoc_p90_E60_has_value);
            }
            catch (Exception e)
            {
                FactorConversionFloat = 1;
                valorFloat = 0;
            }

            string htmlValor = "<span about=\"" + dimension.GNOSSID + "\" property=\"" + dimension.GetPropertyURI(nameof(dimension.Ecidoc_p90_E60_has_value)) + "\">" + valorFloat / FactorConversionFloat + "</span>";
            textoMedida = string.Concat(htmlTipo, ": ", htmlValor, " ", htmlUnidad);
        }

        return textoMedida;
    }
}
