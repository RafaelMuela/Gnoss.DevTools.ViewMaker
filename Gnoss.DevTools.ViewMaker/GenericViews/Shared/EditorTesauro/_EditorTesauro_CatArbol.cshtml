@model ThesaurusEditorModel
@*
Descripción
-----------------------------------------------
Vista parcial que se utilizará para mostrar las categorías del tesauro en modo Árbol. 
Esta vista se utiliza en la vista que la contiene, como es EditorTesauro, dentro de EditarRecurso

Variables
----------------------------------------------------------------
*@
@{


}

@*
----------------------------------------------------------------
-------------------- Vista parcial de mostrar categorias Tesauro en modo Árbol --------------------
*@

@functions{
    string PintarCategoria(CategoryModel pCategoriaTesauro)
    {
        bool esCategoriaCompartida = false;
        if(Model.SharedCategories != null && Model.SharedCategories.Contains(pCategoriaTesauro.Key))
        {
            esCategoriaCompartida = true;
        }
             
            @* Comprobar si dispone de hijos la categoría actual *@
            bool tieneHijos = !esCategoriaCompartida && ((List<CategoryModel>)Model.ThesaurusCategories).Count(cat => cat.ParentCategoryKey == pCategoriaTesauro.Key) > 0;
        
            @* Hay subcategorías (Hijos): Pintar el + para desplegar *@
            if (tieneHijos)
            {
                //<img style="border-width:0px;margin-right:5px;cursor:pointer;" src="@Html.GetBaseUrlStatic()/img/verMas.gif" onclick="javascript:MVCDesplegarTreeView(this);" />
            }
            @* No Hay subcategorías (Hijos): No pintar para desplegar *@
            else{
	            //<img style="border-width:0px;" src="@Html.GetBaseUrlStatic()/img/miniWhiteSpace.gif" />
            }
        
            @* Mostrar o pintar la categoría*@
            <div class="categoria-wrap">
                <div class="categoria @pCategoriaTesauro.Key">
                    @{
                        string accionClick = "MVCMarcarElementoSelCat(this, 'panel_hackCatTesSel', 'txtHackCatTesSel');";
                        string cadenaChecked = "";
                        string cadenaDisabled = "";

                        if (Model.SelectedCategories.Contains(pCategoriaTesauro.Key))
                        {
                            cadenaChecked = "checked=\"checked\"";
                        }

                        if (Model.DisabledCategories != null && Model.DisabledCategories.Contains(pCategoriaTesauro.Key))
                        {
                            cadenaDisabled = "disabled=\"disabled\"";
                            accionClick = "";
                        }

                    }
                    @* Mostrar o pintar el input y el título de la categoría correspondiente*@
                    <div class="custom-control custom-checkbox themed little primary">
                        <input type="checkbox"
                               id="arb_@pCategoriaTesauro.Key"
                               onclick="@accionClick" @cadenaChecked @cadenaDisabled
                               data-item="@pCategoriaTesauro.Key"
                               class="custom-control-input" />
                        <label class="custom-control-label"
                               for="arb_@pCategoriaTesauro.Key">@pCategoriaTesauro.Name</label>
                    </div>
                </div> 
                @if (tieneHijos)
                {
                    @* Mostrar opción de desplegar si tiene hijos la categoría*@
                    <div class="boton-desplegar">
                        <span class="material-icons">keyboard_arrow_down</span>
                    </div>
                    @* Mostrar o no el panel de los hijos (subcategorías) si esta categoría dispone de subcategorías*@
                    <div class="panHijos">                    
                        @foreach (CategoryModel categoria in ((List<CategoryModel>)Model.ThesaurusCategories).Where(cat => cat.ParentCategoryKey == pCategoriaTesauro.Key).OrderBy(cat => cat.Order))
                        {
                             @PintarCategoria(categoria);
                        }
                    </div>            
                }            
            </div>
        return string.Empty;
    }
}

@* Listado de Categorías en formato "ARBOL" *@
<div class="tab-pane fade show active"
     id="ver-arbol"
     role="tabpanel"
     aria-labelledby="ver-arbol-tab">
    @* Buscador-Filtrador de Categorías*@
    <div class="buscador-categorias">
        <div class="form-group">
            <input class="filtroRapido form-control not-outline"
                placeholder="Busca una categoría"
                type="text"
                onkeydown="javascript:if(event.which || event.keyCode){if ((event.which == 13) || (event.keyCode == 13)) {return false;}}"
                onkeyup="javascript:MVCFiltrarListaSelCatArbol(this, 'panDesplegableSelCat');" />                
        </div>
    </div>
    <div class="divTesArbol divCategorias clearfix">
        @foreach (CategoryModel categoria in ((List<CategoryModel>)Model.ThesaurusCategories).Where(cat => cat.ParentCategoryKey == Guid.Empty).OrderBy(cat => cat.Order))
        {
            @PintarCategoria(categoria);
        }
    </div>
</div>
