@model ResourceViewModel
@*
Descripción
-----------------------------------------------
Vista que se utiliza para mostrar la categoria Tesauro en formato Arbol.
Se trata de una vista parcial que se utiliza por ejemplo en vistas de "Categorizar" (_categories.cshtml)

Variables
----------------------------------------------------------------
*@
@{
ResourceModel fichaRecurso = Model.Resource;
}

@*
    ----------------------------------------------------------------
    -------------------- Vista parcial de mostrar categorias Tesauro en modo Árbol --------------------
*@

@functions{

    string PintarCategoria(CategoryModel pCategoriaTesauro)
    {
        ResourceModel fichaRecurso = Model.Resource;
        @* Comprobar si dispone de hijos la categoría actual *@
        bool tieneHijos = ((List<CategoryModel>)Model.Categories).Count(cat => cat.ParentCategoryKey == pCategoriaTesauro.Key) > 0;

        @* Hay subcategorías (Hijos): Pintar el + para desplegar *@
        if (tieneHijos)
        {
            //<img style="border-width:0px;margin-right:5px;cursor:pointer;" src="@Html.GetBaseUrlStatic()/img/verMas.gif" onclick="javascript:MVCDesplegarTreeView(this);" />
        }
        @* No Hay subcategorías (Hijos): No pintar para desplegar *@
        else
        {
            //<img style="border-width:0px;" src="@Html.GetBaseUrlStatic()/img/miniWhiteSpace.gif" />
        }

        @* Mostrar o pintar la categoría*@
        <div class="categoria-wrap">
            <div class="categoria @pCategoriaTesauro.Key">
                @{
                    string accionClick = "MVCMarcarElementoSelCat(this, 'despAccionRec_" + fichaRecurso.Key + "');";
                    string cadenaChecked = "";
                    string cadenaDisabled = "";
                    if (fichaRecurso.Categories != null && fichaRecurso.Categories.Count(cat => cat.Key == pCategoriaTesauro.Key) > 0)
                    {
                        cadenaChecked = "checked=\"checked\"";
                        if (!Model.AllowEditCategories)
                        {
                            cadenaDisabled = "disabled=\"disabled\"";
                        }
                    }
                }
                @* Mostrar o pintar el input y el título de la categoría correspondiente*@
                <div class="custom-control custom-checkbox themed little primary">
                    <input type="checkbox"
                           id="arb_@pCategoriaTesauro.Key"
                           onclick="@accionClick" @cadenaChecked @cadenaDisabled
                           data-item="@pCategoriaTesauro.Key"
                           class="custom-control-input" />
                    <label class="custom-control-label"
                           for="arb_@pCategoriaTesauro.Key">@pCategoriaTesauro.Name</label>
                    </div>
                </div>
                @if (tieneHijos)
                {
                    @* Mostrar opción de desplegar si tiene hijos la categoría*@
                    <div class="boton-desplegar">
                        <span class="material-icons">keyboard_arrow_down</span>
                    </div>
                    @* Mostrar o no el panel de los hijos (subcategorías) si esta categoría dispone de subcategorías*@
                    <div class="panHijos">
                        @foreach (CategoryModel categoria in ((List<CategoryModel>)Model.Categories).Where(cat => cat.ParentCategoryKey == pCategoriaTesauro.Key).OrderBy(cat => cat.Order))
                        {
                            @PintarCategoria(categoria);
                        }
                    </div>
                }
            </div>
        return string.Empty;
    }
}

@* Listado de Categorías en formato "ARBOL" *@
<div class="tab-pane fade show active"
     id="ver-arbol"
     role="tabpanel"
     aria-labelledby="ver-arbol-tab">
        @* Buscador-Filtrador de Categorías*@
        <div class="buscador-categorias">
            <div class="form-group">
                <input class="filtroRapido form-control not-outline"
                       placeholder="Busca una categoría"
                       type="text"
                       onkeydown="javascript:if(event.which || event.keyCode){if ((event.which == 13) || (event.keyCode == 13)) {return false;}}"
                       onkeyup="javascript:MVCFiltrarListaSelCatArbol(this, 'despAccionRec_@fichaRecurso.Key');" />                
            </div>
        </div>
    <div class="divTesArbol divCategorias clearfix">
        @foreach (CategoryModel categoria in ((List<CategoryModel>)Model.Categories).Where(cat => cat.ParentCategoryKey == Guid.Empty).OrderBy(cat => cat.Order))
        {
            @PintarCategoria(categoria);
        }
    </div>
</div>

